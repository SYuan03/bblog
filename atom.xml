<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淡水鱼的蔚蓝之海</title>
  
  <subtitle>a</subtitle>
  <link href="https://bblog.031105.xyz/atom.xml" rel="self"/>
  
  <link href="https://bblog.031105.xyz/"/>
  <updated>2024-10-04T16:51:58.583Z</updated>
  <id>https://bblog.031105.xyz/</id>
  
  <author>
    <name>奔跑的淡水鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>饥荒私服搭建</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA.html</id>
    <published>2024-09-30T12:53:29.000Z</published>
    <updated>2024-10-04T16:51:58.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考">参考</h2><ol><li><a class="link" href="https://leanote.zzzmh.cn/blog/post/admin/63e46785da7405001301c7f5">https://leanote.zzzmh.cn/blog/post/admin/63e46785da7405001301c7f5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (docker版)</li><li><a class="link" href="https://blog.csdn.net/HoewDec/article/details/139900715">https://blog.csdn.net/HoewDec/article/details/139900715 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (普通版)</li><li><a class="link" href="https://code-killerr.github.io/2021/10/17/buildDonNotStarveServe/">https://code-killerr.github.io/2021/10/17/buildDonNotStarveServe/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://www.yeatsj.com/2022/11/04/20221104DST-01/">https://www.yeatsj.com/2022/11/04/20221104DST-01/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (一部分内容/图片源自该博客，主要参考)</li><li><a class="link" href="https://www.bilibili.com/read/cv14798689/">https://www.bilibili.com/read/cv14798689/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol><h2 id="Part-One（失败篇，docker版">Part One（失败篇，docker版</h2><p>拉去镜像，由于要搭在国内服务器上，能配置下</p><p>要么代理（我有点懒，不想搞），所以找了个能用的镜像源</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.dockermirror.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>改完后重新启动下</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div><p>然后再拉取镜像</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jamesits/dst-server:nightly</span><br><span class="line">docker pull jamesits/dst-server:latest</span><br></pre></td></tr></table></figure></div><blockquote><p>以下是对不同版本的一个解释</p></blockquote><p>这个描述解释了不同 Docker 镜像版本之间的区别，主要是 <code>latest</code>、<code>vanilla</code>、<code>nightly</code> 和 <code>steamcmd-rebase</code>。让我逐步解释一下每个版本的意义，特别是你提到的 <code>nightly</code>。</p><ol><li><strong><code>latest</code> 或 <code>vanilla</code></strong>:<ul><li>这两个版本更新频率较低，通常是较为稳定的版本，推荐用于日常使用。</li><li>它们不会经常更新，意味着这个版本的代码和功能不会每天都变化，更加可靠。</li><li>这些镜像适合不需要紧跟最新开发版本的用户。</li></ul></li><li><strong><code>nightly</code></strong>:<ul><li>这是一个 <strong>“夜间构建”</strong> 的版本，意味着它每天自动构建一次，并尝试包含最新的服务器代码。</li><li>因为是自动化构建的版本，所以可能会包含最新的功能或者修复，但也有可能因为代码不稳定而出现问题。</li><li>如果你希望每天都使用最新的开发版本，并且能够接受潜在的不稳定性，那么你可以选择这个版本。</li><li>这个版本的重点在于 <strong>“最新”</strong>，所以对于开发者或者测试者来说非常合适，但可能不适合生产环境使用。</li></ul></li><li><strong><code>steamcmd-rebase</code></strong>:<ul><li>这个版本和 <code>latest</code> 类似，但它是基于另一个镜像 (<code>cm2network/steamcmd:root</code>) 来构建的。</li><li>它会提供相同的功能，但底层基础镜像有所不同，可能会影响容器的大小或依赖的配置。</li><li>如果你需要基于 <code>steamcmd</code> 镜像的环境，可以选择这个版本。</li></ul></li><li><strong><code>-slim</code> 版本</strong>:<ul><li>所有版本（除了 <code>nightly</code>）都有一个 <strong><code>-slim</code></strong> 标签的版本。</li><li>这些版本没有预先安装 <code>DST</code> 服务器文件，每次启动容器时都需要重新下载所需的文件。</li><li><code>-slim</code> 版本体积更小，但不能在离线环境下运行，因为启动时需要从网络下载文件。</li></ul></li><li><strong>构建方式</strong>：<ul><li><strong><code>latest</code></strong> 是通过 Docker Hub 的自动构建（autobuild）生成的。</li><li>其他版本（如 <code>nightly</code>、<code>steamcmd-rebase</code> 等）是通过 Azure DevOps CI（持续集成工具）构建的，意味着它们的构建过程可能更加灵活且集成了持续开发的代码更新。</li></ul></li></ol><p>总结：</p><ul><li><strong><code>latest/vanilla</code></strong>：稳定且较少更新的版本，推荐日常使用。</li><li><strong><code>nightly</code></strong>：每天自动更新的最新代码版本，可能更不稳定，但包含最新的功能和修复，适合开发或测试。</li><li><strong><code>steamcmd-rebase</code></strong>：类似 <code>latest</code>，但基于不同的底层镜像。</li><li><strong><code>-slim</code></strong> 版本：没有预安装服务器文件，每次启动都需要下载文件，无法离线运行。</li></ul><p>如果你在测试最新功能，<code>nightly</code> 版本适合你；如果你需要稳定性，<code>latest</code> 是更好的选择。</p><p><strong>数据目录</strong></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/yuan/dock/dst</span><br></pre></td></tr></table></figure></div><p>启动</p><div class="highlight-container" data-rel="Livescript"><figure class="iseeu highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d<span class="string">\</span></span><br><span class="line">    -p <span class="number">10999</span>-<span class="number">11000</span>:<span class="number">10999</span>-<span class="number">11000</span>/udp<span class="string">\</span></span><br><span class="line">    -p <span class="number">12346</span>-<span class="number">12347</span>:<span class="number">12346</span>-<span class="number">12347</span>/udp<span class="string">\</span></span><br><span class="line">    -v /home/yuan/dock/dst:/data<span class="string">\</span></span><br><span class="line">    -m <span class="number">1024</span>M --oom-kill-disable --memory-swap=-<span class="number">1</span><span class="string">\</span></span><br><span class="line">    -e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span><span class="string">\</span></span><br><span class="line">    --name dstserver<span class="string">\</span></span><br><span class="line">    jamesits/dst-server</span><br></pre></td></tr></table></figure></div><blockquote><p>有点麻烦，不想搞docker的网络，感觉出问题了，于是换个教程</p></blockquote><hr><h2 id="Part-Two（再次失败篇">Part Two（再次失败篇</h2><h3 id="1-安装依赖">1. 安装依赖</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository multiverse</span><br><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libstdc++6 libgcc1 libcurl4-gnutls-dev:i386 lib32z1</span><br></pre></td></tr></table></figure></div><h3 id="2-安装SteamCMD">2. 安装SteamCMD</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/steamcmd</span><br><span class="line"><span class="built_in">cd</span> ~/steamcmd</span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class="line">tar -zxvf steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure></div><h3 id="3-安装饥荒联机版">3. 安装饥荒联机版</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">steam&gt; force_install_dir ../xxx <span class="comment"># 注意这步是设定下载或者以后验证的位置的</span></span><br><span class="line">steam&gt; login anonymous</span><br><span class="line">steam&gt; app_update 343050 validate</span><br><span class="line">steam&gt; quit</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241003230415792.png" alt="image-20241003230415792"></p><p>似乎还是遭遇了网络问题qwq，无奈只好挂上了代理</p><blockquote><p>参考</p><p><a class="link" href="https://v2raya.org/en/docs/prologue/introduction/">https://v2raya.org/en/docs/prologue/introduction/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>放两张设置截图记录下</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241003235335067.png" alt="image-20241003235335067"></p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241003235344047.png" alt="image-20241003235344047"></p><blockquote><p>Continue…</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004000145912.png" alt="image-20241004000145912"></p><p>类目</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004000427138.png" alt="image-20241004000427138"></p><blockquote><p>增加虚拟内存swap（也不知道对不对，看着gpt的弄弄的</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004154056771.png" alt="image-20241004154056771"></p></blockquote><h3 id="4-本地创建世界">4. 本地创建世界</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004161325349.png" alt="image-20241004161325349"></p><blockquote><p>mod什么的也选上</p></blockquote><h3 id="5-创建私服获取token">5. 创建私服获取token</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004161410024.png" alt="image-20241004161410024"></p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004161424787.png" alt="image-20241004161424787"></p><blockquote><p>不过为了不影响本地的配置，感觉不如传到服务器上再新建，而且Linux下新建文件什么的方便点</p></blockquote><h3 id="6-上传整个cluster">6. 上传整个cluster</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004161712591.png" alt="image-20241004161712591"></p><blockquote><p>allworlds/iGotSmoke是我自己新建的，其他的都是之前steamcmd下载的</p></blockquote><p>新建之前说的adminlist.txt和cluster_token.txt，并且把内容放进去</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004162224734.png" alt="image-20241004162224734"></p><h3 id="7-服务器添加mods">7. 服务器添加mods</h3><p>找到电脑上Master或者Caves目录下的 modoverrides.lua 文件（这俩似乎是一样的，也许有专门mod？不确定），找到形如 workshop-xxxxxxxx 的内容，后面的xxxxx就是mod的代码，创意工坊内mod界面网址后的数字就是这个。</p><p>将这些纯数字代码复制出来写成 ServerModSetup(“xxxxxxx”) 格式，写入服务器上的 /home/yuan/dst/mods/dedicated_server_mods_setup.lua 文件中。可以直接用vim命令写入，也可以借助第三方工具。</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004163138997.png" alt="image-20241004163138997"></p><blockquote><p>这是为了让服务器在setup的时候去（检查）下载这些Mods</p></blockquote><p><strong>重要的事情（补充）</strong><br>这个 dedicated_server_mods_setup.lua 文件只是代表服务器会下载，具体开启MOD以及设置MOD，需要进入/home/steam/module/DST/allworlds/world/Master，里面修改 modoverrides.lua 文件，由于刚刚电脑中已经配置过了，所以这个文件是准确OK的，但是如果后期添加MOD， dedicated_server_mods_setup.lua 和 modoverrides.lua 都需要修改保存。</p><h3 id="8-创建启动脚本">8. 创建启动脚本</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004163415735.png" alt="image-20241004163415735"></p><blockquote><p>据说bin64下的也行，占用的内存可能多一点，就没用</p></blockquote><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dontstarve_dedicated_server_nullrenderer -console -persistent_storage_root /home/yuan/dst -conf_dir allworlds -cluster iGotSmoke -shard Caves</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dontstarve_dedicated_server_nullrenderer -console -persistent_storage_root /home/yuan/dst -conf_dir allworlds -cluster iGotSmoke -shard Master</span><br></pre></td></tr></table></figure></div><blockquote><p>这里就相当于是填写了cluster(iGotSmoke)内容所在的路径</p></blockquote><p>启动，新建一个master的screen启动脚本，经典报错;</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004164515403.png" alt="image-20241004164515403"></p><p>find了一下</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004164917204.png" alt="image-20241004164917204"></p><p>ldd看了下确实找不到</p><p>使用 <code>ldd</code> 命令检查程序依赖的共享库是否都能找到：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd ./dontstarve_dedicated_server_nullrenderer</span><br></pre></td></tr></table></figure></div><p>这将列出程序所依赖的所有库，并标明哪些库未找到。</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004165047541.png" alt="image-20241004165047541"></p><p>ln -s到了/usr/lib然后发现似乎有32位和64位的问题</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004165534002.png" alt="image-20241004165534002"></p><p>于是尝试装了一下32位的库</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libstdc++6:i386</span><br></pre></td></tr></table></figure></div><p>再启动，似乎是成功了</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241004170019088.png" alt="image-20241004170019088"></p><p>再启动下cave</p><p>由于某些操作失误，未能成功，打算重整目录结构再来一遍</p><h2 id="Part-Three">Part Three</h2><h3 id="1-目录结构准备">1. 目录结构准备</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005004338231.png" alt="image-20241005004338231"></p><p>client准备存放steamcmd下载的东西</p><p>storage则是持久化目录</p><p>myscripts则是放各种脚本</p><h3 id="2-运行steamcmd进行下载">2. 运行steamcmd进行下载</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Steam&gt; force_install_dir /home/yuan/dst/client</span><br><span class="line">Steam&gt; login anonymous</span><br><span class="line">Steam&gt; app_update 343050 validate</span><br><span class="line">Steam&gt; quit</span><br></pre></td></tr></table></figure></div><h3 id="3-脚本">3. 脚本</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">steamcmd_dir=<span class="string">&quot;/home/yuan/steamcmd&quot;</span></span><br><span class="line">install_dir=<span class="string">&quot;/home/yuan/dst/client&quot;</span></span><br><span class="line">doc_dir=<span class="string">&quot;/home/yuan/dst/storage&quot;</span>  <span class="comment"># Note that No need to add path DoNotStarveTogether</span></span><br><span class="line">cluster_name=<span class="string">&quot;iGotSmoke&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the current timestamp to use for log directory naming</span></span><br><span class="line">timestamp=$(<span class="built_in">date</span> +<span class="string">&quot;%Y%m%d_%H%M%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a log directory using the current timestamp</span></span><br><span class="line">log_dir=<span class="string">&quot;/home/yuan/dst/logs/<span class="variable">$timestamp</span>&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$log_dir</span>&quot;</span>  <span class="comment"># Create the log directory if it doesn&#x27;t exist</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$install_dir</span>/bin&quot;</span>  <span class="comment"># Change the current directory to the DST installation&#x27;s bin directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the base command that will run the DST server</span></span><br><span class="line">run_shared=(./dontstarve_dedicated_server_nullrenderer)  <span class="comment"># Executable for DST server</span></span><br><span class="line">run_shared+=(-console)  <span class="comment"># Run in console mode</span></span><br><span class="line">run_shared+=(-cluster <span class="string">&quot;<span class="variable">$cluster_name</span>&quot;</span>)  <span class="comment"># Specify the cluster name</span></span><br><span class="line">run_shared+=(-monitor_parent_process $$)  <span class="comment"># Monitor the parent process to prevent orphan processes</span></span><br><span class="line">run_shared+=(-persistent_storage_root <span class="string">&quot;<span class="variable">$doc_dir</span>&quot;</span>)  <span class="comment"># Set the location for persistent storage (game data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the Master shard and redirect its output to a log file in the newly created timestamped log directory</span></span><br><span class="line"><span class="comment"># &quot;$&#123;run_shared[@]&#125;&quot; -shard Master | sed &#x27;s/^/Master: /&#x27; &gt; &quot;$log_dir/master.log&quot; 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$&#123;run_shared[@]&#125;</span>&quot;</span> -shard Master | sed <span class="string">&#x27;s/^/Master: /&#x27;</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for 1 minute (60 seconds) before running the Caves shard</span></span><br><span class="line"><span class="built_in">sleep</span> 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the Caves shard and redirect its output to a separate log file in the same timestamped log directory</span></span><br><span class="line"><span class="comment"># &quot;$&#123;run_shared[@]&#125;&quot; -shard Caves | sed &#x27;s/^/Caves:  /&#x27; &gt; &quot;$log_dir/caves.log&quot; 2&gt;&amp;1</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$&#123;run_shared[@]&#125;</span>&quot;</span> -shard Caves | sed <span class="string">&#x27;s/^/Caves:  /&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>一开始自作主张弄了日志重定向，感觉有点问题，因为本身也有一套日志机制，发现在下面这个目录下就有</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005004620031.png" alt="image-20241005004620031"></p></blockquote><h3 id="4-关于模块">4. 关于模块</h3><p>感觉这个模块问题很大，自己传了本地的上去（本地的其实也会有多个路径存储，有的是workshop+id，有的在一个content目录下直接以id为目录</p><p>我把本地所有Mod能找到的都扔在了mods目录下，统一用workshop开头（不确定对不对）</p><p>建议不装最好…</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005004908128.png" alt="image-20241005004908128"></p><p>ugc这个目录也是自己会生成的</p><p>理论上加mod只要修改<code>/home/yuan/dst/client/mods/dedicated_server_mods_setup.lua</code></p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005005012295.png" alt="image-20241005005012295"></p><h4 id="总结">总结</h4><p>感觉还是网络的问题，多试试吧</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005005112042.png" alt="image-20241005005112042"></p><p>这是最终的结构，看起来把我有两个workshop传上去的又修改了位置（应该是网络畅通就能改正，不容易）</p><h2 id="Final">Final</h2><p>终于成功了</p><p><img lazyload src="/images/loading.svg" data-src="%E9%A5%A5%E8%8D%92%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20241005004416516.png" alt="image-20241005004416516"></p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="服务器" scheme="https://bblog.031105.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="饥荒" scheme="https://bblog.031105.xyz/tags/%E9%A5%A5%E8%8D%92/"/>
    
  </entry>
  
  <entry>
    <title>开源LLM翻译能力简单评测</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E5%BC%80%E6%BA%90llm%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E5%BC%80%E6%BA%90llm%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B.html</id>
    <published>2024-07-24T08:11:28.000Z</published>
    <updated>2024-09-30T12:51:30.544Z</updated>
    
    <content type="html"><![CDATA[<p>主要依托siliconflow平台的免费金，想看看哪个模型翻译的好点</p><p>先看下目前账号可用的模型列表</p><p><a class="link" href="https://docs.siliconflow.cn/reference/retrieve-a-list-of-models-1">https://docs.siliconflow.cn/reference/retrieve-a-list-of-models-1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stabilityai/stable-diffusion-xl-base-1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TencentARC/PhotoMaker&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;InstantX/InstantID&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mistralai/Mixtral-8x7B-Instruct-v0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mistralai/Mistral-7B-Instruct-v0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stabilityai/stable-diffusion-2-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stabilityai/sd-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stabilityai/sdxl-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ByteDance/SDXL-Lightning&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deepseek-ai/deepseek-llm-67b-chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen1.5-14B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mixtralai/Mixtral-8x22B-Instruct-v0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meta-llama/Meta-Llama-3-70B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meta-llama/Meta-Llama-3-8B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen1.5-7B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen1.5-110B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen1.5-32B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01-ai/Yi-1.5-6B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01-ai/Yi-1.5-9B-Chat-16K&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01-ai/Yi-1.5-34B-Chat-16K&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;THUDM/chatglm3-6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deepseek-ai/DeepSeek-V2-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;THUDM/glm-4-9b-chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen2-72B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen2-7B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen2-57B-A14B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stabilityai/stable-diffusion-3-medium&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deepseek-ai/DeepSeek-Coder-V2-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen/Qwen2-1.5B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google/gemma-2-9b-it&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google/gemma-2-27b-it&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internlm/internlm2_5-7b-chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BAAI/bge-large-en-v1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BAAI/bge-large-zh-v1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/Qwen/Qwen2-7B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/Qwen/Qwen2-1.5B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/Qwen/Qwen1.5-7B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/THUDM/glm-4-9b-chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/THUDM/chatglm3-6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/01-ai/Yi-1.5-9B-Chat-16K&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/01-ai/Yi-1.5-6B-Chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/google/gemma-2-9b-it&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/internlm/internlm2_5-7b-chat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/meta-llama/Meta-Llama-3-8B-Instruct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pro/mistralai/Mistral-7B-Instruct-v0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p><strong>计费规则</strong></p><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/75d9225-img_v3_02cm_8dfc2b61-3c7e-44d3-af4a-75e26b22b59g.jpg" alt="img"></p><p>待测文本</p><div class="highlight-container" data-rel="Pgsql"><figure class="iseeu highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Early neural <span class="keyword">language</span> models (NLMs) [<span class="number">13</span>], [<span class="number">14</span>], [<span class="number">15</span>], [<span class="number">16</span>] deal <span class="keyword">with data</span> sparsity <span class="keyword">by</span> <span class="keyword">mapping</span> words <span class="keyword">to</span> low-dimensional continuous vectors (embedding vectors) <span class="keyword">and</span> predict the next word based <span class="keyword">on</span> the aggregation <span class="keyword">of</span> the embedding vectors <span class="keyword">of</span> its proceeding words <span class="keyword">using</span> neural networks. The embedding vectors learned <span class="keyword">by</span> NLMs define a hidden space <span class="keyword">where</span> the semantic similarity <span class="keyword">between</span> vectors can be readily computed <span class="keyword">as</span> their distance. This opens the door <span class="keyword">to</span> computing semantic similarity <span class="keyword">of</span> <span class="keyword">any</span> two inputs regardless their forms (e.g., queries vs. documents <span class="keyword">in</span> Web <span class="keyword">search</span> [<span class="number">17</span>], [<span class="number">18</span>], sentences <span class="keyword">in</span> different languages <span class="keyword">in</span> machine translation [<span class="number">19</span>], [<span class="number">20</span>]) <span class="keyword">or</span> modalities (e.g., image <span class="keyword">and</span> <span class="type">text</span> <span class="keyword">in</span> image captioning [<span class="number">21</span>], [<span class="number">22</span>]). Early NLMs are task-specific models, <span class="keyword">in</span> that they are trained <span class="keyword">on</span> task-specific data <span class="keyword">and</span> their learned hidden space <span class="keyword">is</span> task-specific.  </span><br><span class="line">Pre-trained <span class="keyword">language</span> models (PLMs), unlike early NLMs, are task-agnostic. This generality <span class="keyword">also</span> extends <span class="keyword">to</span> the learned hidden embedding space. The training <span class="keyword">and</span> inference <span class="keyword">of</span> PLMs follows the pre-training <span class="keyword">and</span> fine-tuning paradigm, <span class="keyword">where</span> <span class="keyword">language</span> models <span class="keyword">with</span> recurrent neural networks [<span class="number">23</span>] <span class="keyword">or</span> transformers [<span class="number">24</span>], [<span class="number">25</span>], [<span class="number">26</span>] are pre-trained <span class="keyword">on</span> Web-scale unlabeled <span class="type">text</span> corpora <span class="keyword">for</span> general tasks such <span class="keyword">as</span> word prediction, <span class="keyword">and</span> <span class="keyword">then</span> finetuned <span class="keyword">to</span> specific tasks <span class="keyword">using</span> small amounts <span class="keyword">of</span> (labeled) task-specific data. Recent surveys <span class="keyword">on</span> PLMs <span class="keyword">include</span> [<span class="number">8</span>], [<span class="number">27</span>], [<span class="number">28</span>].</span><br></pre></td></tr></table></figure></div><h2 id="Qwen-Qwen2-57B-A14B-Instruct">Qwen/Qwen2-57B-A14B-Instruct</h2><p>主打一个快，还算可以</p><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/image-20240724162019227.png" alt="image-20240724162019227"></p><h2 id="meta-llama-Meta-Llama-3-70B-Instruct">meta-llama/Meta-Llama-3-70B-Instruct</h2><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/image-20240724162348536.png" alt="image-20240724162348536"></p><p>翻译的更精准一些，比如train没翻译成学习，task-agnostic就直接直译了</p><p>速度稍慢于1，且会有网络问题</p><h2 id="meta-llama-Meta-Llama-3-8B-Instruct">meta-llama/Meta-Llama-3-8B-Instruct</h2><p>有点重量级</p><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/image-20240724162755569.png" alt="image-20240724162755569"></p><p>单词还拼错了，有的不是特定名词也直接不翻了</p><h2 id="Qwen-Qwen2-72B-Instruct">Qwen/Qwen2-72B-Instruct</h2><p>目前最慢的一个</p><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/image-20240724163035608.png" alt="image-20240724163035608"></p><p>“他们不针对具体任务”，虽然是意译，但其实我不太喜欢</p><h2 id="GPT-3-5-turbo-16K（非开源模型）">GPT-3.5-turbo-16K（非开源模型）</h2><p><img lazyload src="/images/loading.svg" data-src="LLM%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/image-20240724163459667.png" alt="image-20240724163459667"></p><p>感觉还得是gpt的</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="LLM" scheme="https://bblog.031105.xyz/tags/LLM/"/>
    
    <category term="翻译" scheme="https://bblog.031105.xyz/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>FaceFusion使用记录</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/facefusion%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/facefusion%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html</id>
    <published>2024-07-05T07:29:59.000Z</published>
    <updated>2024-09-30T12:51:30.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刚刚南软面试结束，稍稍放松下</p></blockquote><h2 id="环境">环境</h2><p>用了驱动云，白嫖了一些计算点</p><p><a class="link" href="https://www.virtaicloud.com/">https://www.virtaicloud.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="换源">换源</h3><p>jupterbook + 网页终端，要记得保存环境</p><p>conda换源，感觉它这个速度一般，似乎不如不换</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add default_channels https://conda.virtaicloud.com/repository/anaconda/main</span><br><span class="line">conda config --add default_channels https://conda.virtaicloud.com/repository/anaconda/r</span><br><span class="line">conda config --add default_channels https://conda.virtaicloud.com/repository/anaconda/msys2</span><br></pre></td></tr></table></figure></div><h3 id="apt换源">apt换源</h3><p><a class="link" href="https://developer.aliyun.com/article/1180548">https://developer.aliyun.com/article/1180548 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></div><h3 id="Platform">Platform</h3><p><a class="link" href="https://docs.facefusion.io/installation">https://docs.facefusion.io/installation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install git-all curl ffmpeg mesa-va-drivers</span><br></pre></td></tr></table></figure></div><p>conda镜像里已经装了</p><h3 id="environment">environment</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name facefusion python=3.10</span><br></pre></td></tr></table></figure></div><h3 id="accelerator">accelerator</h3><p>cuda</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install conda-forge::cuda-runtime=12.4.1 cudnn=8.9.2.26 conda-forge::gputil=1.4.0</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="FaceFusion" scheme="https://bblog.031105.xyz/tags/FaceFusion/"/>
    
  </entry>
  
  <entry>
    <title>24-Spring-软件质量与管理期末复习</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/24-spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/24-spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html</id>
    <published>2024-06-25T16:36:32.000Z</published>
    <updated>2024-09-30T12:51:33.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a class="link" href="https://wbl-z.github.io/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E5%A4%8D%E4%B9%A0/#">2024软件质量管理复习+2024回忆 | wbl-z’s Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> | <a class="link" href="https://eaglebear2002.github.io/2023Fall-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86-%E4%B9%A0%E9%A2%98/">软件质量管理-习题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>PS：本文非背诵速通版本，只是尽力理一下思路</p><p>v2.0 修正了一些错误，添加了一些内容</p></blockquote><h2 id="最后一课">最后一课</h2><p>课程目标：很多<strong>软件工程</strong>基本、简单的概念要能够表述准确，经得起推敲</p><h3 id="过程线">过程线</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424214-47.png" alt="img"></p><p><strong>概念</strong></p><ol><li><strong>什么是管理</strong>：三个要素还记得不</li><li><strong>管理视角</strong>，关注的是学习，如何复现别人的成功：首先用一样的方法去做-&gt;过程</li><li><strong>有了过程为什么还要生命周期</strong>？过程太复杂，要有简单的方法：瀑布、生命周期，让别人快速明白</li><li><strong>迭代和瀑布：</strong><ol><li>迭代式是什么</li><li>关于瀑布的错误观点：有哪些，要有正确的理解</li><li>不理解瀑布模型的话，你觉得你是软件工程职业选手吗？</li></ol></li></ol><p><strong>软件过程管理</strong></p><p>有改进的场景：PDCA和IDEAL元模型</p><p>CMM和CMMI</p><p><strong>软件工程演变的历史视角</strong></p><p>软件危机和软件工程怎么来的，解决什么问题</p><p>三大阶段？如何正确理解敏捷宣言？（业界理解很多都是偏的）</p><p>驱动力：本质难题（人月神话的提到），这些本质难题在不同历史阶段的显现程度决定了演变</p><h3 id="项目管理线"><strong>项目管理线</strong></h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424165-1.png" alt="img"></p><ol><li><strong>自主团队</strong>：内部环境和外部环境（外部是管理层）该怎么样，TSP角色和职责（启动过程，九次会议），SCRUM角色和职责</li><li><strong>所有估算都是抽象的相对的估算</strong></li><li>PROBE方法：相对大小矩阵，很典型的抽象，相对的</li><li>SCRUM故事点：斐波那契数列</li><li>通用计划框架：正推，不是逆推，课上还专门讨论了哪些可以实现自动化哪些需要人为判断</li><li>注意一份完整的项目计划包含了很多种计划，不止质量、风险</li><li>（跟踪中最重要的部分）挣值管理体系<ol><li>需要思考这套体系为什么更加适合SE？1.支持动态变更，SE天然地会经常改变，需求功能改变这样（最关键的一点） 2.挣值图是相对保守的策略，全部完成才能拿到挣值</li></ol></li></ol><h3 id="质量管理线"><strong>质量管理线</strong></h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424165-2.png" alt="img"></p><ol><li>质量管理的挑战：从管理的三要素来看，质量管理非常困难</li><li>质量管理的策略和背后逻辑<ol><li>比如问为什么这么多质量相关的属性，在企业中关注的往往只是其中的测试、缺陷管控？用户优先级排序第一的什么东西？</li></ol></li><li>个人评审：关键控制因素（速度），时机选择（先测试还是评审之类的）</li><li>小组评审 九宫图 Capture?</li><li>质量控制指标 Yield，A/FR, PQI, DRL 有什么用，能干什么，特点和用途</li><li>设计评审：几种评审机制</li></ol><h3 id="工程技术线"><strong>工程技术线</strong></h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424165-3.png" alt="img"></p><p>概念和区别：vertification验证和validation确认，跟客户需求和产品需求联系起来理解就容易区分了</p><h3 id="其他"><strong>其他</strong></h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424165-4.png" alt="img"></p><h2 id="题型">题型</h2><p>名词解释+简答题</p><h2 id="过程线-2">过程线</h2><h3 id="软件工程究竟是什么？">软件工程究竟是什么？</h3><p>主要解决面向“人”的问题</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424165-5.png" alt="img"></p><h3 id="什么是软件开发">什么是软件开发</h3><h4 id="软件开发的本质困难（四大本质难题）">软件开发的本质困难（四大本质难题）</h4><p><strong>不可见性</strong></p><ul><li>软件是一种“看不见、摸不着”的逻辑实体、不具有空间的形体特征</li><li>开发人员可以直接看到程序源代码，但是源代码本身并不是软件本身</li><li>软件是以机器代码的形式运行，但是开发人员无法看到源代码是如何运行的</li></ul><p><strong>复杂性</strong></p><ul><li>对于软件复杂的需求导致了软件的复杂性</li></ul><p><strong>可变性</strong></p><ul><li>软件的变化（随时间推移）对其失效率的影响，软件的可变性体现在软件本身升级，功能的变化等</li></ul><p><strong>一致性</strong></p><ul><li>软件不能独立存在，要依附于一定的环境（如硬件、网络、以及其他软件）</li><li>软件必须遵循从人为的惯例并适应已有的技术和系统</li><li>软件需要随着接口不同而变化，随着时间推移而变化，而这些变化是不同人设计的结果</li></ul><h4 id="四大本质难题之间的关系"><strong>四大本质难题之间的关系</strong></h4><ol><li>除了<strong>不可见性</strong>以外，其他三个本质难题因项目⽽异。</li><li>四⼤本质难题互相促进。</li><li><strong>本质难题变化带动软件⽅法（过程）演变。（驱动力）</strong></li></ol><h4 id="软件开发的几个注意点">软件开发的几个注意点</h4><ol><li>软件开发**四大本质难题永远存在，不可能彻底解决，**在不同时期凸显程度有差异。</li><li>软件开发本质上是智⼒劳动，<strong>开发者心理</strong>⽅⾯的因素不可忽视</li></ol><h3 id="本课程要回答的十大问题">本课程要回答的十大问题</h3><p>复习完可以想想</p><h3 id="√软件危机vs软件工程">√软件危机vs软件工程</h3><ol><li>软件危机<ol><li>软件危机是指<strong>落后的软件生产方式</strong>无法满足迅速增长的<strong>计算机软件需求</strong>，从而导致软件开发与维护过程中出现一系列严重问题的现象。</li></ol></li><li>软件工程<ol><li>软件工程是一门研究用<strong>工程化方法</strong>构建和维护有效的、实用的和高质量的软件的学科。</li><li>软件工程的两大视角<ol><li>管理视角——<strong>能否复制成功？</strong></li><li>技术视角——<strong>是否可以将问题解决得更好？</strong></li></ol></li></ol></li></ol><blockquote><p>软件危机-&gt;软件工程-&gt;两大视角之管理视角</p></blockquote><h3 id="√什么是管理">√什么是管理</h3><blockquote><p>所以什么是管理？</p></blockquote><ol><li><strong>管理的三大关键要素：</strong><ol><li><strong>目标</strong></li><li><strong>状态</strong>：是在接近目标还是在远离目标</li><li><strong>纠偏</strong></li></ol></li></ol><h3 id="√软件项目管理">√软件项目管理</h3><p><strong>软件项目管理（not 软件过程管理）</strong></p><ol><li><strong>典型的三大目标：成本、质量、工期</strong></li><li><strong>软件项目管理</strong>是应用方法、工具、技术以及人员能力来完成软件项目，实现项目目标的过程。<ol><li>A. 软件项⽬管理包括<strong>估算、计划、跟踪、⻛险管理、范围管理、⼈员管理、沟通管理</strong>等等。</li><li>B. 软件项⽬管理的对象是各类软件项⽬</li></ol></li></ol><blockquote><p>质量实践和质量管理是不一样的</p><ol><li>质量实践包括测试等等</li><li>质量管理是对质量的管理，而不是实践，管理必须有上面所说的三个要素</li></ol></blockquote><h3 id="√软件过程管理">√软件过程管理</h3><p>管理视角的主要目标/核心问题：成功是否可以复制？</p><h4 id="软件过程定义"><strong>软件过程定义</strong></h4><ol><li>软件过程是为了实现一个或者多个事先定义的目标而建立起来的一组实践的集合</li><li>这组实践之间往往有一定的先后顺序，作为一个整体来实现事先定义的一个或者多个目标。</li></ol><h4 id="广义软件过程"><strong>广义软件过程</strong></h4><blockquote><p>广义软件过程（Generalized Software Process Model）**通常是一种高度抽象的方法，用于描述软件开发的各个阶段或步骤，旨在兼顾多种具体软件开发过程模型的共通特点。**这种广义的过程不专注于某一个特定的软件过程模型（如瀑布模型、迭代模型、敏捷开发模型等），而是试图概括出在大多数软件开发项目中普遍存在的活动和任务。</p></blockquote><ol><li>理论基石：软件产品和服务的质量，<strong>很大程度上取决于生产和维护该软件或者服务的过程的质量。</strong></li><li>广义软件过程包括<strong>技术、人员以及狭义过程</strong></li><li>广义软件过程的同义词<ol><li><strong>软件开发方法、软件开发过程</strong><ol><li>净室Cleanroom方法、极限编程方法、SCRUM方法、Gate方法；</li><li>而更一般的，敏捷软件过程／方法、轻量型过程／方法以及重型过程／方法等描述也是恰当的</li></ol></li></ol></li></ol><h4 id="生命周期模型"><strong>生命周期模型</strong></h4><ol><li>**主要作用：**便于传达，复制成功</li><li>区别和联系<ol><li><strong>生命周期模型是对一个软件开发过程的人为划分</strong></li><li>生命周期模型是软件开发过程的主框架，是对软件开发过程的一种粗粒度划分</li><li>生命周期模型往往不包括技术实践</li></ol></li><li>典型生命周期模型<ol><li>瀑布模型、迭代式模型、增量模型、螺旋模型、原型法等等</li></ol></li></ol><h5 id="√瀑布模型">√瀑布模型</h5><p>瀑布模型是Family，与迭代并不矛盾，团队决定该使用什么样的瀑布模型。</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-6.png" alt="img"></p><p>瀑布模型是Family，与迭代并不矛盾，团队决定该使用什么样的瀑布模型。</p><p><strong>迭代与瀑布：多个迭代迭代完成，灵活，反馈快；瀑布线性完成，反馈少，不易变更</strong></p><p>关于瀑布的错误观点（知道哪些错误的，不背）：</p><ol><li>瀑布模型是过时的</li></ol><p>​        正确理解： 瀑布模型并非过时，而是适用于某些特定类型的项目。对于需求明确、不太可能发生变化的项目，瀑布模型可以提供清晰的结构和控制。它在一些政府和大型工程项目中仍然广泛使用。</p><ol><li>瀑布模型不允许任何变化</li></ol><p>​        正确理解： <strong>虽然瀑布模型强调顺序进行，但这并不意味着完全不能进行任何变化。实际应用中，许多瀑布项目会在必要时进行一些回溯和调整，只是相对较难和代价较高。因此，在<strong><strong>需求稳定、变化较少</strong></strong>的项目中，瀑布模型更为有效。</strong></p><ol><li>瀑布模型没有反馈环节</li></ol><p>​        正确理解： **瀑布模型中的每个阶段通常都有验证和确认环节，以确保符合需求。**例如，需求分析阶段结束时会有需求评审，设计阶段结束时会有设计评审等。<strong>尽管反馈不像迭代式开发那么频繁，但仍然存在。</strong></p><ol><li>瀑布模型导致更高的项目失败率</li></ol><p>​        正确理解： 瀑布模型的成功与否取决于项目的性质和执行的严格性。在需求明确且不太会变动的项目中，瀑布模型可以非常成功。项目失败通常更多与管理不善、沟通不畅和需求变化相关，而不是开发模型本身。</p><p><strong>如何理解瀑布模型</strong></p><blockquote><ul><li>瀑布模型不是单一模型，是一系列模型，覆盖最简单场景(过程元素少)到最复杂的场景(过程元素多)</li><li>软件项目应该结合实际情况选择合适过程元素的瀑布模型。基本原则是，项目面临困难和挑战越多，选择的模型应该越复杂。</li><li>软件项目团队往往低估项目的挑战，选择了过于简单的不适用的瀑布模型。</li></ul></blockquote><h5 id="√迭代式模型">√迭代式模型</h5><p>迭代式：大型软件系统的开发过程也是一个逐步学习和交流的过程，软件系统的交付不是一次完成，而是通过多个迭代周期，逐步来完成交付。</p><h4 id="软件过程管理"><strong>软件过程管理</strong></h4><p><strong>管理视角的核心问题——能否复制成功？</strong></p><ol><li>管理对象是软件过程</li><li>管理的<strong>目的</strong>是为了让软件过程在开发效率、质量等方面有着更好性能绩效(performance)</li></ol><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-7.png" alt="img"><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-8.png" alt="img"></p><blockquote><p>左侧是软件开发部分，右侧是传统生产部分</p></blockquote><h4 id="软件过程管理与软件过程改进">软件过程管理与软件过程改进</h4><p>两者意思接近</p><ol><li>软件过程管理参考模型 CMM/CMMI, SPICE等</li><li>软件过程改进参考元模型 PDCA，IDEAL</li></ol><blockquote><p>CMM (Capability Maturity Model): 软件能力成熟度模型</p><p>CMMI (Capability Maturity Model Integration): 能力成熟度模型集成</p><p>PDCA (Plan Do Check Action): PDCA循环就是按照这样的顺序进行质量管理，</p><p>并且循环不止地进行下去的科学程序。【右上角】</p><p>IDEAL (Intiating Diagnosing Establishing Acting Learning): 初始化、诊断、建</p><p>立、行动、学习 。【右下角】</p></blockquote><h3 id="√软件发展三大阶段">√软件发展三大阶段</h3><ol><li><strong>软硬件一体化阶段</strong>（50年代~70年代）<ol><li>软件完全依附于硬件</li><li>软件作坊</li></ol></li><li><strong>软件成为独立的产品</strong>（70年代~90年代）</li><li><strong>网络化和服务化</strong>（90年代中期迄今）</li></ol><h3 id="√软硬件一体化阶段（50年代-70年代）">√软硬件一体化阶段（50年代~70年代）</h3><h4 id="一：软件完全依附于硬件">一：软件完全依附于硬件</h4><ol><li>软件应用典型特征<ol><li>软件支持硬件完成计算任务</li><li>功能单一</li><li>复杂度有限</li><li>几乎不需要需求变更</li></ol></li><li>软件开发典型特征<ol><li>硬件太贵</li><li>团队以硬件工程师和数学家为主</li></ol></li></ol><h5 id="典型软件过程和实践">典型软件过程和实践</h5><ol><li><strong>Measure twice, cut once</strong>，相同的软件工程实践：code review &amp; inspection</li><li>各种specification，Operational Specifications (操作规格)，Program Specifications (程序规格)，Coding Specifications (编码规格)<ol><li>specification与参数、代码等部分相关</li></ol></li></ol><h4 id="二：软件作坊">二：软件作坊</h4><ol><li>软件应用典型特征<ol><li>功能简单</li><li>规模小</li></ol></li><li>软件开发典型特征<ol><li><strong>很多非专业领域的人员涌入软件开发领域</strong></li><li>高级程序语言出现</li><li><strong>质疑权威文化盛行</strong></li></ol></li><li><strong>Code And Fix</strong><ol><li>Code And Fix不适合大型软件项目开发</li><li><strong>一开始是“软件依附于硬件”，后来独立出去有“软件作坊”，软件小作坊的特征就是比较简单的Code And Fix</strong></li></ol></li></ol><h3 id="√软件成为独立产品（70年代-90年代）">√软件成为独立产品（70年代~90年代）</h3><p><strong>软件应用典型特征</strong></p><ol><li>摆脱了硬件束缚（OS）</li><li>功能强大</li><li>规模和复杂度剧增</li><li>个人电脑出现 =&gt; 普通人成为软件用户<ol><li>需求多变</li><li>兼容性要求</li></ol></li><li>来自市场的压力</li></ol><h4 id="软件典型过程和实践">软件典型过程和实践</h4><ol><li>方法之一：形式化方法：指建立在严格数学基础上的软件开发方法，做数学化的检验，主要解决质量和正确性问题<ol><li>问题和不足：<strong>形式化方法在扩展性和可用性方面存在不足</strong></li></ol></li><li>方法之二：结构化程序设计和瀑布模型<ol><li>设计+开发； 设计文档化；build it twice， 规划和监控测试，引入客户</li><li>问题和不足：<strong>瀑布模型成为一个重文档，慢节奏的过程</strong></li></ol></li></ol><blockquote><p>lean development说：其实royce提出瀑布生命周期模型的本意是该生命周期模型不适合软件开发。 <strong>（错误的）参考前文对瀑布模型的理解</strong></p></blockquote><h3 id="√网络化和服务化（90年代中期迄今）">√网络化和服务化（90年代中期迄今）</h3><p><strong>软件应用典型特征</strong></p><ol><li>功能更复杂、规模更大</li><li>用户数量急剧增加</li><li>快速演化和需求不确定</li><li>分发方法的变化 （SaaS）</li></ol><p><strong>典型软件过程和实践</strong></p><ol><li><p>迭代式：大型软件系统的开发过程也是一个逐步学习和交流的过程，软件系统的交付不是一次完成，而是通过多个迭代周期，逐步来完成交付。</p></li><li><p>√<strong>雪鸟会议和敏捷宣言（见下）</strong></p><ol><li><p>目的：使软件开发团队具有高效工作和快速响应变化的能力</p></li><li><p>特征：小周期迭代、快速响应变更、价值交付、自动化</p></li><li><p><strong>敏捷软件开发宣言的四个简单价值观</strong></p><ol><li>A. <strong>个体和互动</strong>胜过<strong>流程和工具</strong></li><li>B. <strong>可以工作的软件</strong>胜过<strong>详尽的文档</strong></li><li>C. <strong>客户合作</strong>胜过<strong>合同谈判</strong></li><li>D. <strong>响应变化</strong>胜过<strong>遵循计划</strong></li></ol></li><li><p><strong>也就是说，尽管右项有其价值，我们更重视左项的价值</strong>。</p></li><li><p>That is, while there is value in the items onthe right, we value the items on the left more”</p><p>务必关注这一句话，非常重要：对敏捷宣言正确的理解是，右项是“正和” （根基），左项是“奇胜” 【“凡战者,以正合,以奇胜 ” — 孙子兵法】</p></li></ol></li><li><p>XP（eXtreme Programming）方法</p><ol><li>偏重于一些工程实践的描述</li></ol></li><li><p>SCRUM</p><ol><li>管理框架和管理实践</li></ol></li><li><p>Kanban</p><ol><li>精益生产（丰田制造法）的具体实现</li><li>可视化工作流、限定WIP【Working in Progress 车间生产管理】、管理周期时间</li></ol></li><li><p>开源软件开发方法：是一种基于并行开发模式的软件开发的组织与管理方式</p><ol><li>Linus 定律：如果有足够多的beta测试者和合作开发者，几乎所有问题都会很快显现，然后自然有人会把它解决。</li><li>早发布，常发布，倾听用户的反馈 、把你的用户当成开发合作者对待，如果想让代码质量快速提升并有效排错，这是最省心的途径、设计上的完美不是没有东西可以再加，而是没有东西可以再减</li><li>代码管理：严格的代码提交社区审核制度</li><li>一些演化：1. 内部开源（inner source） 2. 众包（Crowdsourcing）</li></ol></li></ol><h3 id="√当前软件发展现状">√当前软件发展现状</h3><ol><li><strong>软件应用典型特征</strong><ol><li>进一步服务化和网络化（移动是主流）</li><li>用户需求多样性进一步凸显</li><li>软件产品和服务的地位变化</li><li>错综复杂的部署环境</li><li>近乎苛刻的用户期望<ol><li>多：功能丰富，个性化</li><li>快：快速使用，及时更新，快速解决问题</li><li>好：稳定，可靠，安全，可信</li><li>省：用户的获得成本低，最好免费</li></ol></li></ol></li><li><strong>软件开发典型特征</strong><ol><li>空前强大的开发和部署环境——XaaS（IaaS、PaaS、SaaS、FaaS）</li><li>盛行共享和开源</li><li>潜在支撑获得了长足进步（AI，Bigdata， Cloud，etc.）</li></ol></li><li>典型Devops实践和方法<ol><li>方法论基础是敏捷软件开发、精益思想以及看板Kanban方法。</li><li>以领域驱动设计为指导的微服务架构方式</li><li>大量虚拟化技术的使用</li><li>一切皆服务XaaS(X as a Service)的理念指导</li><li>构建了强大的工具链，支持高水平自动化</li></ol></li></ol><h3 id="√软件工程演变的驱动力">√软件工程演变的驱动力</h3><p>软件工程演变的驱动力是四大本质难题：不可见，复杂，可变，一致。【前文】四大难题之间的关系</p><h3 id="√软件过程管理参考模型">√软件过程管理参考模型</h3><h4 id="成熟度模型CMM-CMMI-Capability-Maturity-Model">成熟度模型CMM/CMMI (Capability Maturity Model)</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-9.png" alt="img"></p><p>成熟度模型（最开始是CMM，现在是CMMI）</p><ol><li>CMMI从第2级升级到第3级的原因：固化最佳实践，对小组而言则是能够更快地学习其他的做法</li><li>CMMI第3级中的标准化目的不是简单的替换，重点是已定义</li><li>CMMI第4级我们希望能够看到一个预测模型</li><li>第4级和第5级更多是根据结果（未来）来进行管理</li><li>第2级和第3级关注的是当前的状态</li></ol><p><strong>理解</strong></p><ol><li><strong>初始级 Initial</strong><ol><li><strong>过程不可预测、项目管理很少、开发相对混乱</strong></li><li><strong>个人英雄主义、救火文化</strong></li><li>工作无序，项目进行过程中常放弃当初的计划。管理无章法，缺乏健全的管理制度。开发项目成效不稳定，<strong>项目成功主要依靠项目负责人的经验和能力，他一旦离去，工作秩序面目全非。</strong></li></ol></li><li><strong>已管理级 Managed</strong><ol><li>以<strong>项目</strong>为单位进行管理，相对被动的管理</li><li><strong>有项目计划和跟踪、需求管理、配置管理等</strong></li><li><strong>管理制度化，建立了基本的管理制度和规程，管理工作有章可循。</strong> <strong>初步实现标准化</strong>，开发工作比较好地按标准实施。 变更依法进行，做到基线化，稳定可跟踪，新项目的计划和管理基于过去的实践经验，<strong>具有复现以前成功项目的环境和条件。</strong></li></ol></li><li><strong>已定义级 Defined</strong><ol><li>以<strong>公司</strong>为单位进行管理，相对主动的管理</li><li><strong>公司层面有标准流程和相应规范，每个项目小组可以基于此定义自己的流程</strong></li><li>开发过程，包括技术工作和管理工作，<strong>均已实现标准化、文档化。建立了完善的培训制度和专家评审制度，全部技术活动和管理活动均可控制</strong>，对项目进行中的过程、岗位和职责均有共同的理解 。</li></ol></li><li><strong>定量管理级 Quantitatively</strong><ol><li>过程被度量和管理</li><li>构建预测模型，用统计过程控制的手段来管理过程</li><li>产品和过程已建立了定量的质量目标。开发活动中的生产率和质量是可 量度的。已建立过程数据库。已实现项目产品和过程的控制。可预测过 程和产品质量趋势，如预测偏差，及时纠正。</li></ol></li><li><strong>优化级 Optimizing</strong><ol><li>专注于过程改进</li><li>继续应用统计方法识别过程偏差，找到问题根源并消除，避免未来继续发生类似问题</li><li>可通过采用新技术、新方法，集中精力改进过程。具备防缺陷、识别薄 弱环节以及改进的手段。可取得过程有效性的统计数据，并可据此进行 分析，从而得出最佳方法。</li></ol></li></ol><p><strong>一些讨论</strong></p><ol><li>CMMI是过程改进模型而非软件过程或者软件过程模型，说法怎么样？对的，CMMI指导软件过程改进，不指导开发。</li><li>CMMI不是过程优劣的标准，也不适合用作公司之间的能力比较，说法怎么样？对的，CMMI本身是有评级。（美国国防部订单招标要求企业至少达到CMMI的3级。因为公司的能力需要绝对东西，也就是能力强，能力弱，而CMMI衡量的是相对的水平，CMMI仅仅关注在本公司的目标下的等级</li><li>为什么CMMI VS. Agile是一个伪命题？ ==&gt; Agile是敏捷过程或方法，这是一种软件开发方法；CMMI是过程管理模型。</li><li>Level 3及以下是一般的项目管理；Level4&amp;5是高成熟的项目管理，即定量管理</li></ol><blockquote><p>更多见：<a class="link" href="https://www.jianshu.com/p/b7407257eedb">https://www.jianshu.com/p/b7407257eedb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="√软件过程改进元模型">√软件过程改进元模型</h3><h4 id="PDCA">PDCA</h4><ol><li>PDCA：Plan、Do、Check、Action</li><li>PDCA模型的步骤：<ol><li>分析现状，找出问题</li><li>分析影响质量的原因</li><li>找出措施</li><li>拟定措施计划</li><li>执⾏措施，执⾏计划</li><li>检查效果，发现问题</li><li>总结经验，纳⼊标准</li><li>遗留问题转⼊下期PDCA循环</li></ol></li></ol><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-10.png" alt="img"></p><h4 id="IDEAL">IDEAL</h4><ol><li>IDEAL模型解决了软件在各种质量改进环境下的需要。</li><li>IDEAL包括了软件改进过程的五个阶段<ol><li>Initiating 初始</li><li>Diagnosing 诊断</li><li>Establishing 建立</li><li>Acting 执行</li><li>Leveraging 调整</li></ol></li></ol><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-11.png" alt="img"></p><h2 id="项目管理线-2">项目管理线</h2><h3 id="√三大目标">√三大目标</h3><p><strong>成本、质量、工期</strong></p><blockquote><p>注意区分目标的三要素</p></blockquote><h3 id="√团队动力学">√团队动力学</h3><blockquote><p>软件开发是一项既复杂又富有创造性的知识工作（智力劳动）</p><ul><li>处理和讨论极其抽象的概念</li><li>把不同的部分（不可见）整合成一个可以工作的系统</li></ul></blockquote><h4 id="√知识工作特点">√知识工作特点</h4><p>软件开发是一种<strong>智力劳动</strong>，需要工程师全身心地参与工作，<strong>主观</strong>意愿上努力追求卓越，所以需要管理者<strong>激励</strong>并且维持激励</p><h4 id="√知识工作管理">√知识工作管理</h4><p>知识工作者的管理需要的是<strong>领导者</strong>，而不是<strong>经理</strong></p><p>管理知识工作的关键规则是：管理者无法管理工作者，知识工作者必须实现并且学会自我管理。</p><p>要自我管理，知识工作者必须：</p><ul><li>有积极性</li><li>能做出准确的估算和计划</li><li>懂得协商承诺</li><li>有效跟踪他们的计划</li><li>持续地按计划交付高质量产物</li></ul><h4 id="√领导者和特点">√领导者和特点</h4><p>知识工作者的管理需要的是<strong>领导者</strong>，而不是<strong>经理</strong></p><ul><li>诚实——言行一致</li><li>有能力——技能与知识兼备</li><li>有远见——能否洞察未来，是否拥有一个可信且美好的未来愿景？</li><li>鼓舞人心——他们对未来是否持有积极、热情和充满活力的态度？</li></ul><h4 id="√不同的激励方式">√不同的激励方式</h4><p>有3种主要的激励方式：</p><ol><li>威逼</li><li>利诱</li><li>鼓励承诺：位于马斯洛需求理论的4级以上，应当是主要的方式，并且最好以团队为单位做承诺</li></ol><h5 id="√马斯洛需求层次理论">√马斯洛需求层次理论</h5><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-12.png" alt="img"></p><ol><li>马斯洛需求理论：生理需求、安全感、爱和归属、获得尊敬、自我实现<ol><li>自我实现是最高的层次</li><li>激励来自为没有满足的需求而努力奋斗</li><li>低层次的需求必须在高层次需求满足之前得到满足</li><li>满足高层次的需求的途径比满足低层次的途径更为广泛</li></ol></li></ol><h5 id="√期望理论">√期望理论</h5><p>期望理论：<strong>Motivation = Valence * Expectancy</strong></p><ol><li>M：激发力量，积极性</li><li>V：<strong>目标价值</strong>(效价)，达到目标对于满足个人需要的价值，有正零负三种，效价越高，激励力量越大</li><li>E：<strong>期望值</strong>，人们根据过去经验判断自己达到某种目标的可能性大小</li></ol><h5 id="其他理论">其他理论</h5><ol><li>海兹伯格的激励保健理论 Herzberg’s Motivational and Hygiene Factors<ol><li>内在（成就感，责任感）+外在（环境薪资）</li></ol></li><li>麦克勒格的 X－理论 和 Y －理论 McGregor’s Theory X and Y<ol><li><strong>X理论</strong>：基于这种观点，管理者认为员工本质上是懒惰的，缺乏野心，抗拒变化，并且总是避免责任。因此，这种观点认为，必须通过严格的监控、控制和处罚来管理员工。</li><li><strong>Y理论</strong>：在这种观点中，管理者认为员工是自我激励和自我控制的，愿意接受和寻求责任。他们认为工作是自然的，像休息和玩耍一样。基于Y理论的管理风格强调赋予权力、员工参与和整体目标的追求。</li><li>麦克格雷戈强调，采用Y理论的管理风格可以更有效地激发员工潜能，提高工作效率和满意度。</li></ol></li></ol><h5 id="相应的领导方式">相应的领导方式</h5><ol><li><strong>交易型领导方式</strong><ol><li>承诺奖励激励</li><li>人们通常能找到新的方式来获得奖励，同时少做工作。</li><li>威逼和利诱属于交易型领导方式。</li></ol></li><li><strong>转变型领导方式</strong><ol><li>用成就激励</li><li>鼓励承诺属于转变型领导方式。</li></ol></li><li>由于交易型领导方式很少能产生成功的并且有创造性的团队，因此<strong>转变型领导方式</strong>是首选。</li></ol><h4 id="维持激励水平">维持激励水平</h4><p>维持激励需要<strong>及时的绩效反馈</strong>，这些反馈包括</p><ol><li>根据一个详细计划衡量进度</li><li>当前计划不准确时重做计划</li><li>为漫长而富有挑战性的项目提供中间反馈，即里程碑</li></ol><h3 id="√自主团队">√自主团队</h3><ol><li>定义：<ol><li>一个团队必须包括至少<strong>两个成员</strong>，他们为了<strong>共同的目标和愿景</strong>而努力工作，他们每个人都有<strong>明确的角色和相应的职责定义</strong>，任务的完成需要团队成员<strong>互相依赖和支持</strong>。</li><li>如果团队成员都实现了<strong>自我管理</strong>，也就形成了所谓的自主团队。（可结合知识工作特点等说明）</li></ol></li><li>特点<ol><li>自行定义项目的目标</li><li>自行决定团队组成形式以及成员的角色</li><li>自行决定项目的开发策略</li><li>自行决定项目的开发过程</li><li>自行制定项目的开发计划</li><li>自行度量、管理和控制项目工作</li></ol></li></ol><h3 id="√内外部环境">√内外部环境</h3><p><strong>内部环境：</strong>=特点</p><p><strong>外部环境：（大的2点）</strong></p><ul><li>项目启动阶段获得管理层的支持<ul><li>项目小组应当体现出已经尽最大的可能在满足管理层的需求的工作态度。</li><li>项目小组应当在计划中体现定期需要向管理层报告的内容。</li><li>项目小组应当向管理层证明他们所制定的工作计划是合理的。</li><li>项目小组应当在计划中体现为了追求高质量而开展的工作。</li><li>项目小组应当在工作计划中允许必要的项目变更。</li><li>项目小组应当向管理层寻求必要的帮助。</li></ul></li><li>在项目进展过程中获得管理层的支持<ul><li>项目小组应当严格遵循定义好的开发过程开展项目开发工作。</li><li>项目小组应当维护和更新项目成员的个人计划和团队计划。</li><li>项目小组应当对产品质量进行管理。</li><li>项目小组应当跟踪项目进展，并定期向管理层报告。</li><li>项目小组应当持续地向管理层展现优异的项目表现。</li></ul></li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-13.png" alt="img"></p><blockquote><p>团队成员自身努力，团队规范合理制定，团队管理妥善 -&gt; 自主团队</p></blockquote><h3 id="√TSP角色和职责">√TSP角色和职责</h3><ul><li><strong>项目组长</strong>：激励成员、主持例会、汇报项目、分配任务、维护资料、组织总结</li><li><strong>计划经理</strong>：开发项目计划、平衡计划、跟踪进度、参与总结</li><li><strong>开发经理</strong>：开发策略、估算时间、文档编写、产品实现、集成测试、参与总结</li><li><strong>质量经理</strong>：开发质量计划、报告问题、评审问题、组织协调、参与总结</li><li><strong>过程经理</strong>：记录内容、维护标准、维护记录、参与总结</li><li><strong>支持经理</strong>：工具开发、管理配置、维护词汇、参与总结</li><li><strong>开发人员</strong>：参与开发</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-14.png" alt="img"></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-15.png" alt="img"></p><h4 id="√TSP启动过程">√TSP启动过程</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-16.png" alt="img"></p><ul><li>第一次和第二次会议由项目经理主持</li><li>第三次会议<ul><li>TSP灵活：自定义的流程让人相信项目可以成功</li><li>开发策略：打算进行几个迭代周期。</li></ul></li><li>几个认识<ul><li>错误的认识：软件开发阶段理解为注入缺陷的阶段，软件测试阶段理解为消除缺陷的阶段。</li><li>正确的认识：开发和测试都是既有可能引入缺陷，也有可能消除缺陷的阶段</li></ul></li><li>项目完成的实际时间由什么决定？最晚完成的工作的人决定的</li></ul><h3 id="√SCRUM角色和职责">√SCRUM角色和职责</h3><blockquote><p>ppt上还有点内容，可以多看看</p><p>Scrum 是一个敏捷开发项目管理框架</p></blockquote><ol><li><strong>产品负责人（Product Owner）</strong>：<ol><li>产品负责人是团队与客户及其他利益相关者之间的关键联系人。他们的主要职责是确保开发团队所开发的产品能够带来最大的价值。为此，产品负责人需要管理产品待办列表（Product Backlog），这是一个按优先级排序的功能需求列表，确保团队始终专注于最重要的任务。</li></ol></li><li><strong>Scrum Master</strong>：<ol><li>Scrum Master的角色可以看作是团队的引导者和教练。他们的任务是确保团队正确理解并遵循Scrum的理论、实践和规则。Scrum Master帮助团队解决进度中的障碍，优化流程，确保团队能高效运作。</li></ol></li><li><strong>开发团队</strong>：<ol><li>开发团队负责具体的产品开发工作。在Scrum中，他们需要交付高质量、可发布的产品增量。这意味着在每个Sprint（迭代周期）结束时，团队应产出完全可用的产品功能。团队成员在日常工作中自主管理自己的工作和时间，强调团队合作和自我管理。</li></ol></li></ol><p>这三个角色共同协作，通过每个迭代不断调整和优化工作方式，以确保项目的顺利进行，并最终达到高效交付高质量软件产品的目标。</p><p>典型SCRUM团队由一名<strong>产品负责人、开发团队</strong>和一名 <strong>SCRUM Master</strong> 组成</p><p>SCRUM团队是跨职能的自组织团队</p><p><strong>产品负责人：</strong></p><ul><li>产品负责人的职责是将开发团队开发的产品价值最大化。</li><li>产品负责人是负责管理产品待办列表的唯一负责人。产品待办列表的管理包括：（应该看看就好）<ul><li>清晰地表述产品待办列表项；</li><li>对产品待办列表项进行排序，使其最好地实现目标和使命；</li><li>优化开发团队所执行工作的价值；</li><li>确保产品待办列表对所有人是可见、透明和清晰的，同时显示 Scrum 团队 下一步要做的工作；</li><li>以及确保开发团队对产品待办列表项有足够深的了解。</li></ul></li></ul><p><strong>开发团队：</strong></p><ul><li>负责在每个 Sprint 结束时交付潜在可发布并且“完成”的产品增量。</li><li>开发团队由组织组建并得到授权，团队自己组织和管理他们的工作。开发团队具有下列特点：（应该看看就好）<ul><li>他们是自组织的。没有人（即使是 Scrum Master）有权告诉开发团队应该 如何把产品待办列表变成潜在可发布的功能增量；</li><li>开发团队是跨职能的团队，团队作为一个整体，拥有创建产品增量所需的全 部技能；</li><li>Scrum 不认可开发团队成员的任何头衔，不管其承担何种工作（他们都叫开 发人员）。</li><li>Scrum 不认可开发团队中所谓的“子团队”，无论其需要处理的领域是诸如测 试、架构、运维或业务分析；同时， 开发团队中的每个成员也许有特长和专注的领域，但是责任属于整个开发团队。</li></ul></li></ul><p><strong>Scurm Master:</strong></p><ul><li>促进和支持 SCRUM</li><li>帮助每个人理解 SCRUM 理论、实践、规则和价值</li><li>SCRUM Master 是一位服务型领导。 帮助 SCRUM 团队之外的人了解如何与 SCRUM 团队交互是有益的 改变SCRUM 团队之外的人与 SCRUM 团队的互动方式来最大化 SCRUM 团 队所创造的价值。</li><li>Scrum Master 服务于产品负责人，包括：<ul><li>确保 Scrum 团队中的每个人都尽可能地理解目标、范围和产品域；</li><li>找到有效管理产品待办列表的技巧；</li><li>帮助 Scrum 团队理解为何需要清晰且简明的产品待办列表项；</li><li>理解在经验主义的环境中的产品规划；</li><li>确保产品负责人懂得如何来安排产品待办列表使其达到最大化价值；</li><li>理解并实践敏捷性；以及，</li><li>当被请求或需要时，引导 Scrum 事件。</li></ul></li><li>Scrum Master 以各种方式服务于开发团队，包括<ul><li>作为教练在自组织和跨职能方面给予开发团队以指导；</li><li>帮助开发团队创造高价值的产品；</li><li>移除开发团队工作进展中的障碍；</li><li>按被请求或需要时，引导 Scrum 事件；以及，</li><li>在 Scrum 还未完全采纳和理解的组织环境中，作为教练指导开发团队。</li></ul></li><li>Scrum Master 以各种方式服务于组织，包括：<ul><li>带领并作为教练指导组织采纳 Scrum；</li><li>在组织范围内规划 Scrum 的实施；</li><li>帮助员工和利益攸关者理解并实施 Scrum 和经验导向的产品开发；</li><li>引发能够提升 Scrum 团队生产率的改变；以及，</li><li>与其他 Scrum Master 一起工作，增强组织中 Scrum 应用的有效性。</li></ul></li></ul><h3 id="√估算和计划">√估算和计划</h3><h4 id="关于估算的一些事实"><strong>关于估算的一些事实</strong></h4><p>估算对象是：规模、时间、日程</p><ol><li>估算是客观猜测</li><li>估算能力很难提升</li><li>没有任何人知道准确的数字究竟是什么</li><li>多项实证研究表明，是否使用估算模型（例如，COCOMO）并没有显著差异</li></ol><h4 id="√估算的要点">√估算的要点</h4><ul><li>尽可能划分详细一些</li><li>目标是<strong>建立对结果的信心</strong></li><li>尽量依赖数据</li><li>估算要的是过程，而非结果；估算的过程是相关干系人达成一致共识的过程</li></ul><h4 id="√估算目的是什么">√估算目的是什么</h4><p>目的是给<strong>各类计划提供决策依据、达成共识、建立信心</strong>（足够详细、依赖数据、最好的猜测）</p><h3 id="√PROBE估算方法">√PROBE估算方法</h3><ol><li>以 LOC VS. FP 为例（LOC精确度量，FP早期规划）<ol><li><strong>精确度量</strong>方式往往不便于<strong>早期规划</strong>；</li><li>有助于<strong>早期规划</strong>的度量往往难以产生<strong>精确度量</strong>结果；</li></ol></li><li>PROBE(PROxy Based Estimation)<strong>基本原理/作用</strong></li></ol><ul><li>设立合理的代理作为精确度量和早期规划之间的桥梁</li><li>相对大小，而非绝对大小</li></ul><h4 id="流程"><strong>流程</strong></h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424166-17.png" alt="img"></p><h4 id="相对大小矩阵">相对大小矩阵</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-18.png" alt="img"></p><h4 id="概要设计">概要设计</h4><blockquote><p><strong>“如果你对产品的理解还不足以产出一个概要设计，那么你所知道的还不足以做出一个计划”</strong></p><p>**对于大多数的项目，概要设计都应相对较快地完成：**例如，1000LOC 以内程序，试着将概要设计时间限制在10到20分钟之内</p></blockquote><ol><li><strong>估算的第一步是做出一个概要设计</strong><ol><li>概要设计不是真实设计</li><li>与已有产品/组件 相关联</li><li>定义能够产生期望功能的产品元素</li><li>估算你计划构造之物的规模</li></ol></li><li>为了做出概要设计，需要确定产品功能，以及产生这些功能所需的<strong>程序组件/模块</strong>：“如果我有以下这些部件，我可以构造这个产品。”</li><li>然后，将这些<strong>程序组件/模块</strong>与你以前写的程序相比较，估算它们的规模</li><li>最后，将<strong>程序组件/模块</strong>估算综合给出总规模</li></ol><h3 id="整合估算">整合估算</h3><p>整合多个估算结果</p><ul><li>整合一个开发人员做的多个估算</li><li>多个开发人员可以整合独立进行的估算</li><li><strong>当估算多个部件时，总的误差会比各个部件误差的总和要小。</strong><ul><li><strong>误差趋于抵消了</strong></li><li><strong>假设没有共同的偏差</strong></li></ul></li></ul><blockquote><p>估算要点一</p></blockquote><h3 id="√SCRUM故事点">√SCRUM故事点</h3><ul><li>度量实现一个故事（Story）需要付出的工作量<ul><li>抽象：混合了对于开发特性所要付出的努力、开发复杂度、各种风险以及类似东西</li><li>相对：设定标准之后，考虑其他特性（feature）与标准之间的相对大小关系</li></ul></li><li>度量体现着决策者对试图要实现的目标的关切程度</li></ul><blockquote><p>在敏捷开发实践中，团队通常会进行一次“规划扑克”（Planning Poker）会议，利用斐波那契数列来为每个用户故事分配故事点数值。</p></blockquote><blockquote><p>估算要点二、三</p></blockquote><h3 id="关于度量">关于度量</h3><p><strong>度量体现着决策者对试图要实现的目标的关切程度</strong></p><p>PSP基本度项：规模 时间 缺陷 日程（TSP）</p><blockquote><p>以下开始是团队项目规划/计划的部分</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-19.png" alt="img"></p></blockquote><h3 id="WBS-Work-Breakdown-Structure">WBS(Work Breakdown Structure)</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-20.png" alt="img"></p><p><strong>好的WBS检查标准</strong></p><ol><li>最底层要素不能重复，即任何一个工作包应该在WBS中的一个地方且只应该在WBS中的一个地方出现。</li><li>所有要素必须清晰完整定义，即相应的数据词典必须完整定义。</li><li>最底层要素必须有定义清晰的责任人，可以支持成本估算和进度安排。</li><li>最底层的要素是实现目标的成分必要条件，即项目的工作范围得到完整体现。</li></ol><h3 id="√通用计划框架">√通用计划框架</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-21.png" alt="img"></p><ol><li>上述框架中，那些步骤必须人为的干预<ol><li>定义需求</li><li>概要设计：划分由人为开始，规模划分好之后估算是自动产生的</li><li>日程计划</li></ol></li><li>这会带来什么的好处？比较容易扛住别人的质疑。<ol><li>攻击点：资源和时间是否被高估了</li><li>解决：估算没有代码行PROBE只有功能点是大中小。</li></ol></li></ol><h3 id="过程框架——生命周期模型（不背了）">过程框架——生命周期模型（不背了）</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-22.png" alt="img"></p><h3 id="√各类计划">√各类计划</h3><h4 id="日程计划">日程计划</h4><ol><li>任务计划和日程计划</li><li>典型计划流程回顾<ol><li>估算规模</li><li>估算资源</li><li>规划日程</li></ol></li><li>考虑假期的影响：时间计划和工作计划并存。</li></ol><blockquote><p>前者描述了项目所有的任务清单、任务之间的先后顺序以及每个任务所需时间资源；后者描述了整个各个任务在日程上的安排，即各个任务计划哪天开始和计划哪天结束。</p></blockquote><h4 id="√质量计划">√质量计划</h4><ul><li>项目的质量计划中应当确定需要开展的质量保证活动。</li><li>典型的质量保证活动包括个人评审、团队评审、单元测试、集成测试、系统测试以及验收测试等。</li><li>在质量计划中需要解决的关键的问题是该开展哪些活动，以及这些活动开展的程度，如时间、人数和目标分别是什么。</li></ul><blockquote><p>需要将项目总体质量目标细分成若干小的目标，这样便于在过程中进行管理和控制。结合本书第3章中介绍的质量管理指标，yield， PQI以及A/FR等，图 6‑4给出了质量管理计划的示例。途中右下角是质量总体目标，即整个系统在系统测试之后总的缺陷数应当小于6.63个。那么相应需要开展的质量保证活动以及每个活动的yield可以根据历史数据或者一般的行业数据确定。而每个质量管理活动所需时间则由PQI指标和A/FR指标加以确定。事实上，PQI和A/FR指标也是为了确保yield目标的实现。</p></blockquote><h4 id="√风险计划">√风险计划</h4><ul><li>风险管理的目的是在风险发生前，识别出潜在的问题，以便在产品或项目的生命周期中规划和实施风险管理活动，以消除潜在问题对项目的负面影响。</li></ul><ol><li>风险识别<ol><li><strong>识别</strong>成本、进度、绩效、环境因素、组件</li><li><strong>记录</strong>风险的内容、条件和结果，识别干系人</li><li><strong>评估、分类、分组、排列优先级</strong></li></ol></li><li>风险应对<ol><li><strong>风险转嫁</strong>：通过某种安排，在放弃部分利益的同时，将部分的项目风险转嫁到其他的团队或者组织。</li><li><strong>风险解决</strong>：指采取一些有效措施，使得风险的来源不再存在。</li><li><strong>风险缓解</strong>：容忍风险的存在，采取一些措施监控风险，不让风险对项目最终目标的实现造成负面影响。</li></ol></li></ol><blockquote><p>风险管理是一个持续的、前瞻的过程，此过程是项目管理的重要部分。有效的风险管理是通过相关干系人的合作与参与，尽早且积极地识别风险，制定项目风险管理计划。风险管理须同时考虑有关成本、进度、绩效及其他风险的内部及外部来源。因为在项目初期进行变更或修正的工作负荷，通常比在项目后期来得容易、花费较低及较不具破坏性，所以，早期及积极的风险侦测是重要的。风险管理大致分成两部分，即风险识别和风险应对。</p></blockquote><h3 id="√定量管理计划（自顶向下）不确定">√定量管理计划（自顶向下）不确定</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-23.png" alt="img"><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-24.png" alt="img"></p><h4 id="过程性能">过程性能</h4><p>遵循某个特定（子）过程的之后产生结果的量化描述，既包括（子）过程度量Xi（例如，时间、缺陷消除效率、工时等），也包括产物度量Yi（例如，缺陷密度，相应时间等）。</p><h4 id="过程性能基线">过程性能基线</h4><p>上述过程性能的一个定量化的刻画，一般包括均值和范围。通常用作过程性能的benchmark。</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-25.png" alt="img"></p><h4 id="过程-子过程性能模型">过程/子过程性能模型</h4><p>依据子过程的逻辑关系构建相应的数学模型，描述子过程性能基线和整体过程有意义的性能输出（例如，质量、生产效率、成本等）之间关系。例如 过程Yield 和 Phase Yield。</p><h4 id="过程组合：关键子过程性能目标、整体过程性能目标">过程组合：关键子过程性能目标、整体过程性能目标</h4><blockquote><p>以下是跟踪部分</p><p>团队项目的跟踪与管理主要包括<strong>进度的跟踪（利用不同跟踪方法，例如挣值管理、里程碑评审）</strong>、<strong>纠偏活动管理</strong></p></blockquote><h4 id="定量管理的基本范式">定量管理的基本范式</h4><p>定量管理基本范式：</p><ol><li>构建定量模型：子过程能力基线、<strong>过程模型</strong></li><li>应用模型：监控影响子过程的关键因素</li></ol><h3 id="项目跟踪意义">项目跟踪<strong>意义</strong></h3><ul><li>项目进展过程中开展跟踪活动的目的在于了解项目进度，以便在项目实际进展与计划产生严重偏离时，可采取适当的纠正措施。<ul><li>项目进度滞后与否是否需要参照物，即项目计划。</li><li>项目跟踪需要管理针对偏差而采取的纠偏措施</li></ul></li></ul><blockquote><p>正如Brooks在《人月神话》一书中指出的那样，**项目延迟整整一年是一次延迟一天慢慢积累起来的。**开展及时有效的项目跟踪就是期望及时发现项目实际进展与计划之间的偏差，及时处理这些偏差，从而消除累计的偏差对项目造成的负面影响。</p><p>例如，在软件工程实践中，有一条流传非常广泛的经验总结，即向一个已经落后的项目中增加人手，往往导致项目更加落后。而在实践中，一旦出现项目落后的情况，往往都会采取增加人手的方法来应对。</p></blockquote><h3 id="挣值管理-EV-体系">挣值管理(EV)体系</h3><p>项目的挣值管理方法(Earned Value Management，简称EVM)是用来客观度量项目进度的一种项目管理方法。</p><ul><li>每项任务实现附以一定价值（credit）</li><li>100%完成该项任务，就获得相应价值。</li></ul><p>EVM采用与进度计划、成本预算和实际成本相联系的三个独立的变量，进行项目绩效测量。</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-26.png" alt="img"></p><p>BAC表示按照PV值的曲线，当项目完成的时候所需预算或者时间。</p><p><strong>成本差异CV = EV-AC</strong>，表示的是已经完成的工作与所消耗的成本的差异。可以表示为消耗的时间，也可以表示为消耗的资金。</p><p><strong>成本差异指数CPI = EV/AC</strong>，表示单位成本创造的价值，很显然，CPI&lt;1说明成本超支；CPI=1说明成本与预期一致；CPI&gt;1说明成本低于预期。</p><p><strong>日程偏差SV = EV–PV</strong>，表示进度偏差。显然SV&lt;0表示进度落后；SV=0表示进度正常；SV&gt;0表示进度超前。</p><p><strong>日程偏差指数SPI = EV/PV</strong>。</p><p><strong>预计完成成本EAC = AC+(BAC-EV)/CPI = BAC/CPI</strong>，表示的是按照目前的进展已经成本消耗情况，整个项目完成的时候所需消耗的成本。</p><blockquote><p>EV已经产生的价值，AC已经消耗的本钱，PV此时需要达到的预期价值</p><p>该图此时出现了加班情况，AC在增长，可能是加班费</p></blockquote><h4 id="√简单、中级和高级">√简单、中级和高级</h4><ul><li><strong>简单</strong><ul><li>这种方式仅仅关注进度信息。在实现时，首先需要建立WBS，定义工作范围；其次为WBS中每一项工作定义一个价值（PV）；最后按照一定的规则将某一数值赋给已经完成的工作或者正在进行的工作。</li><li>常用规则分别为0-100规则和50-50规则，前者只有当某项任务完成时，该任务的PV值将转化成EV值；后者只需要开始某项任务，即可以赋原PV值的50%作为EV值，完成时，再加上另外的50%。而实际完成的工作所需成本AC不对EV值产生任何影响。</li></ul></li><li><strong>中级</strong><ul><li>在简单实现的基础上，加入日程偏差的计算。典型计算方式有：</li><li>日程偏差SV = EV – PV;</li><li>日程偏差指数SPI = EV/PV；</li></ul></li><li><strong>高级</strong><ul><li>在中级实现的基础上，还需要考察项目的实际成本。</li></ul></li></ul><h4 id="EVM的局限性">EVM的局限性</h4><ol><li>EVM一般不能应用软件项目的质量管理。</li><li>EVM需要定量化的管理机制，这就使其在一些探索型项目以及部分敏捷开发方法中的应用受到限制。</li><li>EVM完全依赖项目的准确估算（价值体系），然而在项目早期，很难对项目进行非常准确的估算。</li></ol><h4 id="√为何适应软件项目">√为何适应软件项目</h4><ol><li>支持动态变更</li><li>相对保守的策略（全部完成才能拿到）</li></ol><h4 id="变形：燃尽图">变形：燃尽图</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-27.png" alt="img"></p><h3 id="里程碑评审"><strong>里程碑评审</strong></h3><blockquote><p>旨在特定的项目阶段或关键点对项目的进展进行评估和审查</p></blockquote><ol><li><strong>软件项目的里程碑往往是指某个时间点，用以标记某些工作的完成或者阶段的结束。</strong><ol><li>典型的里程碑事件：<ol><li>完成某项工作</li><li>获得干系人签字认可</li><li>完成某产物的评审</li><li>修改或交付某产物</li></ol></li></ol></li><li><strong>里程碑评审的审查内容包括：</strong><ol><li>项目相关的承诺，如日期、规格、质量等等；</li><li>项目各项计划的执行状况；</li><li>项目当前的状态讨论；</li><li>项目面临的风险讨论等</li></ol></li><li><strong>里程碑评审也可用于质量管理</strong></li></ol><h3 id="项目总结">项目总结</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-28.png" alt="img"></p><h4 id="基于PMBOK的总结">基于PMBOK的总结</h4><p>范围管理、时间管理、成本管理、质量管理、人力资源管理、沟通管理、风险管理、采购管理和整合管理9大知识领域</p><h4 id="TSP项目总结">TSP项目总结</h4><ul><li>TSP也提供了一种项目总结的方式，在这种方式当中，团队成员结合自己的角色，总结自己角色相关工作的得失，提出下一个开发周期的改进建议。</li><li><strong>典型角色包括项目组长、计划经理、开发经理、质量经理、过程经理和支持经理等</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-29.png" alt="img"></p><h4 id="√EVM体系为何适应软件项目">√EVM体系为何适应软件项目</h4><ol><li>支持动态变更</li><li>相对保守的策略（全部完成才能拿到）</li></ol><h3 id="√定量管理的跟踪（自底向上）">√定量管理的跟踪（自底向上）</h3><h4 id="√关于子过程性能控制">√关于子过程性能控制</h4><h2 id="质量管理线-2">质量管理线</h2><h3 id="√软件质量的概念">√软件质量的概念</h3><p>软件质量为“与软件产品满足规定的和隐含的需求能力有关的特征或者特性的全体”</p><ol><li>软件质量的内外两部分的特性<ol><li>内部质量特性：不直接面向用户</li><li>外部质量特性：面向软件产品的最终用户</li></ol></li><li>软件质量的不同视角<ol><li>软件质量为软件产品可以改变世界，使世界更加美好的程度(用户满意度是最为重要的判断标准)</li><li>软件质量是对人的价值，强调质量的主观性(对同一款软件而言，不同的用户对其质量有不同的体验)</li></ol></li></ol><h3 id="√质量管理的挑战：三要素">√质量管理的挑战：三要素</h3><p><strong>成本、质量、工期</strong>（也就是软件质量管理的三大目标）</p><blockquote><p>“软件项目的日程、成本以及质量三大目标统一于质量目标。”</p></blockquote><h3 id="√面向用户的质量观">√面向用户的质量观</h3><p>定义<strong>质量</strong>为<strong>满足用户需求的程度</strong>，这个定义中需要进一步明确：</p><ol><li>用户究竟是谁？</li><li>用户需求的优先级是什么？</li><li>用户的优先级对软件产品的开发过程产生什么影响？</li><li>怎么度量这种质量观下的质量水平？</li><li>指导意义：开发在前，运维在后；高质量开发确保DevOps中的价值顺畅流动；个体软件工程师的技能、过程直接影响产品质量；PSP关注提升个体软件工程师工程技能</li></ol><p><strong>典型用户质量期望</strong>：</p><ol><li>这款软件产品必须能够工作；</li><li>这款软件产品最好有较快的执行速度；</li><li>这款软件产品最好在安全性、保密性、可用性、可靠性、兼容性、可维护性、可移植性等方面表现优异；</li></ol><blockquote><p>这样的列表可以一直列举下去，列表中各项内容的顺序也可以变化，这取决于用户期望、开发环境和应用环境等因素。但是，相信几乎在任何一个列表中，**都会把软件产品能够工作作为一个最基本的期望。**事实上，如果软件产品本身不能工作，那么考虑其他的期望是没有意义的。而为了使一个软件产品可以工作，该产品基本没有缺陷是最基本的要求。这样一来，整个软件产品的质量目标就可以归结成首先得确保基本没有缺陷，然后再考察其他的质量目标。<strong>PSP中就采用了这样的方式，用缺陷管理来替代质量管理，这大大简化了质量管理的方法，使得质量管理更加易于操作。</strong></p><p>（PSP：质量管理 简化-&gt; 缺陷管理）</p></blockquote><h3 id="质量管理策略和背后逻辑">质量管理策略和背后逻辑</h3><ul><li>用缺陷管理来替代质量管理</li><li>高质量产品也就意味着要求组成软件产品的各个组件基本无缺陷</li><li>各个组件的高质量是通过高质量评审来实现的</li></ul><h4 id="缺陷消除">缺陷消除</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-30.png" alt="img"></p><h4 id="测试消除缺陷的典型流程">测试消除缺陷的典型流程</h4><ol><li>发现待测程序的一个异常行为；</li><li>理解程序的工作方式；</li><li>调试程序，找出出错的位置，确定出错原因；</li><li>确定修改方案，修改缺陷；</li><li>回归测试，以确认修改有效；</li></ol><blockquote><p>在上述的步骤当中，有一些步骤极耗时间。比如步骤③，在项目的后期，往往会消耗数天甚至数周的时间。此外，在有些软件项目中，开发团队、测试团队和正式发布团队往往分开。那么如果用户在使用软件的过程中发现缺陷，再通过正式沟通渠道将信息反馈到开发团队，然后等待修改和发布，重新安装补丁，这一流程消耗数月时间也是常事。</p></blockquote><h4 id="评审发现缺陷的主要流程">评审发现缺陷的主要流程</h4><ol><li>遵循评审者的逻辑来理解程序流程；</li><li>发现缺陷的同时，也知道了缺陷的位置和原因；</li><li>修正缺陷；</li></ol><blockquote><p>在上述的步骤中，每一步消耗的时间都不会太多。尽管评审的技能因人而异，但是，通过适当培训和积累，有经验的评审者可以发现80%左右的缺陷。</p></blockquote><h3 id="PSP评审过程的质量">PSP评审过程的质量</h3><ul><li>评审检查表</li><li>质量控制指标</li><li>其他因素<ul><li>环境</li><li>评审时机</li><li>个人评审和小组评审</li><li>缺陷预防</li></ul></li></ul><h3 id="√个人评审">√个人评审</h3><h4 id="关键控制因素">关键控制因素</h4><p>速度</p><h4 id="时机选择">时机选择</h4><p>编译/UT前还是后？<strong>（所以先review再编译/UT）</strong></p><ol><li>**态度方面：**如果review在编译/UT之后，会对review态度产生影响，会有一种这个代码已经差不多对了的感受，态度上会有影响。态度很重要：review要么不做，要做就要抱着查出错误的心态，而不是内心已经认可了，导致code review做的很快，比如2000loc/h</li><li>**效率成本方面：**在review的时候先发现一些bug，编译/测试的时间会变少，也就是先编译后评审的时间会 &gt; 先评审后编译</li><li>**高质量软件开发的要求方面：**要降低编译时发生的错误数，是高质量软件开发的要求 =&gt; 先评审后编译</li><li>编译之前评审也是一种自我学习的好机会</li><li>干净的编译，即编译过程没有缺陷对于软件工程师来说，也有极大的成就感</li></ol><h3 id="√小组评审">√小组评审</h3><p><strong>小组评审时机（个人评审之后）</strong></p><ul><li>小组评审通常安排在个人评审之后进行，尤其是在详细设计和代码开发阶段之后。这样的安排有助于提升Process Yield，即过程产出率。</li><li>在个人评审后进行小组评审还有利于提升个人技能，尤其是对那些个人评审未发现但小组评审中发现的缺陷，这些缺陷需要引起足够的注意，并通过对这些缺陷的分析使软件工程师能够学习到很多东西。</li></ul><p><strong>小组评审的组织形式</strong>：</p><ul><li><strong>准备阶段</strong>：<ul><li>由评审的组织者召集参与人员开一个准备会议。</li><li>评审对象的作者需要向参与人员简要介绍评审对象的内容。</li><li>组织者向参与人员介绍评审的目标、标准及其他注意事项。</li><li>在所有人员都了解评审对象和目标之后，由组织者总结会议并确定下一次评审阶段会议的时间。</li></ul></li><li><strong>评审阶段</strong>：<ul><li>组织者确认所有评审参与人员已经完成了各自的评审活动后，再召集所有人开会讨论交流各自评审过程中发现的缺陷，并确定修改责任人和修改期限。</li></ul></li></ul><p><strong>小组评审的附加功能</strong>：</p><ul><li>除了提升产品的质量之外，小组评审还有助于判断评审产物的质量状况。</li><li>引入了“Catch and Re-Catch”方法来评价评审对象的质量状况，这是从统计学中估算池塘中鱼总数的方法演变而来。</li></ul><blockquote><p>参考 <a class="link" href="https://imgss.s3.bitiful.net/2024/06/27/20240627005600.png">https://imgss.s3.bitiful.net/2024/06/27/20240627005600.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h4 id="过程质量控制方式">过程质量控制方式</h4><ol><li><strong>九宫格(by jhdd)</strong><ol><li>在软件质量管理中，使用“Review Rate”和“Defect Density (DD)”构成的九宫格是一种常见的方法，用于评估和可视化软件质量及代码审查的效果。这种矩阵帮助团队识别在哪些区域可以提高代码审查的质量和效率，以便更有效地发现和减少软件缺陷。下面是关于这个九宫格的详细解释：</li><li>九宫格是一个3x3的矩阵，其中：</li><li><strong>纵轴（Review Rate）</strong>：表示代码审查的频率或深度，分为低、中、高。</li><li><strong>横轴（Defect Density）</strong>：表示每单位代码中的缺陷数量，同样分为低、中、高。</li></ol></li><li><strong>Catch and Re-Catch</strong><ol><li>小组评审只有两个人参加。假设评审人员A和B分别发现了a个缺陷和b个缺陷，其中c个缺陷两人同时发现。利用上述思想，选择a-c和b-c中较大值，如果相等则可以任选一值。假设a-c是选定的值，那么就可以把a当成上述第一网被标记的鱼，c是第二网中被标记的鱼。简单计算就可以估算出评审对象经过小组评审之后，还遗留a x b/c -(a+b-c)个缺陷。<ol><li>a / 总数 = c / b -&gt; (a*b) / c</li></ol></li><li>小组评审有多人参加。小组评审如果有多人参与，那么情况就相对复杂。我们采取了一个简化的计算方法。即选择某个独立发现缺陷最多的评审员作为A，而其他所有参与人员的整体作为B。那么我们仍然可以用上述相同的方式来估算小组评审之后评审对象中遗留的缺陷数。</li></ol></li></ol><h3 id="质量控制指标">质量控制指标</h3><blockquote><p>这部分最好看看ppt例子</p></blockquote><h4 id="Yield">Yield</h4><ul><li>Yield指标用以度量每个阶段在消除缺陷方面的效率。越大越好，希望在80以上<ul><li><strong>Phase Yield</strong> = 100 * （某阶段发现的缺陷个数）/（某阶段注入的缺陷个数+进入该阶段前遗留的缺陷个数）</li><li><strong>Process Yield</strong> = 100 * （第一次编译前发现的缺陷个数）/（第一次编译前注入的缺陷个数）</li></ul></li></ul><p><strong>例子</strong></p><table><thead><tr><th>阶段</th><th>Injected</th><th>Removed</th><th>remain</th><th>Yield</th></tr></thead><tbody><tr><td>DFD</td><td>10</td><td>0</td><td>10</td><td>0</td></tr><tr><td>DFD REVIEW</td><td>0</td><td>4</td><td>6</td><td>40</td></tr><tr><td>CODING</td><td>20</td><td>2</td><td>24</td><td>1/13 * 100</td></tr><tr><td>CODE REVIEW</td><td>0</td><td>12</td><td>12</td><td>50</td></tr><tr><td>UNIT</td><td>0</td><td>12</td><td>0</td><td>100</td></tr></tbody></table><table><thead><tr><th>阶段</th><th>Injected</th><th>Removed</th><th>remain</th><th>Yield</th></tr></thead><tbody><tr><td>DFD</td><td>10+4</td><td>0</td><td>14</td><td>0</td></tr><tr><td>DFD REVIEW</td><td>0</td><td>4</td><td>10</td><td>2/7 * 100</td></tr><tr><td>CODING</td><td>20+8</td><td>2</td><td>36</td><td>2/19 * 100</td></tr><tr><td>CODE REVIEW</td><td>0</td><td>12</td><td>12</td><td>1/3 * 100</td></tr><tr><td>UNIT</td><td>0</td><td>12</td><td>12</td><td>50</td></tr></tbody></table><h4 id="A-FR">A/FR</h4><ol><li>COQ(Cost of Quality)<ol><li>失效成本：分析失效现象、查找原因，做必要的修改所消耗的成本</li><li>质检成本：评价软件产品，确定其质量状况所消耗的成本</li><li>预防成本：识别缺陷根本原因、采取措施预防其再次发生所消耗的成本</li></ol></li><li>质检失效比<ol><li>A/FR = PSP质检成本 / PSP失效成本</li><li>质检成本 = 设计评审时间 + 代码评审时间</li><li>失效成本 = 编译时间 + 单元测试时间</li></ol></li><li>理论上，A/FR值越大，意味着质量越高，但A/FR值过大说明评审过多，则开发效率低下，因此PSP中A/FR期望值为2.0</li></ol><blockquote><p>也就是说，为了确保较高的质量水平，软件工程师应当花费两倍于编译加测试的时间进行评审工作。评审的对象为设计和代码。</p></blockquote><h4 id="PQI">PQI</h4><p>5个数据乘积**（五个数值都是0到1，然后相乘出来也是0到1）**</p><ul><li>设计质量：设计的时间应该大于编码的时间, min{设计时间/编码时间, 1}</li><li>设计评审质量：设计评审的时间应该大于设计时间的50%，min{(2 * 设计评审时间 / 设计时间), 1}</li><li>代码评审质量：代码评审时间应该大于编码时间的50%，min{(2 * 代码评审时间)/编码时间 , 1}</li><li>代码质量：代码的编译缺陷密度应当小于10个/千行，min{20/(编译缺陷密度 + 10), 1}</li><li>程序质量：代码单元测试缺陷密度应当小于5个/千行 min{10/(单元测试缺陷密度 + 5), 1}</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-31.png" alt="img"></p><p><strong>PQI的作用</strong></p><ol><li>判断模块质量</li><li>评估项目质量</li><li>直接可以为软件改进做依据（之前两者是没有的）<ol><li>比如最后一个PQI图可以给出的建议<ol><li>增加设计时间</li><li>增加设计评审时间</li><li>增加代码评审时间</li></ol></li></ol></li><li><strong>只追求到0.4，而不是很高的值</strong></li></ol><h4 id="Review-rate">Review rate</h4><ul><li>评审的速度（Review Rate）是一个用以指导软件工程师开展有效评审的指标</li><li>高质量的评审需要软件工程师投入足够的时间进行评审</li><li>在PSP的实践中，代码评审速度小于200 LOC/小时，文档评审速度小于4 Page/小时</li></ul><blockquote><p>如果不计成本的投入大量时间进行评审，尽管可能发现较多的缺陷，但是又会影响到整个软件过程的生产效率。因此，应当为评审设置一个恰当的速度。</p></blockquote><h4 id="DRL">DRL</h4><ul><li>缺陷消除效率比度量的是<strong>不同缺陷消除手段</strong>消除缺陷的效率。</li><li>其计算方式是以<strong>某个测试阶段</strong>（一般为单元测试）<strong>每小时发现的缺陷数</strong>为基础，其他阶段每小时发现缺陷数与该测试阶段每小时发现的缺陷的比值就是DRL。</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-32.png" alt="img"></p><h3 id="评审的其他考虑因素">评审的其他考虑因素</h3><ul><li>打印后评审往往效果更好<ul><li>单个屏幕可以展现的内容比较有限</li><li>评审人员的注意力</li></ul></li><li>评审时机选择<ul><li>编译/UT 之前 VS. 之后</li></ul></li><li>个人评审和小组评审<ul><li>小组评审意义</li><li>先后顺序</li></ul></li></ul><h3 id="特点和用途">特点和用途</h3><p>上面这五个怎么用，能干什么，有什么特点大概讲讲</p><h3 id="Quality-Journey">Quality Journey</h3><h4 id="Journey是什么？顺序？">Journey是什么？顺序？</h4><p>为了追求极高的质量，你有哪些手段？</p><ul><li>Step 1：各种测试</li><li>Step 2：进入测试之前的产物质量提升</li><li>Step 3：评审过程度量和稳定</li><li>Step 4：质量意识和主人翁态度</li><li>Step 5：个体review的度量和稳定</li><li>Step 6：诉诸设计</li><li>Step 7：缺陷预防</li><li>Step 8：用户质量观——其他质量属性</li></ul><h3 id="设计">设计</h3><h4 id="设计与质量的关系？为什么要进行设计？">设计与质量的关系？为什么要进行设计？</h4><ol><li>低劣的设计是导致在软件开发中返工、不易维护以及用户不满的主要原因。</li><li>充分设计可以显著减少最终程序的规模，提升质量。</li><li>设计本身也是一种排错的过程。</li></ol><h4 id="典型设计过程">典型设计过程</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-33.png" alt="img"></p><h4 id="模板：要设计哪些信息？">模板：要设计哪些信息？</h4><ul><li>设计目标程序在<strong>整个应用系统中的位置</strong>；</li><li>设计目标程序的<strong>使用方式</strong>；</li><li>设计目标程序与<strong>其他组件以及模块之间的关系</strong>；</li><li>设计目标程序<strong>外部可见的变量和方法</strong>；</li><li>设计目标程序<strong>内部运作机制</strong>；</li><li>设计目标程序<strong>内部静态逻辑</strong>；</li></ul><table><thead><tr><th></th><th>动态信息</th><th>静态信息</th></tr></thead><tbody><tr><td>外部信息</td><td>交互信息（服务、消息等）</td><td>功能（继承、类结构等）</td></tr><tr><td>内部信息</td><td>行为信息（状态机）</td><td>结构信息（属性、业务逻辑等）</td></tr></tbody></table><h4 id="PSP设计模板">PSP设计模板</h4><p>操作规格模板OST、功能规格模板FST、状态规格模板SST、逻辑规格模板LST（PPT有详细说明）</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424167-34.png" alt="img"><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-35.png" alt="img"></p><h4 id="设计的层次">设计的层次</h4><p>系统-子系统-组件-模块 | 需求定义-规格说明-高层设计</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-36.png" alt="img"></p><p>PSP模板</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-37.png" alt="img"><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-38.png" alt="img"></p><h3 id="设计评审（验证）">设计评审（验证）</h3><p>意义：简单评审不足以发现复杂缺陷</p><p>方法：状态机验证、符号化执行验证、执行表验证、跟踪表验证、正确性验证</p><h4 id="状态机验证">状态机验证</h4><ul><li>正确状态机<ul><li>**完整性：**对于状态机中任何一个状态，对应的所有条件组合，下一个状态的转换都有定义</li><li>**正交性：**对于状态机中任何一个状态，其所有下一个状态的转换条件都不能相同</li></ul></li><li>验证方法<ul><li>检验状态机，消除死循环和陷阱状态。</li><li>检查状态转换，验证完整性和正交性。</li><li>评价状态机，检验是否体现设计意图</li></ul></li></ul><h4 id="符号化执行验证">符号化执行验证</h4><p>符号化验证方法的基本思想是将描述设计的<strong>逻辑规格</strong>（一般用伪代码程序表示）用<strong>代数符号</strong>来表示，然后系统地开展分析和验证。具体步骤如下：</p><ul><li>识别伪码程序中的关键变量；</li><li>将这些变量用代数符号表示，重写伪码程序；</li><li>分析伪码程序的行为。</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-39.png" alt="img"></p><p><strong>优缺点分析：</strong></p><ul><li>符号化验证的方法实施简单，可以给出一般化的验证结果，很多时候往往是唯一提供全面验证的方式。</li><li>这种方法通常用在验证一些复杂算法中，特别是对遗留系统的改造中，往往应用这种方法来识别和理解原有的设计。</li><li>但是这种验证方法不适用于有复杂逻辑的场合，而且，纯手工的验证方法也容易引入一些人为的错误。</li></ul><h4 id="执行表验证">执行表验证</h4><p><strong>执行表</strong>用一种有序的方法来跟踪伪码程序的执行状况，分析程序行为，从而验证设计。具体步骤如下：</p><ul><li>识别伪码程序的关键变量；</li><li>构建表格，表格左侧填入主要程序步骤，右侧填入关键变量；</li><li>初始化被选定的变量；</li><li>跟踪被选择的关键变量的变化情况，从而判断程序行为。</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-40.png" alt="img"></p><h4 id="跟踪表验证">跟踪表验证</h4><p>跟踪表验证方法是对执行表验证方法的一种扩充。具体步骤如下：</p><ul><li>识别伪码程序的关键变量；</li><li>构建表格，表格左侧填入主要程序步骤，右侧填入关键变量；</li><li>初始化被选定的变量；</li><li><strong>识别将伪码程序符号化的机会，并加以符号化；</strong></li><li><strong>定义并且优化用例组合；</strong></li><li>跟踪被选择的关键变量的变化情况，从而判断程序行为。</li></ul><blockquote><p><strong>比较：执行表一般只能用以验证单独的用例，跟踪表应用符号化以及用例识别等方法，对程序的一般化行为进行验证，从而提供更加高效地开展验证工作。</strong></p></blockquote><h4 id="正确性检验">正确性检验</h4><p>正确性检验将伪码程序当成数学定理，采用形式化方法加以推理和验证。这种方法的步骤如下：</p><ul><li>分析和识别用例；</li><li>对于复杂伪码程序的结构，应用正确性检验的标准问题逐项加以验证；（比如，循环不变式）</li><li>对于不能明确判断的复杂程序结构，使用跟踪表等辅助验证。</li></ul><p><strong>示例while 正确性检验</strong></p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) </span><br><span class="line">begin</span><br><span class="line">    states;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div><p>条件1： condition是否最终一定会为“假”，从而使得循环可以结束；</p><p>条件2： condition为“真”的时候，单独的循环结构执行结果与循环体再加一个循环结构，其执行结果是否一致？</p><p>条件3： condition为“假”的时候，循环体内所有变量是否未被修改？</p><h2 id="工程技术线-2">工程技术线</h2><p>需求开发、团队设计、实现策略、集成策略、验证与确认</p><h3 id="需求">需求</h3><ol><li><strong>需求是一切工程活动的基础</strong></li><li>需求类别<ol><li>客户需求</li><li>产品需求</li><li>产品组件需求</li></ol></li></ol><h3 id="√客户需求">√客户需求</h3><p>描述的是<strong>客户的期望</strong>。</p><ol><li>往往表现为，**客户在实际工作中碰到了一些具体问题，希望通过某个东西来帮忙解决这些问题。**客户的这种解决问题的愿望，往往就表述为客户需求。<ol><li>比如，客户希望有一种快速进行数据计算的工具帮助他/她完成繁琐的计算工作。这就是一个客户需求。</li></ol></li><li>**客户需求可能很简单，也可能很复杂；可能很清晰，也可能很模糊。**这就需要开发团队与客户一起进行交流、协商，从而弄清客户的真正意图。</li></ol><h3 id="√产品需求">√产品需求</h3><p>描述的是<strong>开发团队所提供的解决方案</strong>。即针对上述的客户需求，开发团队设计出一个可以帮助客户解决工作当中碰到的问题的方案。</p><blockquote><p>如上例，产品需求就是提供一个可以输入数据，可以计算符号，可以显示计算结果的手持设备。产品需求是对客户需求的一个提炼和精化，把客户需求真正的表述为开发人员能够理解的语言。同样，产品需求需要进行验证，以确保客户的真实意图得到了体现。</p></blockquote><h3 id="产品组件需求">产品组件需求</h3><p>描述的是<strong>组成产品的各个组件的需求规格</strong>。与产品需求相比，这是更低层次上，更为细致的描述了上述解决方案中的某个组件的功能、性能、形式等。</p><blockquote><p>需求开发-需求获取-需求汇总-需求验证-需求文档制作（优秀的需求规格文档特征）</p></blockquote><h3 id="√产品经理？">√产品经理？</h3><h3 id="团队设计">团队设计</h3><h4 id="√自顶向下">√自顶向下</h4><p>在设计的过程当中，采取的基本策略是<strong>自顶向下，逐层精化</strong>的策略。<strong>这有利于建立系统的整体观。<strong>然而，在实现过程当中，应当</strong>更多的考虑到是否便于对实现结果的评审。</strong></p><h4 id="√团队智慧的使用">√团队智慧的使用</h4><p>发挥团队智慧两大挑战</p><ul><li><strong>确定整体架构之前很难进行分工</strong></li><li><strong>鼓励团队成员在讨论和评审会议中的参与程度</strong></li></ul><blockquote><p>每个团队成员都有不同的知识背景和工作经验，因此，如果设计工作中可以充分发挥每个人的特长，往往对项目带来极大的帮助。然而，设计工作面临的一个很大挑战是在确定整体架构之前很难进行分工。而缺乏合理的分工就不能可充分发挥团队智慧。对于该问题的处理办法是视软件系统的规模而定，选择适当人数的团队成员参与整体架构的开发，而其他人员参与架构的评价和关键技术问题的验证。</p></blockquote><blockquote><p>发挥团队智慧的另外一个问题是鼓励团队成员在讨论和评审会议中的参与程度。由于各种原因，如掌握项目信息的差异和个人知识背景的差异，在讨论会议中，有些团队成员倾向于主导会议讨论，而有的团队成员则不愿意发表见解。这就需要会议的协调者，特别是项目组长或者设计工作的负责人采取适当的方法来调动整个团队的参与。</p></blockquote><h4 id="设计标准">设计标准</h4><ul><li><strong>命名规范</strong><ul><li>项目小组应当设计一个统一的命名规范来命名各个模块并建立系统词典，用以描述各个模块。系统词典在整个系统的设计、实现以及支持文档的开发过程中要时刻保持可用状态。此外，还需要通过命名规范来约定系统的架构类型和名称，典型的包括系统、子系统、组件、模块、程序等。在编码过程中程序的命名、文件的命名、变量的命名以及参数的命名等都需要通过命名规范加以定义。</li></ul></li><li><strong>接口标准</strong><ul><li>组件之间的接口标准和格式也需要作为设计标准的内容之一加以定义。事实上，软件工程的一些设计原则，如高内聚、低耦合等也应当作为接口标准定义的内容，从而约束了模块之间信息交互的方式。</li></ul></li><li><strong>系统出错信息</strong><ul><li>系统异常信息和出错信息往往也需要通过一个规范加以标准化。从而使得出错信息有个一致的、便于理解的描述。此外，也便于在设计和开发中的复用。</li></ul></li><li><strong>设计表示标准</strong><ul><li>设计表示标准定义了设计工作的产物应当满足的标准。这有可能是所有设计标准中最为重要的一项内容。在设计表示标准的定义中，必须明确给出完整而准确地表示设计结果的标准。从而帮助项目团队用一致的方式来表现其设计结果。在本书4.3节中介绍的PSP设计模板可以作为设计表示标准的基础，项目小组可以基于4个设计模板，再参考设计的层次，合理定义团队设计表示的标准。</li></ul></li></ul><blockquote><p>复用可以显著提升团队生产效率和质量水平，然而，问题是复用的机会并不是偶然发生的，需要设计人员在项目尽可能的早期加以考虑。“Design For Reuse”被很多软件工程方法识别为最佳实践。这句话就深刻体现了在设计的时候，需要为了创造复用机会而有一些特别的考虑。</p></blockquote><h4 id="Design-For-Reuse复用性支持">Design For Reuse复用性支持</h4><p>在设计阶段必须要充分考虑复用的可能。为了支持复用，软件项目团队需要建立一套复用管理流程，具体而言，包括</p><ul><li><strong>复用接口标准</strong><ul><li>在识别可复用组件的时候，需要以高内聚、低耦合的的设计思想来设计可复用组件。另外，为了便于使用，还得定义复用组件的接口标准，比如参数、变量、返回值以及异常消息的格式与命名等。</li></ul></li><li><strong>复用文档标准</strong><ul><li>通常软件工程师在识别复用组件时，往往直接研究代码，这相当耗时。因此，大部分软件工程师倾向于使用自己开发的复用组件。在团队开发中，为了尽可能提升复用机会，对于可复用组件必须提供详细支持文档，便于团队其他人使用。在文档中需明确组件功能、调用方式、返回值类型以及可能的异常信息。此外，项目团队应当为复用文档定义一个统一的模板和标准。</li></ul></li><li><strong>复用质量保证机制</strong><ul><li>复用组件由于有可能在整个系统的多处被使用，因此，复用组件的质量有尤其重要。否则，复用组件中的一个错误会被传播到软件系统各处。为了获得较高的组件质量，建议采用高质量过程来开发，如PSP2.1过程。另外，还得对待复用组件进行充分的测试。根据过程数据来判断复用组件的质量。</li></ul></li></ul><h4 id="可测试性支持">可测试性支持</h4><p>设计可测试性考虑主要体现在两方面：</p><ul><li>一是要<strong>尽可能减少测试代码的数量</strong>；</li><li>二是要<strong>制定合理的测试计划</strong>。</li></ul><blockquote><p>减少测试代码的数量主要通过合理的架构设计来体现。而合理的测试计划对于可测试性的帮助往往被忽视。事实上，充分开展测试计划的开发工作，往往可以在计划阶段就可以发现相当多的缺陷，甚至比真正的测试工作发现的缺陷还要多。完整的设计工作和操作场景定义，有助于更好的开展测试计划工作。</p></blockquote><h4 id="可用性支持">可用性支持</h4><ul><li>可用性的问题应当在设计阶段就开始考虑，而不能推延到实现阶段。</li><li>针对每一个关键功能都定义操作概念和操作场景。</li><li>分析操作场景以确保软件系统开发完成之后，系统使用者会满意。</li><li>必要时，可以邀请最终用户参与场景的评审，使用模拟、原型等技术，更好的把握用户真实意图。</li></ul><h3 id="实现">实现</h3><h4 id="评审的考虑">评审的考虑</h4><p>在设计的过程当中，采取的基本策略是自顶向下，逐层精化的策略。这有利于建立系统的整体观。然而，在实现过程当中，应当更多的考虑到是否便于对实现结果的评审。**因此，建议采取的策略是自底向上进行实现。**按照这种策略，在实现的过程中优先实现底层的内容，然后这些底层的模块进行评审，以确保其质量。然后基于有着坚实质量基础的模块，再进行高层实现。</p><p><strong>此外，这种策略还有利于复用策略的应用。已经实现了的底层模块有着更多被复用的机会。</strong></p><h4 id="复用的考虑">复用的考虑</h4><p>除了上述的自底向上实现策略来支持复用之外，为了更加有效支持复用，还需要其他的一些实践。例如，编码注释的应用和每天站立式会议的应用。编码注释应当使用统一的格式，在每个源码文件的开头明确提供有利于复用的重要信息，如功能、调用方式、异常信息等。必要时，可以结合一些自动化工具来自动收集这些信息，便于查询。</p><h4 id="可测性考虑">可测性考虑</h4><p>实现阶段对于可测试性的考虑主要体现在实现的计划必须与测试计划一致，从而避免进行集成测试的时候，部分模块没有实现所带来的不便。</p><h3 id="集成">集成</h3><h4 id="覆盖范围">覆盖范围</h4><h4 id="基本策略">基本策略</h4><h5 id="爆炸"><strong>爆炸</strong></h5><p>该策略将所有已经完成的组件<strong>放在一起</strong>，进行<strong>一次集成</strong>。这是一种看起来非常具有吸引力策略。因为这有可能是需要<strong>测试用例最少</strong>的一种方式。然而，这需要所有待集成的产品组件都具有<strong>较高的质量水平</strong>，否则，<strong>难以定位</strong>缺陷位置的缺点会使得该策略<strong>消耗很多测试时间</strong>。而且，系统越复杂、规模越大，问题越突出。</p><h5 id="逐一添加">逐一添加</h5><p>该策略与上述的大爆炸集成策略<strong>完全相反</strong>，采取一次添加一个组件的方式进行集成。因此其优点就在于很容易定位缺陷的位置，特别在产品组件质量不高的情况下，每次集成之前都有着<strong>坚实的质量基础</strong>。但是，该方法的缺点也很突出。这可能是需要<strong>测试用例最多</strong>的一种策略，而且，大量的回归测试也会消耗很多时间。</p><h5 id="集簇式">集簇式</h5><p>集簇集成策略是对<strong>逐一添加集成策略</strong>的改进。简单的随机选择产品组件进行集成并不合理。为了提升测试效率，往往会把<strong>有相似功能或者有关联的模块优先进行集成</strong>，形成可以工作的组件。然后以组件为单位继续较高层次的集成。此外，这种策略还有一个好处就是，可以尽早获得一些可以工作的组件，有利于其他组件测试工作的开展。但是，这种策略的缺点是<strong>过于关注个别组件</strong>，而<strong>缺乏系统的整体观</strong>，不能尽早发现系统层面的缺陷。</p><h5 id="扁平化">扁平化</h5><p>该策略要求尽快构建一个可以工作的扁平化系统。也就是说，<strong>优先集成高层</strong>的部件，然后<strong>逐步将各个组件、模块的真正实现</strong>加入系统。这种方式可以尽早发现系统层面的缺陷。然而，该策略的缺陷是为了确保完成的系统，需要大量的打“桩”（stub），即提供一些直接提供返回值的伪实现。这种方式往往不能覆盖整个系统应该处理的多种状态。</p><blockquote><p>CI/CD是哪一种？逐一添加</p></blockquote><h3 id="V-V验证与确认">V&amp;V验证与确认</h3><h4 id="概念和区别">概念和区别</h4><h5 id="Verification-验证">Verification 验证</h5><p>验证(Verification)活动也是检验获得的产品和产品组件能不能满足各自事先定义好的需求规格；</p><h5 id="Validation-确认">Validation 确认</h5><p>确认(Validation)活动是为了确保产品可以满足客户的需求以及实际操作场景的要求。</p><h5 id="区别"><strong>区别</strong></h5><ul><li>验证是目的是确保选定的工作产品与事先指定给该工作产品的需求一致。</li><li>确认的目标则是确保开发完成的产品或者产品组件在即将要使用该产品或者产品组件的环境中工作正确。</li></ul><p>因此，<strong>验证</strong>关注的是是否正确的把软件产品开发出来，即与需求规格一致；<strong>确认</strong>关注的是是否开发了正确的软件产品，即是否能帮用户解决实际问题。</p><h5 id="关联"><strong>关联</strong></h5><p><strong>验证(Verification)和确认(Validation)都是为了提升最终产品的质量而采取的措施。</strong></p><p>**另一方面，验证和确认又是相互依存、关系紧密的两个活动。**验证活动的依据来源于确认的目标，即产品组件需求必须与客户需求一致；验证活动为确认活动提供了前提条件，在完全产品需要和产品组件需求之前，考察客户需求是否满足是没有意义的。</p><h4 id="验证与确认活动">验证与确认活动</h4><h5 id="环境准备"><strong>环境准备</strong></h5><p>不管是验证工作还是确认工作，环境非常重要，对于验证工作来说，如果是同行评审，就需要准备文件材料、人员以及会议场所等；如果是测试，则可能需要模拟器、场景生成程序、环境控制以及其他系统接口等。对于确认工作而言，环境的准备更加重要，因为确认要考察的是在真实环境中产品是否工作正常，因此，要求尽可能模拟真实环境和场景。如果是模拟环境，则需要开展分析工作，以弄清模拟环境与真实环境的差别以及对测试结果的影响。</p><h5 id="对象选择"><strong>对象选择</strong></h5><p>不是所有的工作产品都需要进行验证和确认。这一点在项目计划阶段都应当建立起相应的验证计划和确认计划。这里需要明确两个不同的概念，即产品和工作产品。产品是面向客户的，需要向客户提交的工作结果；而工作产品则往往是过程的直接结果。并不是所有的工作产品都需要向客户提交，因此，产品一定是工作产品，而反之则不成立。验证活动的对象往往从工作产品中选择而确认活动的对象则从产品中选择。</p><h5 id="活动实施"><strong>活动实施</strong></h5><p>验证和确认的活动主要就是评审和测试。一般情况下，可以将整个项目生命周期中早期对产品需求评审工作和最后的验收测试作为确认工作，而其他的评审和测试工作当成是验证工作。当然，严格的划分验证活动还是确认活动还是应该从活动本身的目标出发，加以区分。</p><h5 id="结果分析"><strong>结果分析</strong></h5><p>对于验证和确认工作的结果需要进行适当分析，以找出潜在问题和改进机会。如对于设计规格说明书的评审工作之外，应当分析一下设计过程的有效性，预测（Catch and Re-Catch）设计规格说明书中还隐藏的缺陷。对于验收测试结果的分析，往往可以重点考察那些一直遗留到验收阶段才被发现的缺陷，看看这些缺陷在什么阶段被引入，为什么前面未能发现等。</p><h2 id="其他-2">其他</h2><h3 id="配置管理">配置管理</h3><p>**目的：**建立与维护工作产品的完整性</p><h4 id="配置项">配置项</h4><ul><li><strong>配置项</strong>：在配置管理当中作为单独实体进行管理和控制的工作集合。</li></ul><h4 id="基线">基线</h4><ul><li><strong>基线</strong>：一个或多个配置项及相关的标识符的代表，是一组经正式审查同意的规格或工作产品集合，是未来开发工作或交付的基础，而且只能经由严格的变更控制程序才能改变。<ul><li>发布时间点：需求分析后、设计完成后、单元测试后、最终产品发布后</li><li>配置项持续演进的稳定基础</li></ul></li></ul><p><strong>配置管理的活动</strong></p><ul><li>识别和记录配置项的物理特性和功能特性；</li><li>控制上述特性的变更；</li><li>记录和报告变更过程和相应的配置项状态；</li><li>验证配置项是否与需求一致。</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-41.png" alt="img"></p><h4 id="配置管理的对象"><strong>配置管理的对象</strong></h4><p>典型的可能作为配置项纳入配置管理的工作产品包括：</p><ul><li>过程说明文档</li><li>项目开发计划文档</li><li>需求规格说明书</li><li>设计规格说明书</li><li>设计图表</li><li>产品规格说明书</li><li>程序代码</li><li>开发环境，如特定版本的编译器等</li><li>产品数据文件</li><li>产品技术文件</li><li>用户支持文档</li></ul><h3 id="度量和分析">度量和分析</h3><p><strong>目的</strong>：支持管理的信息需要</p><p><strong>意义</strong>：基于客观的数据对决策很重要，可以显著消除错误决策的风险。而客观数据的获取需要按照一定的流程用正确的方式获得和使用。度量和分析活动就定义了上述客观数据的获取与使用方式。</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-42.png" alt="img"></p><p><strong>度量和分析活动可以支持如下的项目管理活动</strong>：</p><ul><li>客观的估计与计划</li><li>根据建立的计划和目标，跟踪实际进展</li><li>识别与解决/过程改进/相关议题</li><li>提供将度量结果纳入未来其他过程的基础</li></ul><h4 id="GQM度量体系">GQM度量体系</h4><p>GQM(Goal Question Metric)是一种应用非常广泛的建立软件度量体系的方法，从管理的目标出发，将目标归纳、分解为度量的指标，并把这些指标提炼成可以测量的值，是一种科学的、系统的思考问题的方式。</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-43.png" alt="img"></p><ol><li>概念层(目标)：目标是为某个特定的对象而定义的。这里的对象是指软件产品、软件过程以及相关的资源等。定义的目标基于不同原因和不同质量模型,也要参考不同的角色视图与特定的环境。</li><li>操作层(问题)：基于一定的刻画上述目标是否达成或者目标达成的进展情况的模型，使用一系列的问题来定义所研究的对象, 然后得出评价或评估特定目标达成进展情况。所选择的问题应当尽量体现质量相关的话题。</li><li>量化层(度量)：试图以量化的方式回答上述操作层识别出来的问题。</li></ol><p><strong>GQM示例-PM（项目管理）</strong></p><p>G: 确保稳定性、可预测性的开发过程来满足计划的里程碑。</p><p>Q: 我的项目是否按照计划的轨迹前进，计划的里程碑都能实现吗？</p><p>M: 软件项目开发工作的挥发性（分支、流、变更管理活动）。</p><p><strong>GQM示例-DM（开发管理）</strong></p><p>G: 最大化所有团队贡献者的生产力。</p><p>Q: 开发人员能够完成分配给他们的任务吗，或者他们遇到障碍了吗？</p><p>M: 由个体或者工作组产生的项目工件的量级</p><h3 id="决策分析与解决方案">决策分析与解决方案</h3><p>**决策分析的意义：**错误的决策往往会给项目带来灾难性后果。为了降低这种错误决策的风险，往往需要尽可能基于客观事实和正确的流程来开展决策与分析活动</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-44.png" alt="img"></p><p><strong>一个正式评估过程往往包含下列的活动：</strong></p><ul><li>建立评估备选方案的准则</li><li>识别备选解决方案</li><li>选择评估备选方案的方法</li><li>使用已建立的准则与方法，评估备选解决方案</li><li>依据评估准则，从备选方案中选择建议方案</li></ul><h4 id="“招投标“">“招投标“</h4><h3 id="根因分析与解决方案">根因分析与解决方案</h3><p>根因<strong>分析的意义：</strong></p><ol><li>错误的决策往往会给项目带来灾难性后果。为了降低这种错误决策的风险，往往需要尽可能基于客观事实和正确的流程来开展决策与分析活动（同上？）</li><li>避免类似错误反复发生</li></ol><p><strong>一个正式根因分析过程往往包含下列的活动：</strong></p><ul><li>识别和选定问题</li><li>根因分析</li><li>建立改进的行动方案</li><li>实施改进，评估效果</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-45.png" alt="img"></p><h4 id="2-8法则">2-8法则</h4><p>约仅有20%的因素影响80%的结果。也就是说：所有变因中，最重要的仅有20%，虽然剩余的80%占了多数，影响的幅度却远低于“关键的少数”。</p><h4 id="根因分析典型示例-鱼骨图">根因分析典型示例: 鱼骨图</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/1719552424168-46.png" alt="img"></p><ol><li>典型角度：<strong>技术角度 、人员角度、 培训角度、过程角度</strong></li></ol><blockquote><p>配置管理：配置项和基线</p><p>度量和分析：GQM度量体系</p><p>决策分析和解决方案：招投标</p><p>根因分析和解决方案：2-8选择对象，鱼骨头根因分析</p></blockquote><h2 id="思考">思考</h2><ol><li>课堂思考练习</li><li>本课程要回答的十大问题</li><li><strong>软件项目管理和软件过程管理的区别？</strong></li><li>TSP和SCRUM的团队的组成有哪些共性？这些共性对于高效团队有什么帮助？</li></ol>]]></content>
    
    
    <summary type="html">不理解瀑布模型的话，你觉得你是软件工程职业选手吗？</summary>
    
    
    
    <category term="期末复习" scheme="https://bblog.031105.xyz/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="软件质量与管理" scheme="https://bblog.031105.xyz/tags/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    
    <category term="期末大通关" scheme="https://bblog.031105.xyz/tags/%E6%9C%9F%E6%9C%AB%E5%A4%A7%E9%80%9A%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>摸鱼分享（一）：头号做题家分享 | 博客配置RSS</title>
    <link href="https://bblog.031105.xyz/posts/%E5%88%86%E4%BA%AB%E5%8F%91%E7%8E%B0/%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%B4%E5%8F%B7%E5%81%9A%E9%A2%98%E5%AE%B6%E5%88%86%E4%BA%AB-%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AErss.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%88%86%E4%BA%AB%E5%8F%91%E7%8E%B0/%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%B4%E5%8F%B7%E5%81%9A%E9%A2%98%E5%AE%B6%E5%88%86%E4%BA%AB-%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AErss.html</id>
    <published>2024-06-25T05:28:00.000Z</published>
    <updated>2024-09-30T12:51:51.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Context：</p><p>2024.6.24从3点睡到6点，奋战软统</p><p>故今天11点半才起床</p></blockquote><h2 id="头号做题家分享">头号做题家分享</h2><p><a class="link" href="https://wxaurl.cn/VMgDNryOYLu">https://wxaurl.cn/VMgDNryOYLu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>起床看了个好玩的 <a href="#%E5%B0%8F%E7%A8%8B%E5%BA%8F://%E5%A4%B4%E5%8F%B7%E5%81%9A%E9%A2%98%E5%AE%B6/0Y5BlL0lCAtzeSj">头号做题家</a></p><p>复习软质累了可以玩玩</p><p>前作似乎是《完蛋！我被大模型包围了》</p><h2 id="体验">体验</h2><img lazyload src="/images/loading.svg" data-src="%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB20240605/3f986f0354e55d6f98438f611165190.jpg" alt="3f986f0354e55d6f98438f611165190" style="zoom:50%;"> <p>浅玩了玩第一道，8token有点牛的</p><img lazyload src="/images/loading.svg" data-src="%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB20240605/19cffa8868345b7de17620d791b089c.jpg" alt="19cffa8868345b7de17620d791b089c" style="zoom:50%;"> <h2 id="感受">感受</h2><p>挺有意思的，适合摸鱼，当然这字体看得我眼睛更累了（</p><p>这也算是一种LLM往游戏方面的探索？感觉如果未来加入多模态的话可玩性会更高（也许后面的关卡已经有了）</p><p>个人认为还是创新点有意思，正所谓“凡战者 以正合 以奇胜”（软质课rgp老师原话，首尾呼应，欧耶！）</p><p><img lazyload src="/images/loading.svg" data-src="%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB20240605/640.png" alt="Image"></p><blockquote><p>今年3月才正式浮出水面的国产基座大模型创业公司，创始人<strong>姜大昕</strong>，微软前全球副总裁、微软亚洲互联网工程研究院（STCA）前首席科学家。</p><p>甫一亮相，阶跃星辰就祭出了Step系列大模型“组合拳”：Step-1千亿参数语言大模型、Step-1V千亿参数多模态大模型、Step-2万亿参数MoE语言大模型。</p><p>不认识的国产大模型公司再++</p></blockquote><h2 id="RSS">RSS</h2><p>博客新增了RSS，感兴趣的可以加下喵~</p><p><img lazyload src="/images/loading.svg" data-src="%E6%91%B8%E9%B1%BC%E5%88%86%E4%BA%AB20240605/image-20240625142059226.png" alt="image-20240625142059226"></p><blockquote><p>ICON在右下角，藏得有点深</p></blockquote><p>RSS链接：<a class="link" href="https://syding.njuse.icu/atom.xml">https://syding.njuse.icu/atom.xml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="分享发现" scheme="https://bblog.031105.xyz/categories/%E5%88%86%E4%BA%AB%E5%8F%91%E7%8E%B0/"/>
    
    
    <category term="摸鱼" scheme="https://bblog.031105.xyz/tags/%E6%91%B8%E9%B1%BC/"/>
    
    <category term="大模型" scheme="https://bblog.031105.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>24-Spring-软件系统设计期末复习</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/24-spring-%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/24-spring-%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html</id>
    <published>2024-06-19T10:07:06.000Z</published>
    <updated>2024-09-30T12:51:32.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考 <a class="link" href="https://wbl-z.github.io/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E5%BE%80%E5%B9%B4%E9%A2%98/">zzb学长 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> | <a class="link" href="https://spricoder.github.io/2021/07/15/2021-Software-System-Design/2021-Software-System-Design-Exam0-%E5%BE%80%E5%B9%B4%E8%80%83%E8%AF%95/">zhy学长 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> | <a class="link" href="https://eaglebear2002.github.io/2023Spring-%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E5%A4%8D%E4%B9%A0/">xqh学长 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://spricoder.github.io/2021/07/15/2021-Software-System-Design/2021-Software-System-Design-Lec21-Review%20Part2/#14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6">lec21-软件系统设计复习 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>致敬  <a class="link" href="https://github.com/SEBugMaker">SEBugMaker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link" href="https://quas-modo.github.io/">quas-modo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>zh老师部分不太好整理，花体看的眼花，说的道理</p><p><a class="link" href="https://refactoringguru.cn/design-patterns">设计模式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> |<a class="link" href="https://design-patterns.readthedocs.io/zh-cn/latest/index.html">图说设计模式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="题型">题型</h2><div class="markdown-alert markdown-alert-important"><p class="markdown-alert-title"><svg class="octicon octicon-report mr-2" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/></svg>Important</p><p></p><p>学长建议<mark>架构设计</mark>看往年卷，<mark>设计模式</mark>看ppt</p></div><p>简答+设计</p><h2 id="软件模式">软件模式</h2><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621103632968.png" alt="image-20240621103632968"></p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621103643421.png" alt="image-20240621103643421"></p><h3 id="大三律Rule-Of-Three">大三律Rule Of Three</h3><p>在模式发现过程中需要遵循<strong>大三律(Rule of Three)</strong>，即只有经过<strong>三个以上不同类型（或不同领域）的系统的校验</strong>，一个<strong>解决方案</strong>才能从候选模式升格为模式。</p><h2 id="OOA-OOD-OOP">OOA/OOD/OOP</h2><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240620232511155.png" alt="image-20240620232511155"></p><p>OOA、OOD和OOP是面向对象开发的三个关键步骤。</p><ol><li><strong>面向对象分析（OOA）</strong>：这是软件开发过程中的第一步，主要目标是理解问题域，并确定软件需要完成的功能。在OOA过程中，分析师会识别出问题域中的关键对象（或称为实体）、对象的属性以及对象之间的关系和交互。结果通常以<u><strong>用例模型，领域模型等</strong></u>表示</li><li><strong>面向对象设计（OOD）</strong>：在完成OOA之后，接下来就是OOD，也就是确定如何实现这些功能。设计师会考虑如何将分析阶段识别出的对象映射到具体的软件组件，并设计这些组件的内部结构，以及组件之间的交互。设计师还需要考虑非功能性需求，如性能、可用性、安全性等。结果通常以<u><strong>类图、状态图、交互图等</strong></u>形式表示。</li><li><strong>面向对象编程（OOP）</strong>：在OOD阶段完成后，接下来就是实现设计的<u><strong>具体代码</strong></u>，这就是OOP阶段。程序员会使用面向对象的编程语言（如Java、C++、Python等）来编写代码，实现设计中定义的类和接口。</li></ol><p>总的来说，OOA、OOD和OOP是面向对象开发的三个关键步骤，它们分别对应于软件开发过程中的<strong>需求分析</strong>、<strong>系统设计</strong>和<strong>编程实现</strong>。这三个步骤是紧密相连的，前一个步骤的输出将作为后一个步骤的输入，从而保证整个开发过程的连贯性和一致性。</p><h2 id="设计模式与类-库框架">设计模式与类/库框架</h2><p><strong>为什么不能建立一个包含所有设计模式的库，让人们不需要自己去创建？</strong></p><ul><li><u><strong>设计模式是比库更高级的概念。</strong></u>设计模式提供了如何结构化类和对象以解决特定问题的指导，但具体实现需要根据具体应用进行调整。<u><strong>设计模式的本质是它们的通用性和灵活性，而不是作为直接可用的代码提供。</strong></u></li></ul><p><strong>库和框架是否也是设计模式？</strong></p><ul><li><u><strong>库和框架本身不是设计模式。</strong></u>它们提供特定的代码实现，可以被直接集成到我们的代码中。<u><strong>然而，库和框架有时会在其实现中使用设计模式，这是有益的</strong></u>，因为一旦你理解了设计模式，就能更快地理解基于设计模式构建的API。</li></ul><h2 id="面向对象设计原则">面向对象设计原则</h2><blockquote><p>设计模式是<mark>设计原则</mark>的体现</p><ol><li>这些原则并不是孤立存在的，它们相互依赖，相互补充。</li><li>原则之间也会有相互的作用</li></ol></blockquote><div class="markdown-alert markdown-alert-important"><p class="markdown-alert-title"><svg class="octicon octicon-report mr-2" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/></svg>Important</p><p></p><p><strong>设计原则</strong></p><ol><li>目标：<u>开闭原则</u></li><li>指导：<u>最小知识原则</u></li><li>基础：<u>单一职责原则</u>、可变性封装原则（对OCP的具体描述）</li><li>实现：<u>依赖倒转原则</u>、<u>合成复用原则</u>、<u>里氏代换原则</u>、<u>接口隔离原则</u></li></ol></div><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621132132392.png" alt="image-20240621132132392"></p><p>面向对象设计原则注重<u><strong>软件的可维护性，可复用性和可扩展性</strong></u></p><h3 id="Single-Responsibility-Principle-SRP">Single Responsibility Principle, SRP</h3><h4 id="定义">定义</h4><p>⼀个对象应该只包含<strong>单⼀的职责</strong>，并且该<strong>职责被完整地封装在⼀个类中</strong></p><p>Every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class.</p><p>从可维护性的角度考虑：对一个类而言，仅有<strong>一个引起它变化的原因</strong></p><p>There should <strong>never be more than one reason for a class to change</strong>.</p><h4 id="分析">分析</h4><p><strong>一个类所承担的职责越多，它被复用的可能性越小</strong></p><p>类的职责主要包括两个方面：</p><ol><li><strong>数据职责</strong>：数据职责通过其属性来体现。</li><li><strong>行为/功能职责</strong>：而行为职责通过其方法来体现。</li></ol><p>单一职责原则是实现<strong>高内聚、低耦合</strong>的指导方针</p><h4 id="实例">实例</h4><p>C/S系统中的 Login类 包含了 数据库连接，显示窗口，查询用户等，违反了SRP，重构（使用分层结构）如下：</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621205344048.png" alt="image-20240621205344048"></p><h3 id="Open-Closed-Principle-OCP">Open-Closed Principle, OCP</h3><h4 id="定义-2">定义</h4><p>一个软件实体应当<strong>对扩展开放，对修改关闭</strong>。</p><p>Software entities should be <strong>open for extension</strong>, but <strong>closed for modification</strong>.</p><h4 id="分析-2">分析</h4><ol><li><u><strong>软件实体</strong></u>可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。</li><li><strong>抽象化</strong>是开闭原则的关键。</li><li>开闭原则还可以通过一个更加具体的&quot;<strong>对可变性封装原则</strong>&quot;来描述，对可变性封装原则(<strong>Principle of Encapsulation of Variation, EVP</strong>)要求找到系统的可变因素并将其封装起来。</li></ol><h4 id="与其他人职责的关系">与其他人职责的关系</h4><ol><li>我们需要知道系统的哪些部分是变化的，<strong>开闭原则也是对单一职责原则的增强。</strong></li><li>而<strong>里氏代换原则</strong>和<strong>依赖倒置原则</strong>都是开闭原则的具体实现。</li></ol><h4 id="实例-2">实例</h4><p>某图形界面系统提供了各种不同形状的按钮，客户端代码可针对这些按钮进行编程，用户可能会改变需求要求使用不同的按钮，原始设计方案上利用<u><strong>抽象化+反射机制</strong></u>改进</p><p><strong>抽象化：设计了AbstractButton</strong></p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621221506730.png" alt="image-20240621221506730"></p><blockquote><p><a href="https://bblog.031105.xyz/posts/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html">Java反射机制参考</a></p><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用方法的功能成为反射机制。</p></blockquote><h3 id="Liskov-Substitution-Principle-LSP">Liskov Substitution Principle, LSP</h3><blockquote><p>UML关系，泛化关系=继承关系</p><p>关联和依赖：</p><p>前者通常具有长期性，持有引用，如 <code>Library</code> 和 <code>Book</code> 的关系，一个 <code>Library</code> 持有多个 <code>Book</code>（聚合也是关联的一种）</p><p>后者感觉是运行时会用到，短期性，如 <code>OrderProcessor</code> 和 <code>Order</code> 以及 <code>PaymentProcessor</code> 的关系</p></blockquote><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/20200224123104360.png" alt="在这里插入图片描述" style="zoom:50%;"> <h4 id="定义-3">定义</h4><p>定义：所有引用基类（父类）的地方必须能透明地使用其子类的对象</p><p>通俗定义：<strong>在软件中如果能够使用基类对象，那么一定能够使用其子类对象。</strong></p><h4 id="分析-3">分析</h4><p>里氏代换原则是<strong>实现开闭原则</strong>的重要方式之一，由于使用基类对象的地方都可以使用子类对象</p><p>由该原则引出的一条建议：<u><strong>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</strong></u></p><h3 id="Dependence-Inversion-Principle-DIP">Dependence Inversion Principle, DIP</h3><h4 id="定义-4">定义</h4><ol><li><p>高层模块<strong>不应该依赖低层模块</strong>，它们都应该<strong>依赖抽象</strong>。<strong>抽象不应该依赖于细节，细节应该依赖于抽象</strong>。High level modules should not depend upon low level modules, both should depend upon abstractions. Abstractions should not depend upon details, details should depend upon abstractions.</p></li><li><p>【另一种表述】<strong>要针对接口编程，不要针对实现编程。</strong></p></li></ol><h4 id="分析-4">分析</h4><ol><li>简单来说，依赖倒转原则就是指：<ul><li><strong>代码要依赖于抽象的类，而不要依赖于具体的类；</strong></li><li><strong>要针对接口或抽象类编程，而不是针对具体类编程</strong>。</li></ul></li><li>依赖倒转原则的<u>常用实现方式</u>之一是<u><strong>在代码中使用抽象类，而将具体类放在配置文件</strong></u><ul><li>将抽象放进代码，将细节放进元数据</li><li>Put Abstractions in Code, Details in <strong>Metadata</strong></li></ul></li></ol><h4 id="类之间的耦合">类之间的耦合</h4><ol><li><strong>零耦合</strong>关系：最好情况</li><li><strong>具体耦合</strong>关系（比如组合关系）</li><li><strong>抽象耦合</strong>关系：依赖倒转要求至少一端是抽象的</li></ol><div class="markdown-alert markdown-alert-note"><p class="markdown-alert-title"><svg class="octicon octicon-info mr-2" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"/></svg>Note</p><p></p><p>在面向对象设计中，**耦合（Coupling）**是描述两个或者多个类之间关系的一个术语。耦合强度的高低直接影响到代码的可维护性和可扩展性。</p><p>a. **零耦合关系：**这是最理想的情况，表示两个类之间没有任何关系，修改一个类不会影响到另一个类。</p><p>b. **具体耦合关系：**这是一种较强的耦合关系，表示一个类依赖于另一个类的具体实现。这种情况下，如果一个类发生了变化，可能会影响到依赖于它的所有类。</p><p>c. **抽象耦合关系：**这是一种较弱的耦合关系，表示一个类依赖于另一个类的抽象（例如，接口或抽象类）。这种情况下，如果抽象没有变化，那么具体的实现可以自由地变化，不会影响到依赖于抽象的类。</p><p>依赖倒转原则（Dependency Inversion Principle）就是要求我们在设计类和类之间的关系时，尽可能地使它们成为<strong>抽象耦合关系</strong>。也就是说，一个类应该依赖于抽象，而不是依赖于具体的实现。这样可以使得代码更加灵活和可扩展，因为抽象的变化通常远小于具体实现的变化。</p></div><h4 id="实例-3">实例</h4><p>由于需求的变化，该系统可能需要增加新的数据源或者新的文件格式，每增加一个新的类型的数据源或者新的类型的文件格式，<strong>客户类MainClass都需要修改源代码，以便使用新的类</strong>，但<strong>违背了开闭原则</strong>。现使用<strong>依赖倒转原则+反射机制</strong>对其进行重构。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621234959863.png" alt="image-20240621234959863"></p><h3 id="Interface-Segregation-Principle-ISP">Interface Segregation Principle, ISP</h3><blockquote><p>组合聚合不一定就产生了具体耦合，比如可以持有抽象引用</p></blockquote><h4 id="定义-5">定义</h4><ol><li><p>客户端<strong>不应该依赖</strong>那些<strong>它不需要的接口</strong>。</p><p>Clients should not be forced to depend upon interfaces that they do not use.</p></li><li><p>另一种：<u><strong>一旦一个接口太大，则需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。</strong></u><br>Once an interface has gotten too ‘fat’ it needs to be <strong>split into smaller and more specific interfaces</strong> so that any clients of the interface will only know about the methods that pertain to them.</p></li></ol><h4 id="分析-5">分析</h4><ol><li>使用接口隔离原则拆分接口时，首先必须满足<strong>单一职责原则</strong>，将一组相关的操作定义在一个接口中，且在满足高内聚的前提下，接口中的方法越少越好。</li><li>可以在进行系统设计时采用<u><strong>定制服务</strong></u>的方式，即<strong>为不同的客户端提供宽窄不同的接口</strong>，只提供用户需要的行为，而隐藏用户不需要的行为。</li></ol><h4 id="实例-4">实例</h4><p>下图展示了一个拥有多个客户类的系统，在系统中定义了一个巨大的接口（胖接口，fat接口）AbstractService来服务所有的客户类。可以使用接口隔离原则对其进行重构。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622003533028.png" alt="image-20240622003533028"></p><h3 id="Composite-Reuse-Principle-CRP"><strong>Composite Reuse Principle, CRP</strong></h3><p>又称为组合/聚合复用原则(Composition/ Aggregate Reuse Principle,CARP)</p><h4 id="定义-6">定义</h4><p><strong>尽量使用对象组合</strong>，而<strong>不是继承</strong>来达到复用的目的。</p><p>Favor composition of objects over inheritance as a reuse mechanism.</p><h4 id="组合与聚合">组合与聚合</h4><ol><li><u><strong>聚合是弱拥有关系，部分可以脱离整体存在；组合是强拥有关系，同生命周期</strong></u></li><li>聚合是<strong>空心菱形箭头</strong>，组合是<strong>实心菱形箭头</strong></li></ol><blockquote><p>组合：鸟与翅膀。就是关系强；聚合：大雁与雁群。就是关系弱</p></blockquote><h4 id="组合聚合vs继承">组合聚合vs继承</h4><p>简言之：<strong>要尽量使用组合/聚合实现复用，少用慎用继承来实现复用</strong>。</p><p>均是实现复用的方法</p><p>在面向对象设计中，可以通过两种基本方法在不同的环境中复用已有的设计和实现，即通过<strong>组合/聚合关系</strong>或通过<strong>继承</strong>。</p><ol><li>**继承复用：**实现简单，易于扩展。破坏系统的封装性；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；只能在有限的环境中使用。（&quot;<strong>白箱</strong>&quot;复用）</li><li><strong>组合/聚合复用：</strong><u>耦合度相对较低</u>，选择性地调用成员对象的操作；可以在运行时动态进行。（&quot;<strong>黑箱</strong>&quot;复用）</li></ol><blockquote><p>继承是强耦合，都&quot;is-a&quot;了还不强？</p></blockquote><h4 id="实例-5">实例</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622111226459.png" alt="image-20240622111226459"></p><blockquote><p>左边的都叫Util还能去继承也是挺…</p><p>左边的问题在于如果来了新的扩展困难，会违反OCP目标</p><p><a class="link" href="https://imgss.s3.bitiful.net/2024/06/22/20240622111827.png">左右设计对比ByGPT <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="Law-of-Demeter-LoD">Law of Demeter, LoD</h3><h4 id="定义-7">定义</h4><ol><li><strong>不要和&quot;陌生人&quot;说话</strong>。英文定义为：Don’t talk to strangers.</li><li><strong>只与你的直接朋友通信</strong>。英文定义为：Talk only to your immediate friends.</li><li><strong>每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</strong>。英文定义为：Each unit should have only limited knowledge about other units: only units “closely” related to the current unit.</li></ol><h4 id="分析-6">分析</h4><p>简单地说，迪米特法则就是指<strong>一个软件实体应当尽可能少的与其他实体发生相互作用</strong>。这样，当一个模块修改时，就会尽量少的影响其他的模块，扩展会相对容易</p><p>在迪米特法则中，对于一个对象，其<strong>朋友</strong>包括以下几类：</p><ol><li>当前对象本身(this)</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象（比如某个方法是创建了某个对象返回）</li></ol><p>a. 狭义迪米特法则</p><p><strong>如果两个类之间不必彼此直接通信，那么这两个类就不应当发生直接的相互作用</strong>，如果其中的一个类需要调用另一个类的某一个方法的话，可以通过<strong>第三者转发这个调用</strong>。</p><p>优点：可以<strong>降低类之间的耦合（直接关联的数量少了自然低了）</strong>，可以<strong>使一个系统的局部设计简化</strong></p><p>缺点：会在系统中增加大量的小方法并散落在系统的各个角落，会<strong>造成系统的不同模块之间的通信效率降低</strong>，使得系统的不同模块之间不容易协调。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710818748127-ff7d9217-9d37-467c-8166-d2bb29d9393c.webp" alt="img"></p><p>b. 广义迪米特法则</p><p>指<strong>对对象之间的信息流量、流向以及信息的影响的控制</strong>，主要是<strong>对信息隐藏的控制</strong>。</p><blockquote><p>总结：感觉就是狭义的控制的太死了，广义的才算传达一种思想理念</p><p><strong>狭义的迪米特法则</strong>：具体化，限制直接对象交互，强调局部设计和低耦合。</p><p><strong>广义的迪米特法则</strong>：概念化，控制信息流量和隐藏，强调模块独立和系统整体性。</p></blockquote><p>迪米特法则的<u><strong>主要用途在于控制信息的过载</strong></u>：</p><ol><li>在类的划分上，应当<strong>尽量创建松耦合的类</strong></li><li>在类的结构设计上，应当<strong>尽量降低其成员变量和成员函数的访问权限</strong></li><li>在类的设计上，<strong>一个类型应当设计成不变类</strong></li><li>在对其他类的引用上，<strong>一个对象对其他对象的引用应当降到最低</strong></li></ol><blockquote><p>第三条，不变类的状态在创建后不能被修改，这种设计可以帮助减少对象间的复杂依赖。</p></blockquote><h4 id="实例-6">实例</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622114137553.png" alt="image-20240622114137553"></p><h4 id="思考">思考</h4><p>在JDK 中，java.util.Stack是java.util.Vector类的子类，该设计合理吗？若不合理，请分析解释该设计存在的问题。</p><ol><li><strong>违反LSP(里式替换原则)和合成复用CRP</strong><ul><li><strong>行为不一致</strong>：根据LSP，子类对象应该能够替换任何父类出现的地方，而且保证原来的行为不变。然而，Stack的行为（后入先出）与Vector（可以在任何位置插入和删除元素）的行为是不一致的。</li></ul></li><li>更好的方式应该是使用合成复用原则，将让stack “has-a” vector，但也有其他的一些问题</li></ol><h2 id="（不考）表驱动">（不考）表驱动</h2><blockquote><p><a class="link" href="https://cchroot.github.io/2020/05/23/%E8%A1%A8%E9%A9%B1%E5%8A%A8%E6%B3%95/">https://cchroot.github.io/2020/05/23/表驱动法/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p><strong>简单讲是指用查表的方法获取值。</strong></p><p>表驱动法是一种编程模式 (scheme)，从表里面查找信息而不使用逻辑语句 (if 和 case)。表驱动法的另一个好处是可以<strong>将复杂逻辑从代码中独立出来，以便于单独维护</strong></p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622123138373.png" alt="image-20240622123138373"></p><h3 id="使用表驱动法的两个问题">使用表驱动法的两个问题</h3><ol><li><p><strong>在表里存放什么信息</strong></p><ul><li>主要存放的是数据，但在一些特殊情况下也存放动作</li></ul></li><li><p><strong>如何快速从表中查询条目</strong></p><ul><li>直接访问 (Direct access)<ul><li>最直观朴素的，使用键值对</li></ul></li><li>索引访问 (Indexed access)<ul><li>间接访问</li><li>对于索引访问表，它适用于这样的情况，假设你经营一家商店，有100种商品，每种商品都有一个 id 号，但很多商品的描述都差不多，所以 只有30条不同的描述，现在的问题是建立商品与商品描述的表，如何建立？还是同上面的直接访问表的做法来一一对应吗？那样描述会扩充到100的，会有70个描述是重复的！如何解决这个问题呢？方法是建立一个100长的索引，然后这些索引指向相应的描述，注意不同的索引可以指向相同的描述，这样就解决了表数据冗余的问题啦。</li><li><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622124042939.png" alt="image-20240622124042939"></li></ul></li><li>阶梯访问 (Stair-step access)<ul><li>它适用于数据不是一个固定的值，而是一个范围的问题，比如将百分制成绩转成五级分制（我们用的优、良、中、合格、不合格，西方用的 A、B、C、D 和F）</li><li>申请一个 100 长度的表，然后在这个表中填充相应的等级就行了？但这样太浪费空间了，有没有更好的方法？</li><li><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622124249873.png" alt="image-20240622124249873"></li></ul></li></ul></li></ol><h2 id="设计模式">设计模式</h2><p>设计模式(Design Pattern)是一套<u><strong>被反复使用</strong></u>、<u><strong>多数人知晓的</strong></u>、<u><strong>经过分类编目的</strong></u>、<u><strong>代码设计经验的总结</strong></u></p><p><strong>设计模式的基本要素</strong></p><p>1.模式名称 (Pattern name) 2.问题 (Problem) 3.解决方案 (Solution) 4.效果 (Consequences)</p><p><strong>设计模式的分类</strong></p><ul><li>根据其<mark>目的</mark>(模式是用来做什么的)可分为**创建型(Creational)，结构型(Structural)和行为型(Behavioral)**三种：<ol><li><u><strong>创建型模式</strong></u>主要用于<strong>创建对象。</strong></li><li><u><strong>结构型模式</strong></u>主要用于<strong>处理类或对象的组合。</strong></li><li><u><strong>行为型模式</strong></u>主要用于<strong>描述对类或对象怎样交互和怎样分配职责。</strong></li></ol></li><li>根据<mark>范围</mark>，即模式<mark>主要是用于处理类之间关系还是处理对象之间的关系</mark>，可分为<strong>类模式和对象模式</strong>两种：<ol><li><u><strong>类模式</strong></u>处理类和子类之间的关系，这些关系通过<strong>继承</strong>建立，在编译时刻就被确定下来，是属于静态的。</li><li><u><strong>对象模式</strong></u>处理对象间的关系，这些关系在运行时刻变化，更具动态性。</li></ol></li></ul><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240621125730304.png" alt="image-20240621125730304"></p><h3 id="Simple-Factory-Pattern（类模式-创建型模式）">Simple Factory Pattern（类模式+创建型模式）</h3><p>又称为**静态工厂方法(Static Factory Method)**模式</p><blockquote><p>因为<strong>Java一般会提供一个static的方法</strong>，这样就不必实例化工厂对象。</p></blockquote><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p>工厂角色提供<strong>静态工厂方法</strong>来创建其他类的实例，这样子满足了原则：</p><ol><li>满足LoD。减少了客户端与具体实现类的直接交互。客户端只需知道如何使用工厂方法，而不需要了解具体类的创建细节。这符合迪米特法则的要求，减少了对象之间的耦合度。</li><li>满足SRP。<strong>将对象的创建和使用分离</strong>(创建本质上和使用是强耦合的)，将复杂度降低，<strong>并将变化的部分和不变的部分分离开。</strong></li><li>但是对OCP的支持不太好。内部根据参数用if else返回不同的类，要新增类的话这里就会违反OCP了。也就是说<u>简单工厂模式最大的问题在于<strong>工厂类的职责相对过重</strong>，增加新的产品需要修改工厂类的判断逻辑，这一点<strong>与开闭原则</strong>是相违背的。</u></li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ProductA&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ProductB&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown product type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="示例">示例</h4><p>根据不同的权限等级创建不同等级的用户对象，<strong>不同等级的用户对象拥有不同的操作权限</strong>。现使用简单工厂模式来设计该权限管理模块。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828678593-8b68d92c-6f5f-4ed0-9daf-87fe3bac2e69.webp" alt="img"></p><blockquote><p>实线三角：继承；虚线箭头：依赖</p></blockquote><h4 id="优点">优点</h4><ol><li>（SRP）工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅&quot;消费&quot;产品，从而<strong>实现了对责任的分割，它提供了专门的工厂类用于创建对象。</strong></li><li>（LoD）<strong>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可</strong>，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li><li><strong>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类</strong>，在一定程度上提高了系统的灵活性。</li></ol><h4 id="缺点">缺点</h4><ol><li>由于<strong>工厂类集中了所有产品创建逻辑</strong>，一旦不能正常工作，整个系统都要受到影响（单个职责过大）</li><li><strong>增加了系统中类的个数</strong>，在一定程序上增加了系统的复杂度和理解难度</li><li><strong>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时</strong>。<u><strong>会违背OCP原则</strong></u></li><li><strong>无法形成基于继承的等级结构</strong></li></ol><h4 id="适用场景">适用场景</h4><p>在以下情况下可以使用简单工厂模式：</p><ol><li><strong>工厂类负责创建的对象比较少</strong>：由于创建的对象较少，不会造成工厂方法中的业务逻辑<strong>太过复杂</strong>(如果扩展使比较少的)</li><li><strong>客户端只知道传入工厂类的参数，对于如何创建对象不关心</strong>：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数(比如只知道名称参数)</li></ol><h4 id="模式应用">模式应用</h4><ol><li><p>在JDK类库中广泛使用了<strong>简单工厂模式</strong>，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711367623310-1d574e0a-dd9e-4b71-b895-d734f6ffae10-1719039264661-18.webp" alt="image.png"></p></li><li><p>Java加密技术：对称加密和非对称加密，但是变化比较少</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cipher</span> <span class="variable">encryptCipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="模式扩展">模式扩展</h4><p>**简单工厂模式的简化：**在有些情况下工厂类可以由抽象产品角色扮演，一个抽象产品类同时也是子类的工厂，也就是说把静态工厂方法写到抽象产品类中。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828678238-85eb779e-203f-4987-b0f1-a0a92c0097b8.webp" alt="img"></p><h3 id="Factory-Method-Pattern（类模式-创建型模式）">Factory Method Pattern（类模式+创建型模式）</h3><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫<strong>虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式</strong>，它属于<strong>类创建型模式</strong>。</p><p><u><strong>延迟</strong></u></p><ol><li>在工厂方法模式中，<strong>工厂父类</strong>负责定义创建产品对象的公共接口，而<strong>工厂子类</strong>则负责生成具体的产品对象，<u>这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</u></li><li>工厂方法是以<strong>继承方法</strong>为主，工厂子类是<strong>继承工厂父类</strong>的。</li></ol><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828678747-e44bf3de-d5b0-4d7d-90a4-d41ec4d56a65.webp" alt="img"></p><p>工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。<strong>在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做</strong>。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得<strong>工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品</strong>。</p><p>很好的符合了OCP</p><h4 id="示例-2">示例</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828678838-05794b8e-9891-4989-be17-50d3f1033087.webp" alt="img"></p><h4 id="优点-2">优点</h4><blockquote><p>用户无需关心创建细节；工厂自主确定，封装细节在具体工厂；易加入新产品</p></blockquote><ol><li><strong>用户</strong>只需要关心所需产品对应的工厂，无须关心创建细节</li><li><strong>工厂可以自主</strong>确定创建何种产品对象，而如何创建这个<strong>对象的细节则完全封装</strong>在具体工厂内部。</li><li><strong>在系统中加入新产品</strong>时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。</li></ol><h4 id="缺点-2">缺点</h4><blockquote><p>类太多了，并且看起来很复杂</p></blockquote><ol><li>在添加新产品时，<strong>需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度</strong>，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，<strong>增加了系统的抽象性和理解难度</strong>，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ol><h4 id="适用场景（感觉不重要">适用场景（感觉不重要</h4><ol><li><strong>一个类不知道它所需要的对象的类</strong></li><li><strong>一个类通过其子类来指定创建哪个对象</strong></li><li><strong>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定</strong></li><li>希望能够<strong>推迟创建</strong>的时候</li></ol><h3 id="Abstract-Factory-Pattern（对象模式-创建型模式）">Abstract Factory Pattern（对象模式+创建型模式）</h3><p>有时候<strong>我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象</strong>。</p><p>两个概念：</p><ol><li><strong>产品等级结构</strong>：不同品牌的同一产品<ul><li>如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，<strong>则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构</strong></li></ul></li><li><strong>产品族</strong>：同一品牌的不同产品。<ul><li>海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul></li></ol><p>区分：</p><p><u><strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong></u></p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622153307169.png" alt="image-20240622153307169"></p><p>如上图，抽象工厂模式包含如下角色：</p><ol><li>AbstractFactory：抽象工厂</li><li>ConcreteFactory：具体工厂</li><li>AbstractProduct：抽象产品</li><li>Product：具体产品</li></ol><h4 id="示例-3">示例</h4><p><strong>数据库操作工厂。<strong>某系统为了改进数据库操作的性能，自定义数据库连接对象Connection和语句对象Statement，可针对</strong>不同类型的数据库</strong>提供<strong>不同的连接对象和语句对象</strong>，如提供Oracle或SQL Server专用连接类和语句类，而且用户可以通过配置文件等方式根据实际需要动态更换系统数据库。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828679540-a80fa4df-0172-474d-aea0-27e54f97aba0.webp" alt="img"></p><h4 id="优点-3">优点</h4><ol><li><strong>隔离了具体类的生成</strong>，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此<strong>只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为</strong>。实现了高内聚低耦合</li><li><strong>能够保证客户端始终只使用同一个产品族中的对象</strong>（具体工厂是不同的牌子）</li><li><strong>增加新的具体工厂和产品族很方便，无须修改已有系统，符合OCP</strong></li></ol><h4 id="缺点-3">缺点</h4><p>在添加新的产品对象时，<strong>难以扩展抽象工厂来生产新种类的产品</strong>，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</p><p>开闭原则的倾斜性体现在此：<strong>增加新的工厂和产品族容易，增加新的产品等级结构麻烦</strong></p><blockquote><p>加一个新的品牌很方便，但是新的产品（产品等级结构），比如品牌123都生产ABC，加一个品牌4也生产123很简单，但是想加一个生产D，就比较麻烦了，会违反OCP</p></blockquote><h4 id="适用场景-2">适用场景</h4><ol><li>一个系统<strong>不应当依赖于产品类实例如何被创建、组合和表达的细节</strong>，这对于所有类型的工厂模式都是重要的。</li><li>系统中有<strong>多于一个的产品族，而每次只使用其中某一产品族。</strong>（对应优点2）并且<strong>属于同一个产品族的产品将在一起使用</strong>，这一约束必须在系统的设计中体现出来。</li><li><strong>所有的产品以同样的接口出现</strong>，从而<strong>使客户端不依赖于具体实现</strong>。</li></ol><h4 id="模式扩展-2">模式扩展</h4><p>工厂模式的退化</p><p>抽象工厂 -》工厂方法 -》简单工厂</p><p>牌子123生产ABC（抽象工厂模式）-&gt;只有一个产品等级结构，如只生产A（工厂方法模式）-&gt;抽象工厂合并到具体工厂，只用一个具体工厂（简单工厂模式</p><h3 id="（不考）Builder-Pattern（对象模式-创建型模式）">（不考）Builder Pattern（对象模式+创建型模式）</h3><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><p>复用相同的对象构造代码</p><p>将<strong>一个复杂对象的构建与它的表示分离</strong>，使得<strong>同样的构建过程可以创建不同的表示</strong>。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/2.png" alt="img"></p><p>组装汽车、KFC套餐</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/example-zh.png" alt="生成器模式结构示例"></p><h3 id="Prototype-Pattern（对象模式-创建型模式）">Prototype Pattern（对象模式+创建型模式）</h3><blockquote><p>原型模式将克隆过程委派给被克隆的实际对象。 模式为所有支持克隆的对象声明了一个通用接口， 该接口让你能够克隆对象， 同时又无需将代码和对象所属类耦合。 通常情况下， 这样的接口中仅包含一个 <code>克隆</code>方法。</p></blockquote><p>在软件系统中，有些对象的创建过程较为复杂，而且有时候需要频繁创建，<strong>原型模式</strong>通过<strong>给出一个原型对象来指明所要创建的对象的类型</strong>，然后<strong>通过复制</strong>这个原型对象的办法<strong>创建出更多同类型的对象</strong>，这就是原型模式的意图所在。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/4.png" alt="img"></p><blockquote><p>+表示public，-表示private</p></blockquote><ol><li>抽象原型类是定义具有克隆自己的方法的接口（比如java中就是Object）</li><li><strong>具体原型类实现具体的克隆方法</strong>，在克隆方法中返回自己的一个克隆对象</li></ol><p>java.lang.Object | Cloneable接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeDemo</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException exception) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Not support cloneable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Java语言提供的clone()方法将对象复制了一份并返回给调用者。一般而言，clone()方法满足:</p><ol><li>对任何的对象x，都有x.clone() !=x，<strong>即克隆对象与原对象不是同一个对象。</strong></li><li>对任何的对象x，都有x.clone().getClass()==x.getClass()，即克隆对象与原对象的类型一样。</li><li>如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</li></ol></blockquote><p><strong>深克隆和浅克隆</strong></p><p><strong>浅克隆</strong>：只克隆对象本身，成员对象的引用保持不变。适用于成员对象不需要独立变化的情况。</p><p><strong>深克隆</strong>：克隆对象及其所有成员对象。适用于需要完全独立的克隆对象的情况。</p><p><strong>java中的clone()方法是浅克隆</strong></p><p>在 Java 中，<code>Object</code> 类提供了一个 <code>clone()</code> 方法，这个方法默认实现的是<strong>浅克隆（Shallow Clone）</strong>。浅克隆的含义是，当一个对象被克隆时，只复制对象本身，而不复制对象包含的引用类型成员对象。<strong>即，克隆对象和原对象共享同一个引用类型成员对象。</strong></p><h4 id="示例-4">示例</h4><p>由于邮件对象包含的内容较多（如发送者、接收者、标题、内容、日期、附件等），某系统中现需要<strong>提供一个邮件复制功能</strong>，对于已经创建好的邮件对象，<strong>可以通过复制的方式创建一个新的邮件对象，如果需要改变某部分内容，无须修改原始的邮件对象，<strong>只需要修改复制后得到的邮件对象即可。在本实例中使用</strong>浅克隆</strong>实现邮件复制，即复制邮件(Email)的同时不复制附件(Attachment)。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828856419-400b1a13-e8fe-43c0-9ad8-174e21fbceab.webp" alt="img"></p><h4 id="优点-4">优点</h4><ol><li><strong>简化</strong>对象的创建过程</li><li>可以<strong>动态增加或减少产品类</strong></li><li>可以使用深克隆的方式<strong>保存</strong>对象的状态。</li></ol><h4 id="缺点-4">缺点</h4><ol><li>需要为每一个类配备一个克隆方法，<strong>而且这个克隆方法需要对类的功能进行通盘考虑</strong>，这对全新的类来说不是很难，但对已有的类进行改造时，不一定是件容易的事，必须修改其源代码，<strong>违背了OCP</strong></li><li>在实现深克隆时<strong>需要编写较为复杂的代码</strong></li></ol><h4 id="适用场景-3">适用场景</h4><ol><li><p><strong>创建新对象成本较大</strong></p></li><li><p>如果<strong>系统要保存对象的状态</strong>，而对象的状态变化很小，或者对象本身占内存不大的时候</p></li><li><p>需要<strong>避免使用分层次的工厂类来创建分层次的对象</strong>，并且类的实例对象只有一个或很少的几个组合状态</p><blockquote><p>比如按钮有开关状态，犯不着用工厂类，直接复制一个改下状态就行</p></blockquote></li></ol><h4 id="模式扩展-3">模式扩展</h4><p>带原型管理器的原型模式</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710828857053-4f673b9b-c4a7-4bc6-8def-d3f3933ab115.webp" alt="img"></p><p>就是用一个hashtable来存取管理下</p><h3 id="（不考）Singleton-Pattern（对象模式-创建型模式）">（不考）Singleton Pattern（对象模式+创建型模式）</h3><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p><h3 id="Adapter-Pattern（类-对象模式-结构型模式）">Adapter Pattern（类/对象模式+结构型模式）</h3><blockquote><p><a class="link" href="https://refactoringguru.cn/design-patterns/adapter">https://refactoringguru.cn/design-patterns/adapter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>这里的两张图很清晰</p></blockquote><p><strong>将一个接口转换成客户希望的另一个接口</strong>，适配器模式使<strong>接口不兼容的那些类可以一起工作</strong>，其别名为<strong>包装器(Wrapper)</strong>。适配器模式既可以作为<u>类结构型模式</u>，也可以作为<u>对象结构型模式</u>。</p><p>对象适配器</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646835467-4a35969f-9df0-4274-9047-8b9578d5fadb.png" alt="img" style="zoom: 33%;"> <blockquote><p>Target可以抽象或者具体</p></blockquote><p>类适配器</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646835505-374cdc08-cdd2-48f0-8649-7d615a0a3433.png" alt="img" style="zoom:33%;"> <blockquote><p>Target只能抽象</p></blockquote><ul><li>Target 目标抽象类</li><li>Adapter 适配器类</li><li>Adaptee 适配者类</li><li>Client 客户类</li></ul><h4 id="对象适配器">对象适配器</h4><p>适配器实现了其中一个对象的接口， 并对另一个对象进行封装。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622170211690.png" alt="image-20240622170211690"></p><h4 id="类适配器">类适配器</h4><p>适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持<strong>多重继承</strong>的编程语言中实现， 例如 C++</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622170229492.png" alt="image-20240622170229492"></p><ol><li>典型的类适配器代码：</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol><li>典型的对象适配器代码：</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee=adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>&#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="示例-5">示例</h4><p><strong>仿生机器人</strong>。现需要设计一个可以模拟各种动物行为的机器人，在机器人中定义了一系列方法，如机器人叫喊方法cry()、机器人移动方法move()等。如果希望在不修改已有代码的基础上使得机器人能够像狗一样叫，像狗一样跑，使用适配器模式进行系统设计。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646835522-761c73f5-626e-44fa-98fa-7cdfeb32f489.webp" alt="img" style="zoom:50%;"> <blockquote><p>类适配器，适配器的方法对应Target的方法</p></blockquote><p><strong>加密适配器</strong>。某系统需要提供一个加密模块，将用户信息（如密码等机密信息）加密之后再存储在数据库中，系统已经定义好了数据库操作类。为了提高开发效率，现需要重用已有的加密算法，这些算法封装在一些由第三方提供的类中，有些甚至没有源代码。使用适配器模式设计该加密模块，实现在不修改现有类的基础上重用第三方加密方法。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646835454-6bd3cefc-0f4c-4f2e-8d10-4f3b727a31a0.webp" alt="img" style="zoom: 33%;"> <blockquote><p>对象适配器，与Caesar是组合关系</p></blockquote><h4 id="优点-5">优点</h4><ol><li><strong>将目标类和适配者类解耦</strong>，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li><li><strong>增加了类的透明性和复用性</strong>，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li><li><strong>灵活性和扩展性都非常好</strong>，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合&quot;开闭原则&quot;。</li></ol><h5 id="类适配器的优缺点">类适配器的优缺点</h5><p>优点：由于Adapter是Adaptee的子类，因此<strong>可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强</strong>。</p><p>缺点：对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，<strong>其使用有一定的局限性</strong>，不能将一个适配者类和它的子类都适配到目标接口。</p><h5 id="对象适配器模式">对象适配器模式</h5><p>优点：<strong>同一个适配器可以把适配者类和它的子类都适配到目标接口</strong>（因为是用的组合，而不是继承</p><p>缺点：<strong>想要置换适配者类的方法不容易</strong>（因为不是继承，只是关联/组合/聚合这样，继承的话可以重新实现方法之类的</p><h4 id="适用场景-4">适用场景</h4><p>在以下情况下可以使用适配器模式：</p><ol><li>系统<strong>需要使用现有的类</strong>，而这些类的接口不符合系统的需要。</li><li><strong>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类</strong>，包括一些可能在将来引进的类<strong>一起工作</strong>。</li></ol><h4 id="模式应用-2">模式应用</h4><p><strong>每一个具体数据库引擎</strong>（如SQL Server、Oracle、MySQL等）<strong>的JDBC驱动软件都是一个介于JDBC接口和数据库引擎接口之间的适配器软件</strong>。</p><h4 id="模式扩展-4">模式扩展</h4><p><strong>默认适配器模式</strong>（Default Adapter Pattern）或缺省适配器模式</p><p>当不需要全部实现接口提供的方法时，可以设计一个适配器抽象类实现接口，并为接口中的每个方法提供默认方法，抽象类的子类就可以有选择的覆盖父类的某些方法实现需求，它适用于一个接口不想使用所有的方法的情况。**在java8后，接口中可以有default方法，就不需要这种缺省适配器模式了。**接口中方法都设置为default，实现为空，这样同样可以达到缺省适配器模式同样的效果。</p><blockquote><p>就是给接口先搞一个抽象类，弄点默认方法，然后子类可以有选择地去覆盖，其他的方法保持默认，因为java8之前接口类还没有default关键字，现在没啥用了这个</p></blockquote><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646836335-cefe80a7-fdc4-4b0a-bbb0-acfa78ef7d46.webp" alt="img" style="zoom:50%;"> <p><strong>双向适配器</strong>（bidirectional adapter）</p><blockquote><p>作为Target和Adaptee之间的互调工具人</p></blockquote><p>在对象适配器的使用过程中，如果<strong>在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法</strong>，那么该适配器就是一个<strong>双向适配器</strong>。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646836590-78b79def-3d93-4250-bb70-91e02c66a13a.png" alt="img" style="zoom: 33%;"> <h3 id="Composite-Pattern（对象模式-结构型模式）">Composite Pattern（对象模式+结构型模式）</h3><blockquote><p>由于容器对象和叶子对象在功能上的区别，在使用这些对象的客户端代码中必须<strong>有区别地对待容器对象和叶子对象</strong>，而实际上<strong>大多数情况下客户端希望一致地处理它们，因为对于这些对象的区别对待将会使得程序非常复杂</strong>。</p></blockquote><p>组合模式又可以称为<strong>整体-部分(Part-Whole)模式</strong></p><p>组合多个对象形成<strong>树形结构</strong>以<strong>表示&quot;整体-部分&quot;的结构层次</strong>。组合模式对<strong>单个对象（即叶子对象）<strong>和</strong>组合对象（即容器对象）<strong>的</strong>使用具有一致性</strong>。</p><p>组合模式包含如下角色：</p><ol><li>Component: 抽象构件</li><li>Leaf: 叶子构件</li><li>Composite: 容器构件</li><li>Client: 客户类</li></ol><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646836574-891e05aa-4c89-46fe-b067-db8a15a17ffc.webp" alt="img" style="zoom:50%;"> <blockquote><p>右边的聚合关系意思就是，容器内可以有多个Component（Leaf或者Composite）</p></blockquote><p>组合模式的<u><strong>关键</strong></u>是<u><strong>定义了一个抽象构件类</strong></u>，它既可以代表叶子，又可以代表容器，而<strong>客户端针对该抽象构件类进行编程</strong>，无须知道它到底表示的是叶子还是容器，可以对其进行统一处理。</p><p>同时<u><strong>容器对象与抽象构件类之间还建立一个聚合关联关系</strong></u>，在容器对象中既可以包含叶子，也可以包含容器，以此<strong>实现递归组合，形成一个树形结构</strong>。</p><h4 id="示例-6">示例</h4><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646836756-945603ce-365a-465c-b58e-62be8da3033d.webp" alt="img" style="zoom:50%;"> <p><strong>水果盘</strong>。在水果盘(Plate)中有一些水果，如苹果(Apple)、香蕉(Banana)、梨子(Pear)，当然大水果盘中还可以有小水果盘，现需要对盘中的水果进行遍历（吃），当然如果对一个水果盘执行&quot;吃&quot;方法，实际上就是吃其中的水果。使用组合模式模拟该场景。</p> <img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646836980-eb2f9070-5c80-423f-aee2-0f9f8f831a28.webp" alt="img" style="zoom:50%;"><h4 id="优点-6">优点</h4><ol><li>可以清楚地定义<strong>分层次的复杂对象</strong>，表示对象的全部或部分层次，使得增加新构件也更容易。</li><li>客户端可以<strong>一致的使用组合结构或其中单个对象</strong></li><li>定义了包含叶子对象和容器对象的<strong>类层次结构</strong>，可以形成<strong>复杂的树形结构</strong>。</li><li><strong>更容易在组合体内加入对象构件</strong>，客户端不必因为加入了新的对象构件而更改原有代码。（继承下就行，反正容器放的是抽象构件对象</li></ol><h4 id="缺点-5">缺点</h4><ol><li><strong>使设计变得更加抽象</strong>，对象的业务规则如果很复杂，则实现组合模式具有很大挑战性，<u><strong>而且不是所有的方法都与叶子对象子类都有关联。</strong></u></li><li>增加新构件时可能会产生一些问题，<strong>很难对容器中的构件类型进行限制</strong>。</li></ol><h4 id="模式应用-3">模式应用</h4><p>XML文档解析 | <strong>操作系统中的目录结构</strong> | JDK的<strong>AWT/Swing</strong></p><blockquote><p>JDK的<strong>AWT/Swing</strong>有Component，Container之类的</p></blockquote><h4 id="模式扩展-5">模式扩展</h4><p>更复杂的组合模式</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646837561-23f6c72e-788a-48e1-a1af-764115da3eca.png" alt="img" style="zoom: 33%;"> <p>组合模式<strong>根据抽象构件类的定义形式</strong>，又可以分为透明组合模式和安全组合模式。</p><p><strong>透明组合模式</strong>（其实就是普通组合模式？</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646837539-17003bd1-0cb6-478b-a319-beb78e0287cb.webp" alt="img" style="zoom:33%;"> <p>统一了叶子节点和组合节点的接口</p><blockquote><p><strong>优点</strong>：简化客户端代码，因为它对待叶子节点和组合节点无需区分。</p><p><strong>缺点</strong>：叶子节点包含了一些本不应支持的操作，例如添加或删除子节点，这违反了设计的最小知识原则，即一个类不应该包含它不使用的方法。</p></blockquote><p><strong>安全组合模式：违反了里氏代换原则</strong></p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712646837869-883071bd-79f2-4105-a5c4-2c8886ec536d.webp" alt="img" style="zoom:33%;"> <p>Component只放共有的operation操作</p><p>安全性高，一个类不接触它不需要的接口。</p><h3 id="Decorator-Pattern（对象模式-结构型模式）">Decorator Pattern（对象模式+结构型模式）</h3><p>装饰模式以<strong>对客户透明的方式动态地给一个对象附加上更多的责任</strong>，换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在<strong>不需要创造更多子类的情况下，将对象的功能加以扩展</strong>。这就是装饰模式的模式动机。</p><p><strong>动态地给一个对象增加一些额外的职责</strong>(Responsibility)，其别名也可以称为<strong>包装器</strong>(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。</p><p>装饰模式也有人翻译为&quot;油漆工模式&quot;，它是一种<strong>对象结构型模式</strong>。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712802180958-16b938cc-80e7-490f-88dc-e122496a321e.webp" alt="img" style="zoom:50%;"> <p>递归构建，上面部分很像组合模式（容器+叶子）。<strong>ConcreteComponent和Decorator只有能不能继续装饰的区别，是一种终止条件，其实没有本质区分。</strong></p><p>装饰模式包含如下角色：</p><ol><li>Component: 抽象构件</li><li><strong>ConcreteComponent: 具体构件</strong></li><li>Decorator: 抽象装饰类</li><li><strong>ConcreteDecorator: 具体装饰类</strong></li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> Component component;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">this</span>.component=component;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">   component.operation();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ConcreteDecorator</span><span class="params">(Component component)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">super</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">super</span>.operation();</span><br><span class="line">    addedBehavior();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addedBehavior</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//新增方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>其实感觉就是包了一层，持有了component，所以叫wrapper也合理</p></blockquote><h4 id="示例-7">示例</h4><p><strong>变形金刚。</strong><u><strong>变形金刚在变形之前是一辆汽车，它可以在陆地上移动</strong></u>。当它变成机器人之后除了能够在陆地上移动之外，还可以说话；如果需要，它还可以变成飞机，除了在陆地上移动还可以在天空中飞翔。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712802180962-6ff050fc-8b56-492b-8215-483bd58b2186.webp" alt="img" style="zoom:50%;"> <blockquote><p>变成Robot</p><p>Transform car = new Car()</p><p>Transform robot = new Robot(car)</p></blockquote><p><strong>多重加密系统</strong>。某系统提供了一个数据加密功能，可以对字符串进行加密。最简单的加密算法通过对字母进行移位来实现，同时还提供了稍复杂的逆向输出加密，还提供了更为高级的求模加密。用户先使用最简单的加密算法对字符串进行加密，如果觉得还不够可以对加密之后的结果使用其他加密算法进行二次加密，当然也可以进行第三次加密。现使用装饰模式设计该多重加密系统。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712802181281-852c4348-6ed4-4edd-901c-a16ca63cb2e8.webp" alt="img" style="zoom:50%;"> <h4 id="优点-7">优点</h4><ol><li>装饰模式可以<strong>提供比继承更多的灵活性</strong></li><li><strong>通过一种动态的方式来扩展一个对象的功能</strong></li><li>排列组合可以创造很多不同行为的组合</li><li><strong>具体构件类与具体装饰类可以独立变化，符合“开闭原则”</strong></li></ol><h4 id="缺点-6">缺点</h4><ol><li>产生小对象，系统复杂</li><li>易出错，难排错</li></ol><h4 id="模式扩展-6">模式扩展</h4><p><strong>如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类</strong>。</p><p>可以简化如右图</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622212238300.png" alt="image-20240622212238300"></p><p><strong>透明</strong>装饰模式（多重加密系统）</p><p>在透明装饰模式中，要求<strong>客户端完全针对抽象编程</strong>，装饰模式的透明性要求客户端程序不应该声明具体构件类型和具体装饰类型，而应该全部声明为抽象构件类型。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cipher sc,cc,ac; </span><br><span class="line">sc=<span class="keyword">new</span> <span class="title class_">SimpleCipher</span>(); </span><br><span class="line">cc=<span class="keyword">new</span> <span class="title class_">ComplexCipher</span>(sc); </span><br><span class="line">ac=<span class="keyword">new</span> <span class="title class_">AdvancedCipher</span>(cc);</span><br></pre></td></tr></table></figure></div><p><strong>半透明</strong>装饰模式（变形金刚）</p><p>**半透明(semi-transparent)**的装饰模式允许用户在客户端声明具体装饰者类型的对象，调用在具体装饰者中新增的方法。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transform camaro; </span><br><span class="line">camaro=<span class="keyword">new</span> <span class="title class_">Car</span>(); </span><br><span class="line">camaro.move(); </span><br><span class="line">Robot bumblebee=<span class="keyword">new</span> <span class="title class_">Robot</span>(camaro); </span><br><span class="line">bumblebee.move(); </span><br><span class="line">bumblebee.say(); <span class="comment">// 调用具体装饰者中新增的方法</span></span><br></pre></td></tr></table></figure></div><h3 id="Facade-Pattern（对象模式-结构型模式）">Facade Pattern（对象模式+结构型模式）</h3><p>外部与一个子系统的通信必须通过一个<strong>统一的外观对象</strong>进行，为子系统中的一组接口<strong>提供一个一致的界面</strong>，外观模式<u><strong>定义了一个高层接口</strong></u>，这个接口使得这一子系统更加容易使用。</p><p>外观模式又称为<strong>门面模式</strong>，它是一种对象结构型模式。</p><p>外观模式是<strong>SRP</strong>、<strong>LoD</strong>法则的体现</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1719063544493-78.png" alt="img" style="zoom: 25%;"> <p>Facade：外观角色</p><p>SubSystem: 子系统角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Facade</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">SubSystemA</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemA</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">SubSystemB</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemB</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">SubSystemC</span> <span class="variable">obj3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemC</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    obj1.method();</span><br><span class="line">    obj2.method();</span><br><span class="line">    obj3.method();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="示例-8">示例</h4><p>案例：电源总开关</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/3.png" alt="img" style="zoom:50%;"> <p><strong>文件加密。<strong>某系统需要提供一个文件加密模块，加密流程包括三个操作，分别是读取源文件、加密、保存加密之后的文件。读取文件和保存文件使用流来实现，这三个操作相对独立，其业务代码封装在三个不同的类中。现在需要提供</strong>一个统一的加密外观类</strong>，用户可以直接使用该加密外观类完成文件的读取、加密和保存三个操作，而不需要与每一个类进行交互，使用外观模式设计该加密模块。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/4-1719063877363-87.png" alt="img" style="zoom: 33%;"> <h4 id="优点-8">优点</h4><ol><li>对<strong>客户屏蔽子系统组件</strong>，减少了客户处理的对象数目并<strong>使得子系统使用起来更加容易</strong></li><li>实现了子系统与客户之间的<strong>松耦合关系</strong></li><li><strong>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程</strong></li><li><u><strong>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类</strong></u></li></ol><h4 id="缺点-7"><strong>缺点</strong></h4><ol><li><u><strong>不能很好地限制客户使用子系统类</strong></u></li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，<strong>违背了“开闭原则”</strong></li></ol><h4 id="模式应用-4">模式应用</h4><p>Session外观模式是外观模式在Java EE框架中的应用。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/5-1719064060541-92.png" alt="img" style="zoom:33%;"> <h4 id="模式扩展-7">模式扩展</h4><ol><li>一个系统卡哇伊有多个外观类，通常会是单例，也可以多个</li><li>不要试图通过外观类为子系统增加新行为</li><li><u><strong>外观模式和迪米特法则</strong></u><ul><li><strong>外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代</strong>。外观类充当了客户类与子系统类之间的“第三者”，降低了客户类与子系统类之间的耦合度，<u>外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。</u></li></ul></li><li>抽象外观类的引入</li></ol><p><strong>抽象外观类</strong>：</p><ul><li>外观模式最大的缺点在于<strong>违背了“开闭原则”</strong>，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，<strong>客户端针对抽象外观类进行编程</strong>。</li><li>对于新的业务需求，不修改原有外观类，而<strong>对应增加一个新的具体外观类</strong>，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。</li></ul><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240622215105460.png" alt="image-20240622215105460" style="zoom: 67%;"> <h3 id="Template-Method-Pattern（类模式-行为型模式）">Template Method Pattern（类模式+行为型模式）</h3><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/12.png" alt="img" style="zoom:33%;"> <h4 id="定义-8">定义</h4><p>定义一个操作中<strong>算法的骨架</strong>，而将一些步骤延迟到子类中，模板方法使得子类可以<strong>不改变一个算法的结构即可重定义该算法的某些特定步骤</strong>。模板方法是一种<strong>类</strong>行为型模式。（因为是基于继承的代码复用方式嘛）</p><h4 id="结构">结构</h4><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/13.png" alt="img" style="zoom:50%;"> <p>模板方法模式包含如下角色：</p><ol><li>AbstractClass: 抽象类</li><li>ConcreteClass: 具体子类</li></ol><h4 id="模式分析">模式分析</h4><ol><li><p>模板方法模式是一种类的行为型模式，在它的结构图中<strong>只有类之间的继承关系，没有对象关联关系</strong>。</p></li><li><p>在模板方法模式的使用过程中，要求开发抽象类和开发具体子类的设计师之间进行协作。一个设计师负责给出<strong>一个算法的轮廓和骨架</strong>，另一些设计师则<strong>负责给出这个算法的各个逻辑步骤</strong>。实现这些具体逻辑步骤的方法称为<strong>基本方法(Primitive Method)</strong>，<u>而将这些基本法方法汇总起来的方法称为<strong>模板方法(Template Method)</strong>，模板方法模式的名字从此而来。</u></p></li><li><p>模板方法<strong>即templateMethod</strong>：一个模板方法是<strong>定义在抽象类中的、把基本操作方法组合在一起</strong>形成一个总算法或一个总行为的方法。（用于组合的那个方法）</p></li><li><p>基本方法（有三种）：基本方法是<strong>实现算法各个步骤的方法</strong>，是模板方法的组成部分。</p><ol><li><p>抽象方法(Abstract Method)</p></li><li><p>具体方法(Concrete Method)</p></li><li><p>钩子方法(Hook Method)：挂钩方法和空方法</p><ul><li><p>挂钩方法：让子类可以影响父类中定义的算法的执行路径，从而让模板方法中的某些<strong>步骤是可选的</strong>。比如下列例子中列举的<code>isPrint()</code>算法。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 钩子方法示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span>&#123;</span><br><span class="line">   open();</span><br><span class="line">   display();</span><br><span class="line">   <span class="keyword">if</span>(isPrint())&#123;</span><br><span class="line">      print();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPrint</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>空方法</strong>：留一个占位，如果需要在某些地方加入操作，可以在子类中加入。</p></li></ul></li></ol></li></ol><p>基本框架代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法，定义算法的骨架</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        primitiveOperation2();</span><br><span class="line">        primitiveOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本方法 - 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Operation 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本方法 - 抽象方法，由子类实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本方法 - 钩子方法，提供默认实现，子类可以选择性重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Default hook operation 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Concrete operation 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写钩子方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Customized hook operation 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>看起来钩子方法和具体方法好像没啥区别，应该是用处不太一样？</p></blockquote><h4 id="示例-9">示例</h4><p>**银行业务办理流程。**在银行办理业务时，一般都包含几个基本步骤，首先需要取号排队，然后办理具体业务，最后需要对银行工作人员进行评分。无论具体业务是取款、存款还是转账，其基本流程都一样。现使用模板方法模式模拟银行业务办理流程。</p> <img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/14.png" alt="img" style="zoom:33%;"><p>**数据库操作模板。**对数据库的操作一般包括连接、打开、使用、关闭等步骤，<strong>在数据库操作模板类中我们定义了connDB()、openDB()、useDB()、closeDB()四个方法分别对应这四个步骤</strong>。对于不同类型的数据库（如SQL Server和Oracle），其操作步骤都一致，只是连接数据库connDB()方法有所区别，现使用模板方法模式对其进行设计。</p> <img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/15.png" alt="img" style="zoom:33%;"><h4 id="优点-9">优点</h4><ul><li>模板方法模式在一个类中<strong>抽象地定义算法</strong>，而由它的子类实现细节的处理。</li><li>模板方法模式是一种<strong>代码复用</strong>的基本技术。</li><li>模板方法模式导致一种<strong>反向</strong>的控制结构，通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，符合“<strong>开闭原则”</strong>。</li></ul><h4 id="缺点-8">缺点</h4><p>每个不同的实现都需要定义一个子类，这会导致<strong>类的个数增加</strong>，系统更加庞大，设计也更加抽象，但是更加符合“<strong>单一职责原则</strong>”，使得类的内聚性得以提高。</p><h4 id="适用环境">适用环境</h4><ul><li>一次性实现一个算法的不变的部分，并将<strong>可变的行为留给子类来实现</strong>。</li><li><strong>各子类中公共的行为应被提取出来并集中到一个公共父类</strong>中以避免代码重复。</li><li><strong>对一些复杂的算法进行分割</strong>，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。</li><li>控制<strong>子类的扩展</strong></li></ul><h4 id="模式应用-5">模式应用</h4><ol><li><p>模板方法模式广泛应用于框架设计（如Spring，Struts等）中，<strong>以确保父类控制处理流程的逻辑顺序</strong>（如框架的初始化）。</p></li><li><p>Java单元测试工具JUnit中的TestCase类的设计</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runBare</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    setUp();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runTest();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">        tearDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="模式扩展-8">模式扩展</h4><p>关于继承的讨论</p><ol><li>模板方法模式鼓励我们<strong>恰当使用继承</strong>，此模式可以用来改写一些拥有相同功能的相关类，<strong>将可复用的一般性的行为代码移到父类里面</strong>，而将特殊化的行为代码移到子类里面。<strong>模板方法模式就是体现继承优势的模式之一</strong>。</li></ol><p>好莱坞原则</p><ol><li>在模板方法模式中，子类不显式调用父类的方法，而是通过覆盖父类的方法来实现某些具体的业务逻辑，<strong>父类控制对子类的调用</strong>，这种机制被称为<strong>好莱坞原则</strong>(Hollywood Principle)，好莱坞原则的定义为：“<strong>不要给我们打电话，我们会给你打电话(Don‘t call us, we’ll call you)</strong>”。</li><li>在模板方法模式中，好莱坞原则体现在：<u><strong>子类不需要调用父类，而通过父类来调用子类，将某些步骤的实现写在子类中，由父类来控制整个过程。</strong></u></li></ol><p>钩子方法的使用</p><ol><li>钩子方法的引入使得子类可以控制父类的行为。</li><li>最简单的钩子方法就是<strong>空方法</strong>，<strong>或者在钩子方法中定义一个默认的实现</strong>，如果子类不覆盖钩子方法，则执行父类的默认实现代码。</li><li>比较复杂一点的钩子方法<strong>可以对其他方法进行约束</strong>，这种钩子方法通常返回一个boolean类型，即返回true或false，用来判断是否执行某一个基本方法。（挂钩方法？）</li></ol><h3 id="Command-Pattern（对象模式-行为型模式）">Command Pattern（对象模式+行为型模式）</h3><p>模式动机：<u><strong>发送者和接收者完全解耦（请求和执行解耦</strong></u>），invoker只知道发送命令，<strong>不需要知道如何完成命令</strong></p><p><strong>将一个请求封装为一个对象</strong>，从而使我们可用<strong>不同的请求对客户进行参数化</strong>；<strong>对请求排队或者记录请求日志，以及支持可撤销的操作</strong>。</p><p>别名为动作(Action)模式或事务(Transaction)模式。</p><ul><li>Command 抽象命令类</li><li>ConcreteCommand 具体命令类</li><li>Invoker 调用者</li><li>Receiver 接收者</li><li>Client 客户类</li></ul><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1719069805511-103.png" alt="img" style="zoom: 33%;"> <blockquote><p>Client和ConcreteCommand之间的关联是因为在创建Command的时候需要把Receiver给它</p><p>invoker下达指令执行某个Command，然后command利用持有的receiver去执行，执行调用的是receiver的一些action</p></blockquote> <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Command</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Invoker</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="分析-7">分析</h4><ol><li>命令模式的本质是<strong>对命令进行封装</strong>，<strong>将发出命令的责任和执行命令的责任分割开</strong>。</li><li>每一个命令都是一个操作：<strong>请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作</strong>。</li><li>命令模式允许请求的一方和接收的一方独立开来，<strong>使得请求的一方不必知道接收请求的一方的接口</strong>，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li><li>命令模式<strong>使请求本身成为一个对象</strong>，这个对象和其他对象一样可以被存储和传递。</li><li>命令模式的关键在于<strong>引入了抽象命令接口</strong>，且<strong>发送者针对抽象命令接口编程</strong>，只有实现了抽象命令接口的<strong>具体命令才能与接收者相关联</strong>。</li></ol><h4 id="顺序图（有助理解）">顺序图（有助理解）</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833940411-4fcf464e-055e-4e6f-97ae-bc587a308e24.png" alt="img"></p><h4 id="示例-10">示例</h4><p><strong>电视机遥控器</strong>。电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。显然，电视机遥控器就是一个典型的命令模式应用实例。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833940442-a23288b5-0749-4543-829a-c424ef88e47a.webp" alt="img"></p><p><strong>功能键设置</strong>。为了用户使用方便，某系统提供了一系列功能键，用户可以自定义功能键的功能，如功能键FunctionButton可以用于退出系统(SystemExitClass)，也可以用于打开帮助界面(DisplayHelpClass)。用户可以通过修改配置文件来改变功能键的用途，现使用命令模式来设计该系统，使得功能键类与功能类之间解耦，相同的功能键可以对应不同的功能。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833940484-57a09064-a6b5-40db-91f5-7b7c4af283e5.webp" alt="img"></p><h4 id="优点-10"><strong>优点</strong></h4><ol><li>降低系统耦合度</li><li><strong>新的命令可以很容易地加入到系统中</strong></li><li>可以比较容易地设计一个<strong>命令队列</strong>和<strong>宏命令</strong></li><li><u><strong>可以方便地实现对请求的Undo和Redo</strong></u></li></ol><h4 id="缺点-9"><strong>缺点</strong></h4><p>导致系统有过多的<strong>具体命令类</strong>。</p><h4 id="模式适用">模式适用</h4><p>将请求调用者和请求接收者解耦</p><ol><li><strong>需要在不同的时间指定请求、将请求排队和执行请求</strong></li><li><strong>需要支持命令的撤销操作和回复操作</strong></li><li><strong>需要将一组操作组合在一起</strong></li></ol><h4 id="撤销操作的实现">撤销操作的实现</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833940772-87e3074c-71a8-4c05-8a05-ad071ec322fe.webp" alt="img"></p><blockquote><p>在Command的抽象和实现里，加个undo就行了，执行相反/撤销操作</p></blockquote><h4 id="宏命令">宏命令</h4><ol><li>宏命令又称为<strong>组合命令</strong>，它是<strong>命令模式和组合模式</strong>联用的产物。</li><li>宏命令也是一个具体命令，不过它包含了对其他命令对象的引用，<strong>在调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法</strong>，一个宏命令的成员对象可以是简单命令，还可以继续是宏命令。<u><strong>执行一个宏命令将执行多个具体命令，从而实现对命令的批处理。</strong></u></li></ol><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833940830-d4632cf6-d13e-4ab8-9851-0c0e3d0242fe.webp" alt="img"></p><blockquote><p>Composite Command就用不着关联Receiver了</p></blockquote><h3 id="Mediator-Pattern（对象模式-行为型模式）">Mediator Pattern（对象模式+行为型模式）</h3><h4 id="模式动机">模式动机</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711593299503-b79ce465-921e-4b7d-9096-3f9bac55bd58.webp" alt="img"></p><p>在用户与用户直接聊天的设计方案中，<strong>用户对象之间存在很强的关联性</strong>，将导致系统出现如下问题：</p><ol><li><strong>系统结构复杂</strong>：对象之间存在大量的相互关联和调用，若有一个对象发生变化，则需要跟踪和该对象关联的其他所有对象，并进行适当处理。</li><li><strong>对象可重用性差</strong>：由于一个对象和其他对象具有很强的关联，若没有其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现出来更像一个不可分割的整体，职责较为混乱。</li><li><strong>系统扩展性低</strong>：增加一个新的对象需要在原有相关对象上增加引用，增加新的引用关系也需要调整原有对象，系统耦合度很高，对象操作很不灵活，扩展性差。</li></ol><p>根据<strong>SRP</strong>，我们<strong>应该尽量将对象细化，使其只负责或呈现单一的职责</strong>。</p><p><u>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用，<strong>为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式</strong>，这就是中介者模式的模式动机。</u></p><h4 id="模式定义">模式定义</h4><p>用一个中介对象来<strong>封装一系列的对象交互</strong>，中介者使各对象不需要显式地相互引用，从而<strong>使其耦合松散</strong>，而且<strong>可以独立地改变它们之间的交互</strong>。</p><p>中介者模式又称为<strong>调停者模式</strong>，它是一种<strong>对象行为型模式</strong></p><h4 id="模式结构">模式结构</h4><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2021-Software-System-Design/img/lec06/9.png"><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711593299490-4f71cd9a-cbac-4ac9-b2e5-a73d6654c443.png" alt="img"></a></p><p>中介者模式包含如下角色：</p><ol><li>Mediator: 抽象中介者</li><li>ConcreteMediator: 具体中介者</li><li>Colleague: 抽象同事类</li><li>ConcreteColleague: 具体同事类</li></ol><h4 id="模式分析-2">模式分析</h4><p>中介者模式可以使对象之间的关系数量急剧减少：</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711593299556-bb181fdf-2d4c-48a1-9e5f-93f52b6833c0-1719107151987-8.webp" alt="img"></p><p>中介者承担两方面的职责：</p><ol><li><strong>中转作用（结构性）</strong>：通信时通过Mediator进行中转。该中转作用属于中介者<strong>在结构上的支持</strong>。</li><li><strong>协调作用（行为性）</strong>：中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者<strong>在行为上的支持</strong>。</li></ol><h4 id="典型代码">典型代码</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;Colleague&gt; colleagues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Colleague colleague)</span> &#123;</span><br><span class="line">        colleagues.add(colleague);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 示例操作，调用第一个同事的方法1</span></span><br><span class="line">        <span class="keyword">if</span> (!colleagues.isEmpty()) &#123;</span><br><span class="line">            colleagues.get(<span class="number">0</span>).method1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Colleague</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteColleague</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteColleague</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        mediator.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="示例-11">示例</h4><p>**虚拟聊天室。**某论坛系统欲增加一个虚拟聊天室，允许论坛会员通过该聊天室进行信息交流，普通会员(CommonMember)可以给其他会员发送文本信息，钻石会员(DiamondMember)既可以给其他会员发送文本信息，还可以发送图片信息。该聊天室可以对不雅字符进行过滤，如“日”等字符；还可以对发送的图片大小进行控制。用中介者模式设计该虚拟聊天室。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711593299791-d550b3c7-b9cf-4ff7-8f68-728600793888.webp" alt="img"></p><blockquote><p>注意ChatGroup的sentText和Member的sendText参数不一样（多一个from），这就是中介者式的关键了，题目中的权限控制的话直接在各自的具体类做就行了</p></blockquote><h4 id="优点-11">优点</h4><ul><li>简化了对象之间的交互</li><li>将各同事解耦</li><li>减少子类生成</li><li>可以简化各同事类的设计和实现</li></ul><h4 id="缺点-10">缺点</h4><p>在具体中介者类中包含了同事之间的交互细节，<strong>可能会导致具体中介者类非常复杂</strong>，<strong>使得系统难以维护。</strong></p><h4 id="适用环境-2">适用环境</h4><ol><li>对象之间存在复杂的引用关系</li><li><strong>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致</strong>难以复用该对象**。**</li><li><strong>想通过一个中间类来封装多个类的行为，又不想生成太多子类</strong>。改变行为可以增加新的中介者类。</li></ol><h4 id="应用">应用</h4><ol><li>事件驱动类（GUI组件之间的交互）</li><li>MVC - <strong>Controller作为一种中介者</strong><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1719108264357-13.jpeg" alt="img"></li></ol><h4 id="模式扩展-9">模式扩展</h4><p><strong>1.中介者模式与迪米特法则</strong></p><p>将系统中有关的对象所引用的其他对象数目减少到最少，<strong>因此，中介者模式就是迪米特法则的一个典型应用。</strong></p><p><strong>2.中介者模式与GUI开发</strong></p><p>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。</p><p>对于这些复杂的交互关系，有时候我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，<strong>这也是中介者模式的常见应用之一。</strong></p><h3 id="Observer-Pattern（对象模式-行为型模式）">Observer Pattern（对象模式+行为型模式）</h3><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712038561127-523f525d-1560-4b07-8af5-c4cbbb70fcb4.webp" alt="image.png"></p><p>建立一种<strong>对象与对象之间的依赖关系</strong>，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。</p><ol><li>发生改变的对象称为<strong>观察目标</strong></li><li>被通知的对象称为<strong>观察者</strong></li></ol><p>一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，<strong>可以根据需要增加和删除观察者，使得系统更易于扩展</strong>，这就是观察者模式的模式动机。</p><h4 id="定义-9">定义</h4><p><u>观察者模式(Observer Pattern)：定义对象间的一种<strong>一对多依赖关系</strong>，使得<strong>每当一个对象状态发生改变</strong>时，其<strong>相关依赖对象皆得到通知并被自动更新</strong>。</u></p><p>观察者模式又叫做<strong>发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式</strong>。观察者模式是一种<strong>对象行为型</strong>模式。</p><ul><li><strong>publisher, subscriber这种其实用的更多</strong></li></ul><h4 id="模式结构-2">模式结构</h4><ol><li>Observer抽象观察者</li><li>ConcreteObserver具体观察者</li><li>Subject抽象主题：目标，会拥有一个<strong>observers列表，方法上会有比如attach,detach,notify等</strong></li><li>ConcreteSubject具体主题</li></ol><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711593298953-e2237678-5f74-42a2-af4e-f128e51610f2.webp" alt="img"></p><ol><li><p>一般说抽象，不区分抽象类或者抽象接口，但在观察者模式，明确区分了<strong>目标对象是抽象类，观察者是抽象接口</strong>，为什么？</p><ul><li>对于Subject类，可以复用attach和detach的实现。类承担了通信职责和数据职责。</li><li>对于Observer类，update的方法都一样，数据观察是通用的。其实只有一个通信职责，所以接口就差不多了，没必要抽象类？<ul><li>个人感觉还是主要出于java不能多继承的考虑…，设计成接口更灵活的去implement</li></ul></li><li>更好的方法是，<strong>subject和observer都声明成抽象接口</strong>。因为通信职责和本来的职责正交，可以分解。</li></ul></li><li><p><strong>观察者对象其实持有目标对象的引用（图上没画，可见后面具体代码）</strong>，目的是什么？</p><ul><li>对于observer来说，是否监听应该由observer决定（调用attach和detach）。</li><li>不能称作对subject的依赖，这个持有引用是由观察者模式决定的。</li></ul></li></ol><h4 id="松耦合">松耦合</h4><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712040525216-cd5f005e-26ca-40b7-a73b-c84539ea317c.png" alt="img" style="zoom:50%;"> <p>松耦合不是<strong>依赖倒转原则</strong>，而是<strong>最小知识原则</strong></p><p><strong>而依赖倒置原则则是说，高层模块不应该依赖低层模块，两者都应该依赖抽象。</strong></p><p><strong>因为依赖倒转是一方具体一方抽象？而这里是两边都是松耦合</strong></p><h4 id="示例-12">示例</h4><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1712041476229-a86fd07b-649a-4800-8288-cd32a20b0c74.png" alt="image.png"></p><p><strong>代码</strong></p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/image-20240623104518370.png" alt="image-20240623104518370" style="zoom:50%;"> <blockquote><p>如上文所说，具体观察者类持有对于Subject的引用，因为其实Observer这边才是主导的一端，具有主动性</p></blockquote><h4 id="优点-12">优点</h4><ul><li><strong>实现表示层和数据逻辑层的分离</strong>，使得可以有不同的表示层作为具体观察者角色</li><li>在观察目标和观察者之间建立一个<strong>抽象的耦合</strong>（松耦合）</li><li><strong>支持广播通信</strong></li><li><strong>符合开闭原则</strong></li></ul><h4 id="缺点-11">缺点</h4><ul><li>观察者太多，<strong>通知所有观察者耗时长</strong></li><li>如果有循环依赖-&gt;可能会有系统崩溃的风险</li><li>观察者模式<strong>没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的</strong>，而仅仅只是知道观察目标发生了变化。</li></ul><h4 id="模式适用-2">模式适用</h4><p>一个改变-&gt;多个改变，不知具体有多少对象，不知道是谁</p><p>需要在系统中创建一个触发链</p><h4 id="Java语言提供的对观察者模式的支持">Java语言提供的对观察者模式的支持</h4><p>在JDK的java.util包中，提供了<strong>Observable类</strong>以及<strong>Observer接口</strong>，它们构成了Java语言对观察者模式的支持。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/asynccode.png" alt="img"></p><h4 id="MVC模式">MVC模式</h4><p>算是中介者+观察者？（思想上算是结合了</p><ul><li>模型Model：目标</li><li>视图View ：观察者</li><li>控制器Controller：中介者</li></ul><p>当模型层的数据发生改变时，视图层将自动改变其显示内容。</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/asynccode.png" alt="img"></p><h4 id="push-pull模式">push/pull模式</h4><p>当数据量差不多的时候，使用push模式。subject把数据都传给observer。</p><p>当数据需要定制化更新的时候，使用pull模式，subject告知更新，observer自己update所需属性。</p><p>**观察者模式又分为两种模式：push和pull。**push是指suject在状态变化时将所有的状态信息都发给observer，pull则是suject通知observer更新时，observer获取自己感兴趣的状态。</p><p>两种模式在实现上的区别</p><ol><li>push模式下，observer的update方法接收的是状态信息</li><li>pull模式下，update方法接收的是suject对象，这种情况下，suject须提供状态信息的get方法，让observer可以获取自己感兴趣的信息。</li></ol><p>两种模式的优劣</p><ol><li><strong>push模式要求suject必须了解observer需要的状态</strong>，pull则是observer按需获取</li><li>push模式下observer的update方法的参数是具体的状态信息，发生变化时必须要重写update方法，pull模式则是将suject对象本身传给update，是最大的参数集合。</li></ol><h3 id="State-Pattern（对象模式-行为型模式）">State Pattern（对象模式+行为型模式）</h3><p>一个对象的<strong>行为</strong>取决于一个或多个<strong>动态变化的属性</strong>，这样的属性叫作<strong>状态</strong>，这样的对象叫做有状态的(stateful)对象。</p><p>状态模式的<strong>关键</strong>是<strong>引入了一个抽象类来专门表示对象的状态</strong>，这个类我们叫做<strong>抽象状态类</strong>，而对象的每一种具体状态类都继承了该类，并在<strong>不同具体状态类中实现了不同状态的行为，包括各种状态之间的转换</strong>。</p><p>状态是最可能变化的地方，需要做一个封装。</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833939854-b1b3b886-c52a-43e4-9344-584f675ff244.webp" alt="img" style="zoom:50%;"> <p>状态模式包含如下角色</p><ul><li>Context: 环境类</li><li>State: 抽象状态类</li><li>ConcreteState: 具体状态类</li></ul><p><strong>在结构上策略模式和状态模式是一致的，但是在使用上是很不同的</strong></p><ul><li>Context是状态模式关联的上下文环境</li><li>策略模式是封装好的，而状态模式为了追求对用户透明则牺牲了开闭原则（状态的切换在Context中无法避免修改</li></ul><p><strong>具体耦合</strong></p><blockquote><p>继承是强耦合</p></blockquote><p>状态模式存在具体耦合，状态切换写在环境类中比较好，因为都有具体耦合，都写在一个地方比较好，不至于太分散。因此<strong>状态模式不能完全支持OCP</strong>。因为产生了具体耦合，存在从一个状态类转变到另一个状态类，就必定会有具体耦合</p><p><strong>房间入住示例</strong></p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833939847-80f82152-2834-4b08-8e2a-dc1fd0346951.webp" alt="img" style="zoom: 33%;"> <blockquote><p><a class="link" href="https://refactoringguru.cn/design-patterns/state">https://refactoringguru.cn/design-patterns/state <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>房间类里面的比如预订等操作应该是调用状态的</p><p>state.预订()</p></blockquote><p><strong>论坛用户等级示例</strong>（感觉有点乱，不看也罢）</p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1710833939852-476de22a-1fc1-4e5c-9ccd-0160b8f0acd8.webp" alt="img" style="zoom: 33%;"> <blockquote><p>上图的checkState位置其实可以放在account？</p></blockquote><p>同时注意到环境类ForumAccount和状态类AbstractState是相互持有引用的，为什么不合并为一个类？将设置状态的职责抽离出来，更符合状态管理类的单一职责。</p><p><strong>状态的转换是最重要的，什么时候由环境类转换，什么时候由状态类转换？</strong></p><p>由属性（积分）转变引发的转换vs由行为（入住退房）引发的转换：属性由环境类承担</p><p>所有类的转换行为一样vs与现在处于哪个状态有关</p><h4 id="优点-13"><strong>优点</strong></h4><ol><li><p><strong>封装了转换原则</strong></p></li><li><p><strong>枚举了可能的状态</strong></p></li><li><p><strong>可以方便地增加新的状态</strong>，只需要改变对象状态即可改变对象的行为。</p><blockquote><p>新增状态有可能破坏OCP，因为状态转换的代码会要变</p></blockquote></li><li><p><strong>状态转换逻辑与状态对象合成一体</strong>，而不是某一个巨大的条件语句块。</p></li><li><p><strong>让多个环境对象共享状态对象</strong>（多个房间都是预定的状态），从而减少系统中对象的个数。</p></li></ol><h4 id="缺点-12"><strong>缺点</strong></h4><ol><li>状态模式的使用必然会<strong>增加系统类和对象的个数</strong>。</li><li>状态模式的结构与实现都较为复杂，<strong>如果使用不当将导致程序结构和代码的混乱</strong>。</li><li><strong>对”开闭原则“的支持并不太好</strong>，产生了具体耦合（在具体对象中切换）</li></ol><h4 id="适用环境-3"><strong>适用环境</strong></h4><ol><li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为</li><li><strong>代码中包含大量与对象状态有关的条件语句</strong></li></ol><blockquote><p>如工作流、游戏</p></blockquote><h4 id="状态模式扩展">状态模式扩展</h4><ol><li><strong>共享状态</strong>：在有些情况下<strong>多个环境对象需要共享同一个状态</strong>，如果希望在系统中实现多个环境对象实例共享一个或多个状态对象，那么需要将这些状态对象定义为<strong>环境的静态成员对象</strong></li><li>**简单状态模式：**状态都相互独立，**状态之间无须进行转换（额…）**的状态模式。它遵循“开闭原则”，可以在客户端实例化状态类，可以将具体状态类写入配置文件。</li><li>**可切换状态的状态模式（大多数状态模式）：**在具体状态类内部需要调用环境类Context的setState()方法进行状态的转换操作。</li></ol><h3 id="Strategy-Pattern（对象模式-行为型模式）">Strategy Pattern（对象模式+行为型模式）</h3><p>别名：<strong>Policy</strong> Pattern</p><p>定义了一系列算法或策略，并将每个算法<strong>封装</strong>在独立的类中，使得它们可以<strong>互相替换</strong>。<u><strong>一个类的行为或其算法可以在运行时更改。</strong></u></p><p>引入示例的解决：</p><p>想让鸭子飞起来……（添加fly的方法），可是鸭子会飞，橡皮鸭和木鸭子不会飞：</p><ol><li>鸭子抽象类实现fly，不会飞的自己覆盖掉</li><li>实现flyable的接口，会飞的自己接口</li></ol><p><strong>单独设计行为类，动态修改鸭子的行为</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合鸭子的行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> performQuack&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>用到的设计原则：</strong></p><p>单一职责 、依赖倒转、合成复用</p><p><strong>启发：</strong></p><ol><li>所有子类都一样，在父类中实现</li><li>子类都不一样，在子类中实现</li><li>部分子类一样，在接口中实现</li></ol><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/06/23/1711355091509-162e075f-83ff-4508-895c-861cff4f7979.webp" alt="img" style="zoom:50%;"> <p>环境类（Context）：维护一个指向策略对象的引用。</p><p>抽象策略类（Strategy）：定义所有支持的算法的公共接口。</p><p>具体策略类（Concrete Strategy）：实现抽象策略定义的接口，提供具体的算法实现。</p><h4 id="Applicability-适用性">Applicability-适用性</h4><ol><li>许多相关的类仅在<strong>行为</strong>上有所不同，策略提供了一种使用多种行为之一配置类的方法。</li><li>您需要算法的不同变体。**例如，您可能定义了反映不同空间/时间权衡的算法。将这些变体实现为算法的类层次结构时，可以使用策略。**往往实现的是相同的行为，但是是不同的算法</li><li>一种算法使用客户端不应该知道的数据。<strong>使用策略模式可避免暴露复杂的、特定于算法的数据结构</strong></li><li>**一个类定义了许多行为，这些行为在其操作中显示为多个条件语句。**代替许多条件，将相关的条件分支移到他们自己的策略类中。</li></ol><h4 id="Consequences-结果">Consequences-结果</h4><p>一个策略模式的潜在缺陷：客户必须意识到不同的策略。即<strong>客户在选择合适的策略之前必须先了解策略的不同</strong>，不然客户可能会遇到实现问题。</p><ul><li><strong>用户需要去了解实现的细节</strong></li><li>其实是破坏了封装</li></ul><p><strong>模式一般都会有的缺点：</strong></p><ol><li>增加设计的复杂度和增加类的个数（增加辅助类）</li></ol><h2 id="一些疑惑">一些疑惑</h2><ol><li><p>为什么工厂方法模式是类创建型，抽象工厂模式就是对象创建型了</p><p>A：个人理解是工厂方法模式通过定义一个创建对象的接口，让子类决定实例化哪一个类。其重点在于让子类来决定创建哪种具体类型的对象，因此更强调继承关系，<strong>因此是类模式</strong>；抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。其重点在于产品族的创建，通过组合多个产品对象来实现不同的品牌或系列，<strong>因此是对象模式。</strong></p></li></ol>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="期末复习" scheme="https://bblog.031105.xyz/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    <category term="软件系统设计" scheme="https://bblog.031105.xyz/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="软件系统设计" scheme="https://bblog.031105.xyz/tags/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>24-Spring-数据库开发期末复习</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/24-spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/24-spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html</id>
    <published>2024-06-15T15:21:51.000Z</published>
    <updated>2024-09-30T12:51:33.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>24 Spring 数据库开发期末复习</p><p>ChrisDing1105 version 1.4</p><p>Salute to the Legendary Software Workers <a class="link" href="https://github.com/SEBugMaker">SEBugMaker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link" href="https://github.com/ZUOHS">ZUOHS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link" href="https://github.com/huangwei021230">huangwei021230 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link" href="https://github.com/quas-modo">quas-modo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>文字版复习录音转写：<a class="link" href="https://d412hlgjpp.feishu.cn/docx/YsHfdpdljomhApx3kOlcutVQnRf?from=from_copylink">https://d412hlgjpp.feishu.cn/docx/YsHfdpdljomhApx3kOlcutVQnRf?from=from_copylink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="题型">题型</h2><h3 id="难点：三道SQL">难点：三道SQL</h3><h4 id="时间、字符串、数值三选二">时间、字符串、数值三选二</h4><p>代码行数不会超过15-20</p><p>关键是要记得常见的函数:replace等</p><p>数值要考虑空值(平均值) COALESCE 中位数、众数不太好考</p><p>日期要知道使用索引有三种写法(前一天后一天范围怎么写、算日期之间的差 practice on class7.7)</p><p>标注用的mysql还是oracle</p><h4 id="会考一个递归-withas-树状结构自顶向下查询">会考一个递归(withas) 树状结构自顶向下查询</h4><p>起始体，union all，递归体，合并成一个视图的形式，最后写一句sql</p><h4 id="有一道可能会使用外连接">有一道可能会使用外连接</h4><p>会把外连接和那几个sql的计算变量融在一起</p><p>结构合理、关键字合理，函数用对都有分，细节对了全分</p><p>实在不会就写select from，不要空</p><h3 id="索引结构一定会考">索引结构一定会考</h3><p>n n+1个link</p><p>B树？对枝叶节点插入，如果满了会造成分裂，删除可能造成合并 在叶节点和内部节点不一样，是什么逻辑，怎么影响上面的节点(那两张图)</p><p>讲过例子，看下PPT</p><h3 id="日志">日志</h3><p>redo undo 怎么完成、区别，怎么实现(物理组织的PPT里写清楚了)</p><h3 id="分区分表分库">分区分表分库</h3><p>也是在物理组织部分</p><p>原因是什么，能够解决什么问题，会遇到什么问题（又怎么解决）</p><h3 id="SQL解释器：基于成本和基于规则">SQL解释器：基于成本和基于规则</h3><p>可能会考一个，关于SQL基于成本呢解释器的成本计算，成本优化？</p><p>（知道sql优化的基本逻辑）怎么计算优化路径的成本呢</p><p>等价变化，算出多个路径，估算每个路径的成本，哪些估算哪些是实际的，，有什么问题，为什么要改写sql</p><h3 id="送分题">送分题?</h3><p>可能还会再出一道题，自己思考，有什么建议和想法，纯粹的主观题</p><blockquote><p>以下为复习部分</p></blockquote><h2 id="SQL">SQL</h2><h3 id="聚合函数">聚合函数</h3><p>注意：当使用聚合函数（如 MAX, SUM, AVG 等）时，所有非聚合字段必须出现在 GROUP BY ⼦句中。否则，SQL 引擎无法确定如何处理这些字段。</p><p>Select后面接的结果集字段只有两种</p><ul><li>要么是group by出现的字段</li><li>要么是group by后出现的字段+聚合函数的组合</li></ul><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616154704762.png" alt="image-20240616154704762"></p><blockquote><p>但实际运行好像无论MySQL5.7还是8.0也能选没group的</p></blockquote><h3 id="NULL如何成组">NULL如何成组?</h3><p>利用coalesce函数</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616155109877.png" alt="image-20240616155109877"></p><h3 id="coalesce函数">coalesce函数</h3><p><code>COALESCE</code> 是 SQL 中的一个函数，它的作用是返回第一个非空表达式的结果。如果所有的表达式都是空（NULL），则 <code>COALESCE</code> 函数返回 NULL。这个函数常用于处理可能为 NULL 的数据列，确保查询结果中不会出现 NULL 值，而是使用一个默认的值。</p><p>语法：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COALESCE</span>(expression1, expression2, ..., expressionN)</span><br></pre></td></tr></table></figure></div><p>参数：</p><p><code>expression1, expression2, ..., expressionN</code>：可以是列名或值，<code>COALESCE</code> 会从左到右检查这些表达式，返回第一个非 NULL 的结果。</p><h3 id="字符串">字符串</h3><h4 id="substr-完整str-pos-长度">substr(完整str, pos, 长度)</h4><p>Q：把EMP表中的ENAME=KING的字符串拆开显示为4行，每行一个字符</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(e.ename, iter.pos, <span class="number">1</span>) <span class="keyword">as</span> C</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>) e,</span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">as</span> pos <span class="keyword">from</span> t10) iter</span><br><span class="line"><span class="keyword">where</span> iter.pos <span class="operator">&lt;=</span> length(e.ename)</span><br></pre></td></tr></table></figure></div><p><strong>t10表</strong></p><p><code>t10</code> 表：这是一个特殊的表，通常在 Oracle 数据库中用来生成一个从 1 到 10 的数字序列。这个表的每一行都有一个 <code>id</code> 列，包含一个数字，用于表示序列中的一个位置。</p><blockquote><p>在 MySQL 数据库中，并没有像 Oracle 中的 <code>t10</code> 表这样的内置表来直接生成数字序列。不过，MySQL 可以通过其他方式来生成数字序列，例如使用递归的公用表表达式（Common Table Expressions, CTE）或者临时表。</p><p>以下是使用递归 CTE 生成数字序列的一个例子：</p><div class="highlight-container" data-rel="Pgsql"><figure class="iseeu highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复制<span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> num(n) <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> n + <span class="number">1</span> <span class="keyword">FROM</span> num <span class="keyword">WHERE</span> n &lt; <span class="number">10</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> num;</span><br></pre></td></tr></table></figure></div><p>这个递归 CTE 会生成从 1 到 10 的数字序列。你可以调整 <code>n &lt; 10</code> 的条件来改变生成的序列长度。</p></blockquote><h4 id="replace函数">replace函数</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(string, <span class="keyword">search</span>, replace)</span><br></pre></td></tr></table></figure></div><p>参数（会替换所有的）</p><ul><li><code>string</code>：要搜索和替换的原始字符串。</li><li><code>search</code>：要在 <code>string</code> 中搜索的子字符串。</li><li><code>replace</code>：用于替换 <code>search</code> 子字符串的新字符串。</li></ul><p><strong>使用 <code>REPLACE</code> 统计字符出现次数</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (length(<span class="string">&#x27;10,CLARK,MANAGER&#x27;</span>) <span class="operator">-</span> length(REPLACE(<span class="string">&#x27;10,CLARK,MANAGER&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>))) <span class="operator">/</span> length(<span class="string">&#x27;,&#x27;</span>) <span class="keyword">as</span> cnt;</span><br></pre></td></tr></table></figure></div><p>思路：把找到的字符串换成空，再计算长度差，注意除以本身长度</p><h4 id="translate函数">translate函数</h4><p>感觉就是强化版replace</p><p><strong>语法（Oracle）：</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TRANSLATE</span>(string, from_string, to_string)</span><br></pre></td></tr></table></figure></div><p><strong>参数：</strong></p><ul><li><code>string</code>：要进行字符转换的原始字符串。</li><li><code>from_string</code>：一个包含要被替换的字符的字符串。</li><li><code>to_string</code>：一个包含用于替换的字符的字符串，顺序应与 <code>from_string</code> 中的字符顺序相对应。</li></ul><p><strong>删除不想要的字符</strong></p><p>Oracle才有translate</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> replace(<span class="built_in">translate</span>(ename, <span class="string">&#x27;AEIOU&#x27;</span>,<span class="string">&#x27;aaaaa&#x27;</span>), <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> stripped1,</span><br><span class="line">       sal</span><br><span class="line">       replace(sal, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> stripped2 <span class="keyword">from</span> emp  </span><br></pre></td></tr></table></figure></div><p>先全换成某个字符，比如’a’，然后再删掉</p><h4 id="regexp-replace">regexp_replace</h4><p>分离数字和字符数据</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> data,</span><br><span class="line">    regexp_replace(ename, <span class="string">&#x27;[0-9]&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> characters</span><br><span class="line">    regexp_replace(ename, <span class="string">&#x27;[^0-9]&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> numbers</span><br><span class="line"><span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure></div><h4 id="regexp">regexp</h4><p>判断是否含有数字或字符</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> V</span><br><span class="line"><span class="keyword">where</span> ename regexp <span class="string">&#x27;[^0-9a-zA-Z]&#x27;</span> <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div><h4 id="rpad">rpad</h4><blockquote><p>Oracle/Postgre</p></blockquote><p><code>RPAD</code> 函数的语法如下：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPAD(string, length, pad_string)</span><br></pre></td></tr></table></figure></div><ul><li><code>string</code>：要填充的原始字符串。</li><li><code>length</code>：目标字符串的长度。</li><li><code>pad_string</code>：用来填充的字符串。</li></ul><p>Q：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> REPLACE(</span><br><span class="line">    REPLACE(</span><br><span class="line">        <span class="built_in">TRANSLATE</span>(REPLACE(<span class="string">&#x27;Stewie Griffin&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>), </span><br><span class="line">            <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>, </span><br><span class="line">            RPAD(<span class="string">&#x27;#&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;#&#x27;</span>)), <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;.&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure></div><p><code>Stewie Griffin</code> -&gt; <code>Stewie Griffin</code> -&gt; <code>S##### G######</code> -&gt; <code>S G</code> -&gt; <code>S.G</code> -&gt; <code>S.G.</code></p><h3 id="数值处理">数值处理</h3><h4 id="平均值（要考虑空值">平均值（要考虑空值</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(<span class="built_in">coalesce</span>(salary, <span class="number">0</span>)) <span class="keyword">as</span> average_score <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure></div><h4 id="累计求和-Running-Total">累计求和 Running Total</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, e.sal</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">sum</span>(d.sal) <span class="keyword">from</span> emp d</span><br><span class="line">    <span class="keyword">where</span> d.empno <span class="operator">&lt;=</span> e.empno) <span class="keyword">as</span> runnin_total</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></div><blockquote><p>没什么新的</p></blockquote><h4 id="条件语句-百分比">条件语句-百分比</h4><p><strong>IF</strong>（适合简单语句）</p><p>IF(condition, result_if_true, result_if_false)</p><p><strong>CASE WHEN</strong>（适合多条件）</p><p><code>CASE WHEN</code> 是一个通用的 SQL 语句，用于实现复杂的条件判断。它可以用于所有支持 SQL 的数据库，包括 MySQL、PostgreSQL、Oracle、SQL Server 等。</p><p><strong>语法</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> condition1 <span class="keyword">THEN</span> result1</span><br><span class="line">    <span class="keyword">WHEN</span> condition2 <span class="keyword">THEN</span> result2</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">ELSE</span> resultN</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div><p>计算部门编号为10的员工薪水总和占所有员工薪水总和的百分比。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    (<span class="built_in">SUM</span>(IF(deptno <span class="operator">=</span> <span class="number">10</span>, sal, <span class="number">0</span>)) <span class="operator">/</span> <span class="built_in">SUM</span>(sal)) <span class="operator">*</span> <span class="number">100</span> <span class="keyword">AS</span> pct</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure></div><h4 id="计算平均值时去掉最大值和最小值">计算平均值时去掉最大值和最小值</h4><p>注意最大最小可能不止一个，所以用not in</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp),</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><blockquote><p>Tag: 修改累计值 没看</p></blockquote><h3 id="日期处理">日期处理</h3><p><strong>需要知道算日期的差</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_add(hiredate, <span class="type">interval</span> <span class="number">-5</span> <span class="keyword">day</span>) <span class="keyword">as</span> hd_add_1D</span><br></pre></td></tr></table></figure></div><p><strong>相差的日期</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_diff(ward_hd, allen_hd)</span><br></pre></td></tr></table></figure></div><p><strong>依据特定时间单位检索数据</strong></p><p><strong>monthname，dayname</strong></p><p>MYSQL</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> MONTHNAME(hiredate) <span class="keyword">IN</span> (<span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;December&#x27;</span>)</span><br><span class="line">   <span class="keyword">OR</span> DAYNAME(hiredate) <span class="operator">=</span> <span class="string">&#x27;Tuesday&#x27;</span>;</span><br></pre></td></tr></table></figure></div><h3 id="Union">Union</h3><p>Union All + Distinct = Union</p><p>Union All不去重</p><blockquote><p>⼤体⽽⾔，使用union等同于针对union all的输出结果，再执⾏⼀次distinct操作</p></blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(ename, <span class="string">&#x27; &#x27;</span>, dname) <span class="keyword">AS</span> ename_and_dname, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.deptno <span class="operator">=</span> dept.deptno</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;----------&#x27;</span> <span class="keyword">AS</span> ename_and_dname, <span class="keyword">NULL</span> <span class="keyword">AS</span> deptno</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> dname <span class="keyword">AS</span> ename_and_dname, deptno</span><br><span class="line"><span class="keyword">FROM</span> dept;</span><br></pre></td></tr></table></figure></div><p>注意select选的两个要一样</p><h3 id="连接">连接</h3><p>join = inner join；left join = left outer join等</p><p>在 SQL 中，连接是用来结合两个或多个表的记录的一种机制。根据关联条件的不同，连接可以分为多种类型，主要包括内连接（INNER JOIN）、外连接（OUTER JOIN，具体又分为左外连接 LEFT JOIN、右外连接 RIGHT JOIN 和全外连接 FULL OUTER JOIN）以及交叉连接（CROSS JOIN）。下面详细解释每种连接类型，并给出示例。</p><h4 id="内连接（INNER-JOIN）">内连接（INNER JOIN）</h4><p><strong>内连接</strong>返回两个表中符合连接条件的记录。如果在一个表中的记录在另一个表中没有匹配，则这些记录不会出现在结果集中。</p><p><strong>示例</strong>：有两个表，一个是员工表 <code>employees</code>（包含员工编号 <code>eno</code> 和姓名 <code>ename</code>），另一个是部门表 <code>departments</code>（包含部门编号 <code>dno</code> 和部门名称 <code>dname</code>）。我们想找出所有员工及其所属部门的名称。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.ename, departments.dname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.dno <span class="operator">=</span> departments.dno;</span><br></pre></td></tr></table></figure></div><p>这个查询会返回所有存在于 <code>employees</code> 表和 <code>departments</code> 表中的匹配部门编号的员工姓名和部门名称。</p><h4 id="左外连接（LEFT-JOIN）">左外连接（LEFT JOIN）</h4><p><strong>左外连接</strong>返回左表（<code>LEFT JOIN</code> 左侧的表）的所有记录和右表中符合连接条件的记录。如果左表的记录在右表中没有匹配，则相关的右表列将返回 NULL。</p><p><strong>示例</strong>：使用上述的员工表和部门表，如果我们想列出所有员工及其可能的部门名称（即使某些员工没有部门信息）。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.ename, departments.dname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.dno <span class="operator">=</span> departments.dno;</span><br></pre></td></tr></table></figure></div><p>这个查询会返回所有员工的姓名，对于那些没有部门的员工，部门名称会显示为 NULL。</p><h4 id="右外连接（RIGHT-JOIN）">右外连接（RIGHT JOIN）</h4><p><strong>右外连接</strong>与左外连接相反，它返回右表（<code>RIGHT JOIN</code> 右侧的表）的所有记录和左表中符合连接条件的记录。如果右表的记录在左表中没有匹配，则相关的左表列将返回 NULL。</p><p><strong>示例</strong>：如果我们想要列出所有部门及其可能的员工名称（即使某些部门没有员工）。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.ename, departments.dname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.dno <span class="operator">=</span> departments.dno;</span><br></pre></td></tr></table></figure></div><p>这个查询会返回所有部门的名称，对于那些没有员工的部门，员工名称会显示为 NULL。</p><h4 id="全外连接（FULL-OUTER-JOIN）">全外连接（FULL OUTER JOIN）</h4><p><strong>全外连接</strong>返回左表和右表中的所有记录。如果左表的记录在右表中没有匹配，或右表的记录在左表中没有匹配，则相关的另一侧表列将返回 NULL。注意，并非所有的 SQL 数据库系统都支持全外连接。</p><p><strong>示例</strong>：列出所有员工和所有部门，不论它们是否有匹配。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.ename, departments.dname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.dno <span class="operator">=</span> departments.dno;</span><br></pre></td></tr></table></figure></div><h4 id="交叉连接（CROSS-JOIN）">交叉连接（CROSS JOIN）</h4><h4 id="交叉连接的语法">交叉连接的语法</h4><p>在SQL中，交叉连接的语法如下：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> table2;</span><br></pre></td></tr></table></figure></div><p><strong>或者可以用隐式的语法：</strong></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1, table2;</span><br></pre></td></tr></table></figure></div><p><strong>交叉连接</strong>产生左表和右表的笛卡尔积，每个左表的记录与右表的每个记录相组合。</p><p><strong>示例</strong>：如果我们想要列出员工和部门的所有可能组合。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.ename, departments.dname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure></div><p>这个查询将为每个员工与每个部门之间创建一个组合，不考虑他们之间是否有实际的关联。</p><h3 id="递归查询">递归查询</h3><blockquote><p>PPT 6.0 数据库设计</p><p>内含 树的三种实际实现：邻接模型、物化路径模型、嵌套集合模型</p><ol><li><p>邻接模型就像家庭树中的每个人都有一个“父亲”指向谁是他的父亲。每个节点都知道自己的父节点是谁，但不一定知道自己的子节点是谁。</p></li><li><p>物化路径模型就像每个分类都带有一张地图，指示它从根分类到当前分类的完整路径。</p><p>用相同的分类系统，这次每个分类记录路径：</p><table><thead><tr><th>id</th><th>name</th><th>path</th></tr></thead><tbody><tr><td>1</td><td>电子产品</td><td>/1</td></tr><tr><td>2</td><td>笔记本电脑</td><td>/1/2</td></tr><tr><td>3</td><td>手机</td><td>/1/3</td></tr><tr><td>4</td><td>摄像机</td><td>/1/4</td></tr><tr><td>5</td><td>配件</td><td>/1/2/5</td></tr></tbody></table></li><li><p>嵌套集合模型就像每个分类都有一个范围，表示它和它的所有子分类的范围。范围用两个数字表示：左值（lft）和右值（rgt）。</p><p>还是相同的分类系统：</p><table><thead><tr><th>id</th><th>name</th><th>lft</th><th>rgt</th></tr></thead><tbody><tr><td>1</td><td>电子产品</td><td>1</td><td>10</td></tr><tr><td>2</td><td>笔记本电脑</td><td>2</td><td>7</td></tr><tr><td>3</td><td>手机</td><td>8</td><td>9</td></tr><tr><td>4</td><td>摄像机</td><td>10</td><td>11</td></tr><tr><td>5</td><td>配件</td><td>3</td><td>4</td></tr></tbody></table><p>这里，<code>lft</code> 和 <code>rgt</code> 表示这个分类和它的子分类在树结构中的位置。</p></li></ol></blockquote><h4 id="with-as">with-as</h4><p><code>WITH</code> 语法（也称为公用表表达式，Common Table Expressions，<strong>CTE</strong>）在 SQL 中用于定义临时的结果集，这些结果集可以在单个查询的上下文中多次引用。它使复杂查询变得更清晰和更易于维护。下面是对 <code>WITH</code> 语法的详细解释和一些示例。</p><p>基本的 <code>WITH</code> 语法如下：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte_name <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 这里是子查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line">    <span class="keyword">FROM</span> table_name</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> cte_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></div><p>示例</p><p>假设有一个员工表 <code>emp</code>，我们想要计算每个部门的平均工资，然后找出平均工资高于特定值的部门。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> avg_salaries <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">AS</span> avg_sal</span><br><span class="line">    <span class="keyword">FROM</span> emp</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> deptno, avg_sal</span><br><span class="line"><span class="keyword">FROM</span> avg_salaries</span><br><span class="line"><span class="keyword">WHERE</span> avg_sal <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure></div><p>你可以定义多个 CTE，通过逗号分隔它们。</p><h4 id="递归-SQL-的语法">递归 SQL 的语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> cte_name (column_list) <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 初始查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> ...</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="comment">-- 递归查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> ...</span><br><span class="line">    <span class="keyword">FROM</span> cte_name</span><br><span class="line">    <span class="keyword">WHERE</span> ...</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 主查询</span></span><br><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> cte_name</span><br><span class="line"><span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure></div><blockquote><p>关于column_list</p><p>你的递归CTE的写法是正确的，即使没有显式地写出 <code>column_list</code>。在许多SQL数据库中， <code>column_list</code> 是可选的，如果你在初始查询和递归查询中明确了所选列，那么数据库系统会自动推断出列名。</p><p>不过，为了代码的可读性和维护性，显式地写出 <code>column_list</code> 会更好，特别是在列名较多或结构复杂的情况下。这可以帮助你和其他阅读代码的人更清楚地了解CTE的输出列结构。</p><p>你可以显式地写出 <code>column_list</code>，像这样：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> DepartmentHierarchy (dept_id, parent_dept_id, dept_name, level) <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 初始查询：选择顶级部门（没有父部门）作为起点</span></span><br><span class="line">    <span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, <span class="number">1</span> <span class="keyword">AS</span> level</span><br><span class="line">    <span class="keyword">FROM</span> Departments</span><br><span class="line">    <span class="keyword">WHERE</span> parent_dept_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 递归查询：连接上一级部门和当前部门</span></span><br><span class="line">    <span class="keyword">SELECT</span> d.dept_id, d.parent_dept_id, d.dept_name, dh.level <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> Departments d</span><br><span class="line">    <span class="keyword">JOIN</span> DepartmentHierarchy dh <span class="keyword">ON</span> d.parent_dept_id <span class="operator">=</span> dh.dept_id</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 主查询：查询所有部门及其层级关系</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, level</span><br><span class="line"><span class="keyword">FROM</span> DepartmentHierarchy</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> level, dept_id;</span><br></pre></td></tr></table></figure></div><p>这样写的好处是：</p><ol><li><strong>明确性</strong>：清楚地定义了CTE的输出列。</li><li><strong>一致性</strong>：确保初始查询和递归查询的列名一致。</li><li><strong>可读性</strong>：提高代码的可读性，使得其他人更容易理解。</li></ol><p>总结来说，虽然不显式写出 <code>column_list</code> 在大多数情况下也是正确的，但显式地写出它有助于提高代码的清晰度和可维护性。</p></blockquote><p><strong>示例</strong></p><p>假设我们有一个部门表 <code>Departments</code>，其结构如下：</p><table><thead><tr><th>dept_id</th><th>parent_dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>NULL</td><td>Corporate</td></tr><tr><td>2</td><td>1</td><td>Sales</td></tr><tr><td>3</td><td>1</td><td>HR</td></tr><tr><td>4</td><td>2</td><td>Domestic Sales</td></tr><tr><td>5</td><td>2</td><td>International Sales</td></tr><tr><td>6</td><td>3</td><td>Recruitment</td></tr><tr><td>7</td><td>3</td><td>Employee Relations</td></tr></tbody></table><p>希望查询所有部门及其层级关系</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> DepartmentHierarchy <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 初始查询：选择顶级部门（没有父部门）作为起点</span></span><br><span class="line">    <span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, <span class="number">1</span> <span class="keyword">AS</span> level</span><br><span class="line">    <span class="keyword">FROM</span> Departments</span><br><span class="line">    <span class="keyword">WHERE</span> parent_dept_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 递归查询：连接上一级部门和当前部门</span></span><br><span class="line">    <span class="keyword">SELECT</span> d.dept_id, d.parent_dept_id, d.dept_name, dh.level <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> Departments d</span><br><span class="line">    <span class="keyword">JOIN</span> DepartmentHierarchy dh <span class="keyword">ON</span> d.parent_dept_id <span class="operator">=</span> dh.dept_id</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 主查询：查询所有部门及其层级关系</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, level</span><br><span class="line"><span class="keyword">FROM</span> DepartmentHierarchy</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> level, dept_id;</span><br></pre></td></tr></table></figure></div><h4 id="关于递归查询的终止">关于递归查询的终止</h4><p>递归查询的结束条件由以下两部分决定：</p><ol><li><strong>递归查询部分的 <code>WHERE</code> 子句</strong>：用于控制递归的深度或范围。</li><li><strong>数据本身的结构</strong>：当没有更多的记录满足递归条件时，递归自然结束。</li></ol><p><u><strong>1.递归查询部分的 <code>WHERE</code> 子句</strong></u></p><p>在递归 CTE 中，<code>WHERE</code> 子句可以限制递归的范围或深度。例如，你可以通过 <code>WHERE</code> 子句限制递归的深度，以避免无限递归。虽然在你的示例中没有使用 <code>WHERE</code> 子句来限制递归，但在某些情况下，添加这样的限制可能是必要的。</p><p>示例：限制递归深度</p><p>假设我们希望限制部门层级的递归深度为3层，可以使用以下查询：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> DepartmentHierarchy <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 初始查询：选择顶级部门（没有父部门）作为起点</span></span><br><span class="line">    <span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, <span class="number">1</span> <span class="keyword">AS</span> level</span><br><span class="line">    <span class="keyword">FROM</span> Departments</span><br><span class="line">    <span class="keyword">WHERE</span> parent_dept_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 递归查询：连接上一级部门和当前部门，限制层级深度为3</span></span><br><span class="line">    <span class="keyword">SELECT</span> d.dept_id, d.parent_dept_id, d.dept_name, dh.level <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> Departments d</span><br><span class="line">    <span class="keyword">JOIN</span> DepartmentHierarchy dh <span class="keyword">ON</span> d.parent_dept_id <span class="operator">=</span> dh.dept_id</span><br><span class="line">    <span class="keyword">WHERE</span> dh.level <span class="operator">&lt;</span> <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 主查询：查询所有部门及其层级关系</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id, parent_dept_id, dept_name, level</span><br><span class="line"><span class="keyword">FROM</span> DepartmentHierarchy</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> level, dept_id;</span><br></pre></td></tr></table></figure></div><p>在这个查询中，递归查询的 <code>WHERE dh.level &lt; 3</code> 子句限制了递归的深度，确保不会超过3层。</p><p><u><strong>2. 数据本身的结构</strong></u></p><p>即使没有显式的结束条件，递归查询也会根据数据结构自然结束。当递归查询中没有新的记录生成时，递归就会自动结束。在你的示例中，每次递归都从 <code>Departments</code> 表中选择子部门，直到没有更多的子部门可以选择为止。</p><p>考虑以下数据结构：</p><table><thead><tr><th>dept_id</th><th>parent_dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>NULL</td><td>Corporate</td></tr><tr><td>2</td><td>1</td><td>Sales</td></tr><tr><td>3</td><td>1</td><td>HR</td></tr><tr><td>4</td><td>2</td><td>Domestic Sales</td></tr><tr><td>5</td><td>2</td><td>International Sales</td></tr><tr><td>6</td><td>3</td><td>Recruitment</td></tr><tr><td>7</td><td>3</td><td>Employee Relations</td></tr></tbody></table><p>在上述数据中，部门4、5、6、7没有子部门，因此递归在达到这些部门时自然结束。</p><p><strong>递归 CTE 工作机制示意</strong></p><ol><li><strong>初始查询</strong>：找到顶级部门（没有父部门），作为递归的起点。</li><li><strong>递归查询</strong>：每次递归查询从上一步的结果集中选择子部门。</li><li><strong>结束条件</strong>：<ul><li>显式结束条件：如 <code>WHERE dh.level &lt; 3</code> 限制递归深度。</li><li>隐式结束条件：当没有更多记录满足递归条件时，递归自然结束。</li></ul></li></ol><h2 id="B树">B树</h2><h3 id="背景-B树与磁盘">背景-B树与磁盘</h3><p>扇出（fanout）：每个节点允许最大的子节点</p><p><strong>高扇出</strong>，以改善临近键的数据局限性；<strong>低高度</strong>，以减少遍历期间的寻道次数</p><p>B树（B-Tree）是一种平衡树数据结构，广泛用于数据库和文件系统中。它的设计目标是减少磁盘访问次数，提高大规模数据存取的效率。以下是B树与磁盘以及寻道之间的关系：</p><h4 id="B树结构和磁盘的关系">B树结构和磁盘的关系</h4><h4 id="块结构与分页">块结构与分页</h4><ul><li><strong>节点大小与磁盘块大小匹配</strong>：B树的每个节点大小通常与磁盘的块大小（或页大小）匹配。这样，每次从磁盘读取一个节点时，可以充分利用磁盘的读写效率，因为一次I/O操作能够读取或写入完整的节点。</li><li><strong>减少磁盘I/O次数</strong>：由于B树具有较高的扇出（即每个节点可以有多个子节点），树的高度相对较低。这意味着查找、插入或删除操作所需的磁盘访问次数较少，从而减少了I/O操作的开销。</li></ul><h4 id="B树与寻道的关系">B树与寻道的关系</h4><h4 id="寻道时间">寻道时间</h4><ul><li><strong>降低寻道次数</strong>：B树通过其平衡性和高扇出特性，显著减少了需要访问的节点数量，进而降低了磁盘寻道的次数。寻道时间是机械硬盘中将磁头移动到目标轨道所需的时间，是磁盘访问延迟的一个重要组成部分。</li></ul><blockquote><p><strong><u>B树构建了一个快速导航和定位搜索项的层次结构，达到这个目标需要高扇出，低树高</u></strong></p></blockquote><h3 id="B树结构">B树结构</h3><p>概念、插入：<a class="link" href="https://www.bilibili.com/video/BV1tJ4m1w7yR/?spm_id_from=333.788&amp;vd_source=54bdc0734ba281535b1404bbbce896ef">https://www.bilibili.com/video/BV1tJ4m1w7yR/?spm_id_from=333.788&amp;vd_source=54bdc0734ba281535b1404bbbce896ef <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>删除：<a class="link" href="https://www.bilibili.com/video/BV1JU411d7iY/?spm_id_from=333.788&amp;vd_source=54bdc0734ba281535b1404bbbce896ef">https://www.bilibili.com/video/BV1JU411d7iY/?spm_id_from=333.788&amp;vd_source=54bdc0734ba281535b1404bbbce896ef <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>B树：多叉平衡搜索树</strong></p><p>B树需要满足三个特点(m阶B树就是最多有m个分支)</p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616232633809.png" alt="image-20240616232633809" style="zoom: 25%;"> <blockquote><p>上取整</p></blockquote><p>内存与硬盘（并且会有查找失败的可能</p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616232911847.png" alt="image-20240616232911847" style="zoom: 67%;"> <p><strong>B 树 与 B+树两者有何异同呢？</strong></p><ul><li>B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li><strong>B 树的检索的过程</strong>相当于对范围内的每个节点的关键字做二分查找，**可能还没有到达叶子节点，检索就结束了。**而 <strong>B+树的检索效率</strong>就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li><li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li></ul><p>综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p><h3 id="B-树的节点分裂（叶节点）">B+树的节点分裂（叶节点）</h3><p><strong><u>B+树 叶节点 分裂 选一个移上去就行，需要复制，因为是非叶结点</u></strong></p><p>以下是4阶B树插入11：N是4-1=3</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616235206850.png" alt="image-20240616235206850"></p><blockquote><p>这应该是B+树</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616234710682.png" alt="image-20240616234710682"></p></blockquote><p>**Step 1: **查找算法定位目标叶节点，并将新值关联</p><p><strong>Step 2:</strong> 有空就插⼊，没空就叫“节点溢出”overflow，必须分裂</p><ol><li>C1:叶节点：只能放N个值（阶数-1）</li><li>C2:非叶节点：指针超过N+1（KEY也是只能N个）</li></ol><p>**Step 3: **分裂——分配新节点，将⼀半元素从原分裂节点传输给它，并添加它的第⼀个键和指向⽗节点的指针，这时候，键被提升了（promote）</p><p>执⾏分裂的数组下标称之为分裂点（也叫中点），分裂点之后的所有元素被传输到新创建的兄弟节点</p><blockquote><p>11插不进去，所以要分裂，先把原来的分裂下，13提上去</p></blockquote><h3 id="B-树的节点分裂（非叶节点）">B+树的节点分裂（非叶节点）</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240616235311923.png" alt="image-20240616235311923"></p><p><strong><u>B+树 非叶节点 分裂选一个直接移上去就行，不需要复制，因为是非叶结点</u></strong></p><h3 id="B-树的叶节点合并（删除16后）">B+树的叶节点合并（删除16后）</h3><p><strong>如果是删除16</strong></p><p>删除可能会要节点合并</p><blockquote><p>删除会出现<strong>下溢出</strong>，也就是删完节点太少了，相邻加起来小于某个值了</p></blockquote><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617000237631.png" alt="image-20240617000237631" style="zoom: 67%;"> <p>对于叶节点：两个相邻节点中的键值对数量 小于或等于 N</p><p>对于非叶节点：两个相邻节点中指针的数量 小于或等于 N+1（感觉是一个意思）</p><p><strong>如果是删除20</strong></p><p>⼀般50%是树状结构节点占用率的阈值</p><p>如果是删除20，那么20消失就行了</p><h3 id="B-树的非叶节点合并（删除10后）">B+树的非叶节点合并（删除10后）</h3><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617003550839.png" alt="image-20240617003550839" style="zoom:50%;"> <h3 id="B树的分裂（插入）-合并（删除）">B树的分裂（插入）/合并（删除）</h3><p><strong>B树</strong>的<strong>非叶结点</strong><u>分裂合并</u>与<strong>B+树</strong>的<strong>非叶结点</strong><u>分裂合并</u>是一致的</p><p><strong>B树</strong>的<strong>非叶结点</strong><u>分裂合并</u>与<strong>B树</strong>的<strong>叶结点</strong><u>分裂合并</u>是一致的</p><p>叶节点自行领会，B+树的叶都得复制之类的，大致理解下</p><h2 id="分区分表分库-2">分区分表分库</h2><p>• 分区</p><ul><li>就是把一张表的数据分成N个区块，在逻辑上看最终只是一张表，但底层是由N个物理区块组成的</li></ul><p>• 分表（手搓分区）</p><ul><li>就是把一张表按一定的规则分解成N个具有独立存储空间的实体表</li><li>系统读写时需要根据定义好的规则得到对应的字表明，然后操作它</li></ul><p>• 分库</p><blockquote><p>04 B+树结构的物理实现</p></blockquote><p>用来解决下列问题：</p><ul><li>I/O瓶颈<ul><li>热点数据太多，数据缓存不够，每次查询产生大量I/O —— 分库，垂直分表</li><li>网络I/O瓶颈，带宽不够，连接数过多 —— 分库</li></ul></li><li>CPU瓶颈<ul><li>SQL问题，join、group by、order by —— SQL优化，构建索引</li><li>单表数据量过大，扫描行太多，SQL效率过低 —— 水平分表</li></ul></li></ul><h3 id="分区">分区</h3><p>一张表的数据分为N个区块，在逻辑上看最终只是一张表，但底层是由N个物理区块组成的</p><h4 id="要解决的问题">要解决的问题</h4><p>分区是一种数据分组方式，数据分组可以：</p><p>1、提高<strong>并发性</strong>和<strong>并行性</strong></p><p>2、扩增系统架构的<strong>可伸缩性</strong></p><p>分区目标：</p><p>分区想做到的：查询时可以过滤掉很多无用分区、分区本身不会带来很多代价</p><h4 id="面对两大问题">面对两大问题</h4><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617150424273.png" alt="image-20240617150424273"></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617150525113.png" alt="image-20240617150525113"></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617150816868.png" alt="image-20240617150816868"></p><blockquote><p>• NULL值会使分区过滤无效（PATITION by RANGE COLUMN（order_date））</p><p>• 分区列和索引列不匹配（没有索引，或关联查询时关联条件不匹配索引）</p><p>• 选择分区的成本可能很高（范围分区的成本需要注意）</p><p><strong>• 打开并锁住所有底层表的成本可能很高（开销和分区类型无关，主键查找单行会带来明显开销）</strong></p><p>• 维护分区的成本可能很高</p></blockquote><h3 id="分库表">分库表</h3><p><strong>分区</strong>：将一个表划分成多个较小的部分（分区），逻辑上是一个表，物理上有多个部分。</p><p><strong>分表</strong>：将一个表水平拆分成多个独立的子表，可以分布在同一个或多个数据库实例中。</p><p><strong>分区表</strong>：将一个表按某种规则划分成多个分区，逻辑上是一个表，但在物理上存储在不同的区域。这是分区技术在一个表上的具体应用。</p><blockquote><p>感觉<strong>分区表</strong>就是一个管理底层表的东西？</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617151531213.png" alt="image-20240617151531213"></p><h3 id="分表">分表</h3><p>一张表按照一定规则分为N个独立存储空间的实体表，系统读写时需要根据定义好的规则得到对应的字表明，然后操作</p><h4 id="解决什么问题">解决什么问题</h4><ul><li><p>分表后单表的并发能力提高了，磁盘I/O性能也提高了，写操作效率提高了</p><blockquote><p>因为单表的并发量小了，不用的表在不同的磁盘上，可以同时读写了</p></blockquote></li><li><p>数据分布在不同的文件，磁盘I/O性能提高了</p><blockquote><p>不用的表在不同的磁盘上，可以同时读写了</p></blockquote></li><li><p>读写锁影响的数据量变小</p><blockquote><p>当一个分表在进行写操作时，只会锁定这个小表，不会影响到其他分表的读写操作。</p></blockquote></li><li><p>插入数据库需要重新建立索引的数据量减少</p></li></ul><h4 id="会遇到的问题">会遇到的问题</h4><p><u><strong>如何保证插入不同表的多条记录（事务）要么同时成功，要么同时失败？</strong></u></p><ul><li><p>TCC 柔性事务</p><blockquote><p>TCC柔性事务的三个步骤包括：首先，在<strong>Try</strong>阶段，系统会预留必要的资源，但不进行最终的操作，比如预留库存、生成临时订单和冻结用户余额。接着，在<strong>Confirm</strong>阶段，如果所有尝试步骤都成功，系统将正式执行这些操作，真正扣减库存、生成正式订单并扣款。最后，如果任何尝试步骤失败，系统会进入<strong>Cancel</strong>阶段，取消预留的资源并恢复原状，比如释放预留库存、取消临时订单和解冻余额。这种机制确保了在分布式系统中，所有相关操作要么全部成功，要么全部失败。</p></blockquote></li></ul><p><u><strong>分表的实现方式（复杂）</strong></u></p><ul><li>需要业务系统配合升级，工作量大</li></ul><p><strong>跨分片查询低效</strong>：使用中间件来支持跨分片查询</p><p>**数据分布不均（数据倾斜）：**使用更好的划分算法，哈希之类的</p><p>**维护和管理复杂性：**自动化运维工具，中间件等</p><blockquote><p>补充 by GPT4o</p><p><strong>3. 全局唯一ID生成</strong>：</p><ul><li><strong>问题</strong>：在多个分表中插入数据时，需要确保每个记录有唯一的标识符（ID）。传统的自增ID可能会在不同的分表中产生冲突。</li><li>解决方案：<ul><li><strong>UUID</strong>：使用全局唯一标识符（UUID），但UUID长度较长，且无序，影响性能。</li><li><strong>雪花算法（Snowflake）</strong>：生成全局唯一的、有序的ID，可以保证分布式系统中的唯一性和有序性。</li><li><strong>分布式ID生成服务</strong>：如Twitter的Snowflake、Flink的Flink ID等。</li></ul></li></ul><p><strong>4. 跨分片查询</strong>：</p><ul><li><strong>问题</strong>：有时需要对多个分表的数据进行联合查询（如统计分析），这类查询在分表环境中变得复杂和低效。</li><li>解决方案：<ul><li><strong>应用层合并</strong>：在应用层对各个分表的查询结果进行合并。</li><li><strong>中间件</strong>：使用数据库中间件（如ShardingSphere、Vitess）来支持跨分片查询。</li><li><strong>预计算和缓存</strong>：预先计算常用的统计结果，存储在缓存或单独的聚合表中。</li></ul></li></ul><p><strong>5. 数据分布不均（数据倾斜）</strong>：</p><ul><li><strong>问题</strong>：如果分表规则不合理，可能导致部分分表的数据量过大或过小，造成负载不均衡，影响系统性能。</li><li>解决方案：<ul><li><strong>合理的分片键</strong>：选择合适的分片键，保证数据均匀分布。</li><li><strong>动态分片</strong>：根据数据增长动态调整分片策略。</li><li><strong>哈希分片</strong>：使用哈希算法进行分片，通常能保证数据的均匀分布。</li></ul></li></ul><p><strong>6. 维护和管理复杂性</strong>：</p><ul><li><strong>问题</strong>：分表增加了数据库的维护和管理难度，如备份、恢复、监控等操作变得复杂。</li><li>解决方案：<ul><li><strong>自动化运维工具</strong>：使用自动化工具进行分表的管理和运维，如备份和恢复脚本、监控系统等。</li><li><strong>数据库中间件</strong>：使用中间件简化分表的管理工作。</li></ul></li></ul><p><strong>7. 跨分片的事务管理</strong>：</p><ul><li><strong>问题</strong>：传统的单机事务无法跨多个分表执行，需要分布式事务支持。</li><li>解决方案：<ul><li><strong>TCC柔性事务</strong>：如你所提到的，Try-Confirm-Cancel模式。</li><li><strong>XA协议</strong>：使用支持XA协议的数据库，进行两阶段提交。</li><li><strong>本地事务+补偿机制</strong>：先执行本地事务，再通过补偿机制确保最终一致性。</li></ul></li></ul><p><strong>8. 数据迁移和扩容</strong>：</p><ul><li><strong>问题</strong>：随着数据量增长，可能需要增加新的分表或重新分配数据，这些操作需要复杂的数据迁移。</li><li>解决方案：<ul><li><strong>分片重平衡</strong>：使用工具进行分片重平衡，自动将数据迁移到新的分片。</li><li><strong>中间件支持</strong>：使用支持动态扩容和数据迁移的中间件。</li></ul></li></ul><p><strong>9. 索引管理</strong>：</p><ul><li><strong>问题</strong>：每个分表的索引需要单独管理，且在查询时需要考虑跨表的索引优化。</li><li>解决方案：<ul><li><strong>统一索引策略</strong>：在所有分表上使用相同的索引策略，确保查询优化的一致性。</li><li><strong>全局索引</strong>：使用中间件或数据库支持全局索引，优化跨表查询。</li></ul></li></ul></blockquote><h4 id="分区和分表的区别和联系">分区和分表的区别和联系</h4><ul><li><u>目的都是减少数据库的负担，提高表的增删改查效率</u></li><li><u>分区只是一张表的物理存储位置发生变化，分表是将一张表分为多个实体表</u><ul><li>访问量大，数据大，两种配合</li><li>访问量不大，数据大，可以只分区（分表可以提升单表的并发能力，所以访问量不大只分个区也行</li><li>分表可以多库，分区不可以</li></ul></li><li>常见分区分表的策略是类似的</li></ul><h3 id="分库">分库</h3><p><strong>解决什么问题？</strong></p><ul><li>单台DB的存储空间不够</li><li>查询量的增加导致数据库服务器已经没法支撑</li></ul><p><strong>为什么要分库？</strong></p><p>突破单节点数据库服务器的I/O能力限制，解决数据库扩展性的问题</p><p><strong>怎么分库？</strong></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617152718689.png" alt="image-20240617152718689"></p><p><strong>会遇到什么问题？</strong></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617153056627.png" alt="image-20240617153056627"></p><h2 id="SQL成本计算">SQL成本计算</h2><blockquote><p>SQL解释器</p><ul><li><p>基于成本优化器</p><p>例如基于成本优化器的计算方式</p></li><li><p>基于规则优化器</p></li></ul></blockquote><h3 id="优化最重要的方向：连接">优化最重要的方向：连接</h3><p>连接就是把各个表中的记录都取出来依次进行匹配，并把匹配的组合返回</p><p>驱动表和被驱动表 A join B，A是驱动表</p><h4 id="嵌套循环连接">嵌套循环连接</h4><p>驱动表只访问一次，但被驱动表却可能被多次访问，访问次数取决于对驱动表执行单表查询后的结果集中的记录条数的连接执行方式称之为 嵌套循环连接 ( Nested-Loop Join )</p><blockquote><p>嵌套循环连接通过在外层循环中逐条读取驱动表记录，并在内层循环中查找被驱动表的匹配记录来实现连接。这种逐条匹配的过程类似于嵌套循环，因此得名嵌套循环连接（Nested-Loop Join）。</p></blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.name, orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.customer_id <span class="operator">=</span> orders.customer_id;</span><br></pre></td></tr></table></figure></div><p>对customers的每一条都访问orders表</p><p><strong><u>一、使用索引加速连接查询</u></strong></p><ol><li><p><strong>被驱动表有索引时</strong>：被驱动表的数据在被驱动表筛选后，会进行多次基于索引的查询以加速连接。</p><blockquote><p>意思就是比如对驱动表的数据每条进行遍历，那每个驱动表的值就可以看作一个常数，然后就使用索引</p></blockquote></li><li><p><strong>多个条件的情况</strong>：如果查询有多个条件，优化器会选择最合适的索引来执行查询。</p></li><li><p><strong>连接查询和过滤条件</strong>：连接查询和过滤条件通常只涉及被驱动表的部分列。因此，在实际工作中，不建议使用<code>*</code>作为查询列表。</p></li></ol><p><strong><u>二、基于块的连接优化</u></strong>：通过减少对被驱动表的多次遍历来提高连接效率（感觉像是倒反天罡</p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617133051390.png" alt="image-20240617133051390" style="zoom: 50%;"> <ol><li>尽量减少访问被驱动表的次数（驱动表的记录不会都放入 join buffer，只会将部分列放入）</li><li>join buffer 足够大，就可以一次访问被驱动表完成连接</li><li>join buffer 一般 256KB（相比来看，索引仍然是最好的选择）</li></ol><h3 id="连接小结（总结的还可以">连接小结（总结的还可以</h3><p>• 本质上，连接就是把各个表中的记录都取出来依次进行匹配，并把匹配的组合返回</p><p>• 内连接和外连接的本质都是确定驱动表</p><p>• 嵌套循环连接算法是：驱动表只访问一次，但被驱动表可能会访问多次，访问次数取决于被驱动表执行单表查询后结果集中有多少条记录</p><ol><li><strong>被驱动表会被多次访问</strong>，所以，建立合适的索引用以加快访问速度</li><li><strong>被驱动表很大</strong>，多次访问会导致更多的磁盘 I/O，基于块的嵌套循环算法来缓解</li></ol><h3 id="基于成本的优化器-CBO">基于成本的优化器 CBO</h3><blockquote><p><a class="link" href="https://blog.csdn.net/wangen2010/article/details/100516113">https://blog.csdn.net/wangen2010/article/details/100516113 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>要点是<strong>执行计划的成本估算</strong></p><p>基础仍然是规则方案探索</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1718595481773-21.png" alt="img"></p><h4 id="什么是“成本”">什么是“成本”</h4><ul><li>一个查询有不同的执行方案，它会选择其中成本最低的（也就是代价最低的）</li><li>成本一般有两个方面组成<ul><li>I/O 成本，MyISAM 、 InnoDB 存储引擎都是将数据和索引存储到磁盘的<ul><li>从磁盘到内存的加载，涉及到“物理读写”，这种耗损的时间称之为 I/O 成本</li></ul></li><li>CPU 成本，读取记录，以及检测记录是否满足搜索条件、对结果集排序，称之为 CPU 成本</li></ul></li><li>一般来说，需要确定不同操作，不同算子的成本常数<ul><li><strong>物理读取一个页面</strong>默认成本是 1.0</li><li><strong>逻辑读取</strong>和<strong>检测条件</strong>默认为 0.2</li></ul></li></ul><h4 id="一个单表查询的例子">一个单表查询的例子</h4><p>单表查询，大意指不涉及连接</p><p><strong><u>单表查询成本优化基本步骤：</u></strong></p><ol><li><p>根据搜索条件，<strong>找出所有可能使用的索引</strong></p><blockquote><p><strong>二级索引</strong>就是除了主键索引之外的</p><p>我们分析一下上边查询中涉及到的几个搜索条件：</p><ul><li><code>key1 IN ('a', 'b', 'c')</code>，这个搜索条件可以使用二级索引<code>idx_key1</code>。</li><li><code>key2 &gt; 10 AND key2 &lt; 1000</code>，这个搜索条件可以使用二级索引<code>idx_key2</code>。</li><li><code>key3 &gt; key2</code>，<strong>这个搜索条件的索引列由于没有和常数比较，所以并不能使用到索引。</strong></li><li><code>key_part1 LIKE '%hello%'</code>，<code>key_part1</code>通过<code>LIKE</code>操作符和以通配符开头的字符串做比较，不可以适用索引。</li><li><code>common_field = '123'</code>，由于该列上压根儿没有索引，所以不会用到索引。</li></ul><p>综上所述，上边的查询语句可能用到的索引，也就是<code>possible keys</code>只有<code>idx_key1</code>和<code>idx_key2</code>。</p></blockquote></li><li><p>计算<strong>全表扫描</strong>的代价（row，Data_length)</p><blockquote><p>这两个信息可以通过语句<code>show table status like 'table_name' \ G</code>查询得到</p><ul><li><p><u><strong>Rows</strong></u></p><p>本选项表示表中的记录条数。对于使用<code>MyISAM</code>存储引擎的表来说，该值是准确的，对于使用<code>InnoDB</code>存储引擎的表来说，该值是一个<strong>估计值</strong>。从查询结果我们也可以看出来，由于我们的<code>single_table</code>表是使用<code>InnoDB</code>存储引擎的，所以虽然实际上表中有10000条记录，但是<code>SHOW TABLE STATUS</code>显示的<code>Rows</code>值只有9693条记录。</p></li><li><p><u><strong>Data_length</strong></u></p><p>本选项表示表占用的存储空间字节数。使用<code>MyISAM</code>存储引擎的表来说，该值就是数据文件的大小，对于使用<code>InnoDB</code>存储引擎的表来说，该值就相当于聚簇索引占用的存储空间大小，也就是说可以这样计算该值的大小：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data_length = 聚簇索引的页面数量 x 每个页面的大小</span><br></pre></td></tr></table></figure></div><p>我们的<code>single_table</code>使用默认<code>16KB</code>的页面大小，而上边查询结果显示<code>Data_length</code>的值是<code>1589248</code>，所以我们可以反向来推导出<code>聚簇索引的页面数量</code>：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引的页面数量 = 1589248 ÷ 16 ÷ 1024 = 97</span><br></pre></td></tr></table></figure></div></li></ul><p>我们现在已经得到了聚簇索引占用的页面数量以及该表记录数的估计值</p></blockquote></li><li><p>计算<strong>使用不同索引的代价</strong></p></li><li><p>对比各种执行方案的代价，找出成本最低的那一个</p></li></ol><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617125503524.png" alt="image-20240617125503524" style="zoom:50%;"> <blockquote><p>1.1，1.0这些都是常数，加一些偏置值而已</p></blockquote><h3 id="基于规则的优化器-RBO">基于规则的优化器 RBO</h3><p>要点是**<u>结构匹配和替换</u>**</p><ul><li>应用规则的算法<strong>一般需要先在关系代数结构上匹配一部分局部结构</strong></li><li>再根据结构的特点进行辩护乃至替换操作</li></ul><h4 id="基于规则的优化算法">基于规则的优化算法</h4><ul><li>变化规则的选择，哪些规则应该被应用，以什么顺序被使用？</li><li>变换效果的评价，经过变换的查询性能的评估，算子效率和数据集</li><li>所以，一般固定规则一定会构建人工的优先级顺序 =&gt; 通用性下降，适应范围变窄</li></ul><h4 id="优先级顺序和通用性">优先级顺序和通用性</h4><p>由于规则的应用顺序会影响优化效果，因此，优化器通常会给规则分配一个优先级顺序。这个优先级顺序是基于经验和常见查询模式人工设置的。虽然这种方法可以在特定场景下提高查询效率，但也有其局限性：</p><ul><li><strong>通用性下降</strong>：由于规则的优先级是固定的，优化器在某些情况下可能无法找到最优的查询执行计划。</li><li><strong>适应范围窄</strong>：固定优先级顺序意味着优化器在面对不同类型的查询时，可能不能很好地适应多变的查询模式和数据特性。</li></ul><h4 id="一个例子（GPT）">一个例子（GPT）</h4><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617113254543.png" alt="image-20240617113254543" style="zoom:50%;"> <h2 id="日志-2">日志</h2><blockquote><p><a class="link" href="https://www.cnblogs.com/xiaolincoding/p/16396502.html">https://www.cnblogs.com/xiaolincoding/p/16396502.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="ACID">ACID</h3><ul><li><strong>原子性（Atomicity）：事务的本质要求</strong><ul><li><code>单个事务，为一个不可分割的最小工作单元</code>，整个事务中的所有操作要么全部commit成功，要么全部失败rollback，对于一个事务来说，不可能只执行其中的一部分SQL操作，这就是事务的原子性。</li></ul></li><li><strong>一致性（Consistency）：数据完整的要求</strong><ul><li>定义最弱的属性，也是<u>唯一一个可以由开发者控制而不是仅凭数据库自身保证的属性</u></li><li>一致性指的是在事务执行前后，数据库必须从一个一致状态转变为另一个一致状态。也就是说，任何事务都必须使数据库保持一致的状态。具体来说，一致性要求：<ul><li><strong>数据库规则的满足</strong>：事务执行后，所有数据库的完整性约束（如余额不能为负数）都必须满足。</li><li><strong>数据的合法性</strong>：事务执行后，数据库中的数据必须是合法的，不会出现不合法的数据。</li><li><strong>正确的状态转变</strong>：事务执行后，数据库状态的变化是正确的，从一个正确的状态变为另一个正确的状态。</li></ul></li></ul></li><li><strong>隔离性（Isolation）：并发的本质要求</strong><ul><li>通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外一个账户查询余额SQL开始运行，则其看到的信用卡账户的余额并没有被减去100元。后面我们讨论隔离级别(Isolation level)的时候，会发现为什么我们要说事务通常来说是不可见的</li></ul></li><li><strong>持久性（Durability）：数据库系统的本质要求</strong><ul><li><u>一旦事务提交，那么对其所做的修改就会永久保存在数据库中</u>，此时即使系统崩溃，修改的数据也不会丢失</li></ul></li></ul><h3 id="缓冲区管理">缓冲区管理</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617092103635.png" alt="image-20240617092103635"></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617092119912.png" alt="image-20240617092119912"></p><h3 id="请求页的基本步骤">请求页的基本步骤</h3><ul><li>检查该页是否已被缓存<ol><li>如果该页在缓存中，直接返回缓存的页；</li><li>如果没有缓存，则页缓存会将其逻辑地址或页id转化为物理地址，加载到内存，并返回；<ol><li>一旦返回，这个存有缓存页内容的缓冲区就被称为被<strong>引用的（referenced）</strong></li><li>用完之后将其归还给页缓存或解除引用</li></ol></li></ol></li><li>若想让页缓存不要换出某些页，则可以将其固定（pin）</li><li>如果某些页被修改，标记为脏页（dirty page），脏页表示内容与磁盘不同步，换出时必须将其刷写到磁盘</li></ul><h3 id="恢复Recovery">恢复Recovery</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617093143299.png" alt="image-20240617093143299"></p><blockquote><p>意思是本来事务提交是在缓存完成就修改就事务提交了，这样能快一点，但是就会存在<strong>在提交和写入磁盘</strong>之间崩溃的可能，无法恢复，违反持久性；所以一个方案是使用写入disk才算完成，这样固然可以，但是显然太麻烦，因此redo日志诞生。</p></blockquote><h3 id="Redo-log（重做日志）-的特点">Redo log（重做日志） 的特点</h3><ol><li>占用空间很小</li><li>顺序写入磁盘（顺序 I/O）</li></ol><h3 id="redo日志格式">redo日志格式</h3><blockquote><p>比ppt清晰</p><p><a class="link" href="https://www.cnblogs.com/kuangtf/articles/16353184.html#4log-sequeue-number">https://www.cnblogs.com/kuangtf/articles/16353184.html#4log-sequeue-number <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>Redo 日志格式不同数据库有不同的定义，但整体的分类就这三种：</p><ol><li>记录具体位置的物理修改</li><li>记录一个 page 的全部修改</li><li>记录操作（执行恢复的参数）</li></ol><p>一些数据库也会做一些压缩操作，比如 space id，page number 等</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1718588747996-1.png" alt="img"></p><blockquote><p>对应第一种</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617095405672.png" alt="image-20240617095405672"></p><blockquote><p>方案2大体对应第二种</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617095801000.png" alt="image-20240617095801000"></p><blockquote><p>大体上是第三种</p></blockquote><h3 id="Mini-Transaction">Mini-Transaction</h3><p>以组的形式写入 redo 日志</p><p>• 一组操作，一组日志的不可分割性</p><p>• 索引、基本表、聚簇、二级索引、目录等多个页的操作</p><p><strong>MLOG_MULTI_REC_END</strong></p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1718589881176-4.png" alt="img"></p><h3 id="redo-log-block">redo log block</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1718589935838-11.png" alt="img"></p><blockquote><p>512B，512K也太大了</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1718589956060-14.png" alt="img"></p><h3 id="redo-log-的刷盘时机">redo log 的刷盘时机</h3><p>redo log刷盘是指将这些日志从内存中的log buffer（日志缓冲区）写入磁盘的过程。这个过程确保了数据的<strong>持久性</strong>，即使在系统崩溃或宕机后，数据库也能通过这些日志恢复到一致的状态。</p><ul><li>log buffer空间不足（50%的阈值）</li><li><strong>事务提交时</strong></li><li><strong>脏页刷新</strong></li><li>定时进程，固定频率刷新（1s，log buffer中的redo log刷新到硬盘）</li><li>正常关闭服务器</li></ul><h3 id="lsn值（log-sequence-number）">lsn值（log sequence number）</h3><p><strong><u>check point的步骤</u></strong></p><ol><li><p>计算当前系统可以被覆盖的redo日志对应的lsn值最大是多少</p></li><li><p>将信息写入日志文件的管理信息中，记录check point的操作</p></li></ol><blockquote><p>Checkpoint是数据库系统中的一个关键机制，用于确保数据一致性和加速恢复过程。执行checkpoint时，数据库会做以下事情：</p><ol><li><strong>刷新脏页</strong>：将所有脏页（内存中被修改但尚未写入磁盘的数据页）写入磁盘。</li><li><strong>记录LSN</strong>：将当前的LSN记录在某个稳定存储位置（如日志文件头部），这标志着所有在这个LSN之前的变更都已经持久化到磁盘。(<strong>checkpoint_lsn</strong>)</li></ol></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617102214425.png" alt="image-20240617102214425"></p><blockquote><p>checkpoint就是之前的都完成了，lsn是目前有多少了，最新的一个增长，应该跟buf_free对应的？</p></blockquote><h3 id="恢复">恢复</h3><p><a class="link" href="https://www.cnblogs.com/kuangtf/articles/16353184.html#4log-sequeue-number">https://www.cnblogs.com/kuangtf/articles/16353184.html#4log-sequeue-number <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>博客讲的很详细</strong></p><p>小trick就是使用Hash表，相同的页面不用多次取回</p><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617103555399.png" alt="image-20240617103555399"></p><h3 id="Undo日志（Undo-log）">Undo日志（Undo log）</h3><ul><li>事务保证原子性靠的就是日志<ul><li>错误：服务器、操作系统、断电</li><li>手动或自动rollback</li></ul></li><li>对每一条记录进行改动的时候，需要留一手<ul><li>INSERT，记录主键，rollback就删除主键</li><li>DELECT，记录内容，rollback恢复记录</li><li>UPDATE，记录内容，rollback恢复记录</li></ul></li></ul><p>每一个事务对数据的修改都会被记录到 undo log ，当执行事务过程中出现错误或者需要执行回滚操作的话，MySQL 可以利用 undo log 将数据恢复到事务开始之前的状态。</p><p><strong>undo log 属于逻辑日志，记录的是 SQL 语句</strong></p><p>比如说事务执行一条 DELETE 语句，那 undo log 就会记录一条相对应的 INSERT 语句。同时，undo log 的信息也会被记录到 redo log 中，因为 undo log 也要实现持久性保护。<strong>并且，undo-log 本身是会被删除清理的，例如 INSERT 操作，在事务提交之后就可以清除掉了；UPDATE/DELETE 操作在事务提交不会立即删除，会加入 history list，由后台线程 purge 进行清理。</strong></p><h3 id="Write-Ahead-Log-WAL（GPT）">Write-Ahead Log WAL（GPT）</h3><p>基本原理</p><ul><li><strong>保证数据库系统的持久性语义，即操作日志必须在修改页之前写入磁盘。</strong></li><li><strong>系统崩溃时，通过操作日志重建内存中丢失的更改。</strong></li></ul><p>性能优化</p><ul><li>后台独立进程循环刷写（如PostgreSQL的后台刷写器）。</li><li>定期执行Checkpoint操作。</li></ul><p>日志语义</p><ul><li>WAL是仅追加的，已写入内容不可变。</li><li>强制刷盘操作确保事务提交记录完成后才视为“已提交”。</li><li>LSN（Log Sequence Number）唯一且单调递增。</li></ul><h3 id="Redo-log-Undo-log">Redo log &amp; Undo log</h3><ul><li><p><strong>前像（before-image）和后像（after-image）的相互转换</strong></p></li><li><p><strong>Undo：一个事务在执行过程中，还未提交，发生崩溃或者需要回滚</strong></p><p><mark>保障原⼦性、实现MVCC（多版本并发控制）</mark></p><ul><li>Undo log 撤销回滚的日志，记录更新前的数据到undo日志文件中</li><li>Undo日志记录的是操作记录，插入记录主键、删除记录内容、更新记录旧值</li><li>Undo日志只在乎“操作之前”（roll_pointer指针串成链表/版本表，trx_id事务id）</li></ul></li><li><p><strong>Redo：掉电，磁盘I/O崩了，之前提交的记录如何保存（crash-safe 奔溃恢复）</strong></p><p><mark>保障持久性</mark></p><ul><li>事务提交时，未必检查点同步，事务提交成功的标记是——redo日志持久化了</li><li>Redo日志记录的是物理修改，（xxx数据页yyy的偏移量做了zzz的修改/影子页）</li><li>循环写，不用于备份恢复、主从复制，用于掉电等故障恢复——binlog用于全局备份</li></ul></li><li><p>被修改的Undo log本身，也会记录Redo log</p><blockquote><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617110010159.png" alt="image-20240617110010159" style="zoom: 67%;"> </blockquote></li></ul><h3 id="steal和force策略">steal和force策略</h3><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617110532293.png" alt="image-20240617110532293"></p><blockquote><p>事务提交前能不能刷脏页？能 steal（要undo日志，未能提交的话要恢复）</p><p>事务提交前要不要保证所有的脏页都刷了？不要保证 no-force（要redo日志），要保证 force</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="24-Spring-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20240617110548879.png" alt="image-20240617110548879"></p><h2 id="SQL题目补充（一开始跳了几道">SQL题目补充（一开始跳了几道</h2><blockquote><p>全用mysql，不用oracle吧</p></blockquote><h3 id="Any和All关键字">Any和All关键字</h3><p>其实可以用min/max等价实现</p><p><strong>any/some</strong></p><ol><li>Select * from t1 where m1 &gt; any (select m2 from t2)</li><li>如果子查询结果集存在小于m1列的值，则表达式为true</li><li>Select * from t1 where m1 &gt; (select min(m2) from t2)</li></ol><p><strong>all</strong></p><ol><li>Select * from t1 where m1 &gt; all(select m2 from t2)</li><li>如果子查询的结果集中所有值都小于m1，则表达式为true</li><li>Select * from t1 where m1 &gt; (select max(m2) from t2)</li></ol><h3 id="char-length和length">char_length和length</h3><table><thead><tr><th>example_column</th><th>byte_length</th><th>char_length</th></tr></thead><tbody><tr><td>hello</td><td>5</td><td>5</td></tr><tr><td>你好</td><td>6</td><td>2</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="期末复习" scheme="https://bblog.031105.xyz/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    <category term="数据库开发" scheme="https://bblog.031105.xyz/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="数据库" scheme="https://bblog.031105.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ZeroSSL-域名SSL配置说明</title>
    <link href="https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/zerossl-%E5%9F%9F%E5%90%8Dssl%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/zerossl-%E5%9F%9F%E5%90%8Dssl%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E.html</id>
    <published>2024-06-13T08:37:22.000Z</published>
    <updated>2024-09-30T12:51:50.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>待完善，先记录下，好不容易理清楚我干了什么</p></blockquote><h2 id="起因">起因</h2><p>收到了ZeroSSL证书即将过期的通知</p><p><img lazyload src="/images/loading.svg" data-src="ZeroSSL-%E5%9F%9F%E5%90%8DSSL%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/image-20240613164048436.png" alt="image-20240613164048436"></p><p>于是不得不回顾下当时搞了啥</p><h2 id="流水线配置">流水线配置</h2><p>先看下流水线干了啥</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">VITE_API_URL:</span> <span class="string">&quot;https://49.235.142.226:8701/api&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span> <span class="comment"># List of stages for jobs, and their order of execution</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker-build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span> [ <span class="string">nancy</span> ]</span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--build-arg</span> <span class="string">VITE_API_URL=&quot;$VITE_API_URL&quot;</span> <span class="string">-t</span> <span class="string">front:latest</span> <span class="string">-f</span> <span class="string">INeedGithub/Dockerfile</span> <span class="string">INeedGithub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">save</span> <span class="string">-o</span> <span class="string">front.tar</span> <span class="string">front:latest</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">untracked:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">unit-test-job-data-center:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Running unit tests for data-center... This will take about 10 seconds.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lint-test-job:</span> <span class="comment"># This job also runs in the test stage.</span></span><br><span class="line">  <span class="attr">tags:</span> [ <span class="string">nancy</span> ]</span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span> <span class="comment"># It can run at the same time as unit-test-job (in parallel).</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Linting code... This will take about 10 seconds.&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;No lint issues found.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">tags:</span> [ <span class="string">nancy</span> ]</span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">&quot;$APP_SERVER_PWD&quot;</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">front.tar</span> <span class="string">ubuntu@&quot;$APP_SERVER_IP&quot;:~</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">&quot;$APP_SERVER_PWD&quot;</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">ubuntu@&quot;$APP_SERVER_IP&quot;</span> <span class="string">&#x27;docker container rm -f front-v2; docker load -i front.tar; docker run -d --name front-v2 -p 8700:80 -p 8701:443 -v /usr/share/mynginxconf/certificate.crt:/etc/nginx/ssl/your_domain.crt -v /usr/share/mynginxconf/private.key:/etc/nginx/ssl/your_domain.key front:latest /bin/bash -c &quot;nginx; tail -f /dev/null&quot;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>主要是</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">tags:</span> [ <span class="string">nancy</span> ]</span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">&quot;$APP_SERVER_PWD&quot;</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">front.tar</span> <span class="string">ubuntu@&quot;$APP_SERVER_IP&quot;:~</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">&quot;$APP_SERVER_PWD&quot;</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">ubuntu@&quot;$APP_SERVER_IP&quot;</span> <span class="string">&#x27;docker container rm -f front-v2; docker load -i front.tar; docker run -d --name front-v2 -p 8700:80 -p 8701:443 -v /usr/share/mynginxconf/certificate.crt:/etc/nginx/ssl/your_domain.crt -v /usr/share/mynginxconf/private.key:/etc/nginx/ssl/your_domain.key front:latest /bin/bash -c &quot;nginx; tail -f /dev/null&quot;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>这部分涉及我当时docker都搞了些啥，OK</p><ol><li>将docker内的80和443分别映射到了服务器的8700和8701</li><li>配置文件从本机/usr/share/mynginxconf/certificate.crt和/usr/share/mynginxconf/private.key映射过去</li></ol><h2 id="前端容器内的nginx-conf">前端容器内的nginx.conf</h2><div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span> /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">    <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">    <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /app;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://&lt;后端服务器ip&gt;:8080/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/your_domain.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/your_domain.key;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /app;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://&lt;后端服务器ip&gt;:8080/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="renew过程">renew过程</h2><p>To Be Co</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="实践记录" scheme="https://bblog.031105.xyz/categories/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="服务器" scheme="https://bblog.031105.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="SSL" scheme="https://bblog.031105.xyz/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>基于Langchain的SQL交互Agent</title>
    <link href="https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/2024-Spring-%E8%BD%AF%E5%B7%A5%E4%B8%89/%E5%9F%BA%E4%BA%8Elangchain%E7%9A%84sql%E4%BA%A4%E4%BA%92agent.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/2024-Spring-%E8%BD%AF%E5%B7%A5%E4%B8%89/%E5%9F%BA%E4%BA%8Elangchain%E7%9A%84sql%E4%BA%A4%E4%BA%92agent.html</id>
    <published>2024-06-09T13:18:29.000Z</published>
    <updated>2024-09-30T12:51:50.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github链接">Github链接</h2><p>代码已开源，点点❤家人们，顶着一堆作业写的QAQ</p><p><a class="link" href="https://github.com/SYuan03/llm4db">https://github.com/SYuan03/llm4db <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="参考链接">参考链接</h2><p>官网</p><ol><li><a class="link" href="https://python.langchain.com/v0.1/docs/use_cases/sql/">https://python.langchain.com/v0.1/docs/use_cases/sql/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://python.langchain.com/v0.1/docs/use_cases/sql/quickstart/">https://python.langchain.com/v0.1/docs/use_cases/sql/quickstart/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol><p>DashScope（阿里云）API</p><p><a class="link" href="https://dashscope.console.aliyun.com/dashboard">https://dashscope.console.aliyun.com/dashboard <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>好多地方都用了gpt-3.5-turbo的模型，4o又太贵，所以体验下Qwen的模型，体验额度还挺大的</p></blockquote><h2 id="Process">Process</h2><p>以下记录几个问题点</p><h3 id="处理密码特殊字符">处理密码特殊字符</h3><p>这步有点气人咳咳</p><p>了解到密码中含有@等特殊词汇需要使用</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br></pre></td></tr></table></figure></div><p>然后用了发现还是连不上，OK排查了一番后发现填成服务器密码了QAQ</p><p>改了之后终于连好了</p><style>.mfcftpitqhhp{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/2024-Spring-%E8%BD%AF%E5%B7%A5%E4%B8%89/%E5%9F%BA%E4%BA%8Elangchain%E7%9A%84sql%E4%BA%A4%E4%BA%92agent/image-20240609213451239.png" class="mfcftpitqhhp" alt="image-20240609213451239"> <h3 id="StrOutputParser">StrOutputParser</h3><p>OutputParser that parses LLMResult into the top likely <strong>string</strong>.</p><p>Create a new model by parsing and validating input data from keyword arguments.</p><p>Raises ValidationError if the input data cannot be parsed to form a valid model.</p><h2 id="demo">demo</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">db = SQLDatabase.from_uri(uri)</span><br><span class="line"></span><br><span class="line">llm = Tongyi(model=<span class="string">&#x27;qwen-max-1201&#x27;</span>, temperature=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义回答问题的模板，把前面的问题、查询和结果传给LLM，然后解析输出</span></span><br><span class="line">answer_prompt = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据以下用户问题、对应的SQL查询以及SQL查询结果，回答用户的问题。</span></span><br><span class="line"><span class="string">    问题: &#123;question&#125;</span></span><br><span class="line"><span class="string">    SQL 查询: &#123;query&#125;</span></span><br><span class="line"><span class="string">    SQL 查询结果: &#123;result&#125;</span></span><br><span class="line"><span class="string">    答案:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建SQL查询链</span></span><br><span class="line">write_query = create_sql_query_chain(llm, db)</span><br><span class="line"><span class="comment"># 创建SQL查询工具</span></span><br><span class="line">execute_query = QuerySQLDataBaseTool(db=db)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义链再传给LLM，然后使用StrOutputParser解析输出</span></span><br><span class="line">answer = answer_prompt | llm | StrOutputParser()</span><br><span class="line">chain = (</span><br><span class="line">        RunnablePassthrough.assign(query=write_query).assign(</span><br><span class="line">            result=itemgetter(<span class="string">&quot;query&quot;</span>) | execute_query</span><br><span class="line">        )</span><br><span class="line">        | answer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res = chain.invoke(&#123;<span class="string">&quot;question&quot;</span>: <span class="string">&quot;一共有多少仓库？有多少trending？&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There are 703 repositories.</span><br></pre></td></tr></table></figure></div><p>Cool，验证下</p><img lazyload src="/images/loading.svg" data-src="/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/2024-Spring-%E8%BD%AF%E5%B7%A5%E4%B8%89/%E5%9F%BA%E4%BA%8Elangchain%E7%9A%84sql%E4%BA%A4%E4%BA%92agent/image-20240609215501808.png" class title="image-20240609215501808"><p>想看下用了多少token的，结果好像数据没刷新</p><h2 id="NextSteps">NextSteps</h2><p>只试了下few shot</p><h3 id="Prompting-strategies">Prompting strategies</h3><p><a class="link" href="https://python.langchain.com/v0.1/docs/use_cases/sql/prompting/">https://python.langchain.com/v0.1/docs/use_cases/sql/prompting/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>看了下可以把表结构也一起传下，增强一下，加点描述之类的</p><h3 id="Few-shot-examples">Few-shot examples</h3><p><a class="link" href="https://python.langchain.com/v0.1/docs/use_cases/sql/prompting/#few-shot-examples">https://python.langchain.com/v0.1/docs/use_cases/sql/prompting/#few-shot-examples <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>还可以搞点few shot</p><h2 id="补充：StreamForHttps">补充：StreamForHttps</h2><p>部署接口在服务器上的时候发现</p><p><a class="link" href="http://ip:8000/dbchat/stream%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94">http://ip:8000/dbchat/stream能正常流式响应 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>但是经过nginx反向代理的https的<a class="link" href="https://ip:8001/dbchat/stream%E6%B2%A1%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94%EF%BC%8C%E7%9B%B4%E6%8E%A5~~%E4%BE%9D%E5%A4%A7%E6%89%98~~%E5%87%BA%E6%9D%A5">https://ip:8001/dbchat/stream没法正常流式响应，直接~~依大托~~出来 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>之前的nginx配置如下</p><div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8001</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> &lt;ip&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/certificate.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/private.key;</span><br><span class="line">    <span class="attribute">ssl_trusted_certificate</span> /etc/nginx/ssl/ca_bundle.crt;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>关闭缓存后修改如下</p><div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8001</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> &lt;ip&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/certificate.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/private.key;</span><br><span class="line">    <span class="attribute">ssl_trusted_certificate</span> /etc/nginx/ssl/ca_bundle.crt;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /stream &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8000/stream;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;  <span class="comment"># 关键配置，确保禁用代理缓冲</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发现解决了问题</p><h2 id="致谢">致谢</h2><p>Paying tribute to the legendary software engineering warrior ——<a href="https://github.com/SEBugMaker"><strong>SEBugMaker</strong></a>！</p><p>And <a href="https://github.com/SYuan03"><strong>SYuan03</strong></a> as well. (Ahem, paying tribute to oneself might seem a bit odd)</p>]]></content>
    
    
    <summary type="html">SE3赶工ing</summary>
    
    
    
    <category term="实践记录" scheme="https://bblog.031105.xyz/categories/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024-Spring-软工三" scheme="https://bblog.031105.xyz/categories/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/2024-Spring-%E8%BD%AF%E5%B7%A5%E4%B8%89/"/>
    
    
    <category term="Langchain" scheme="https://bblog.031105.xyz/tags/Langchain/"/>
    
    <category term="急急国王系列" scheme="https://bblog.031105.xyz/tags/%E6%80%A5%E6%80%A5%E5%9B%BD%E7%8E%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>GitlabRunner流水线之DockerHub重配置</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/gitlabrunner%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B9%8Bdockerhub%E9%87%8D%E9%85%8D%E7%BD%AE.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/gitlabrunner%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B9%8Bdockerhub%E9%87%8D%E9%85%8D%E7%BD%AE.html</id>
    <published>2024-06-08T16:09:32.000Z</published>
    <updated>2024-09-30T12:51:30.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>突然发现最近后端流水线连续几次都没成功，于是看了下果然又是Docker服务在国外的原因，咳咳</p><p><img lazyload src="/images/loading.svg" data-src="Docker%E9%85%8D%E7%BD%AE%E5%92%B3%E5%92%B3/image-20240609001313763.png" alt="image-20240609001313763"></p><p>于是搜索了一番，换了一个还能用的地址</p><p><img lazyload src="/images/loading.svg" data-src="Docker%E9%85%8D%E7%BD%AE%E5%92%B3%E5%92%B3/image-20240609001429312.png" alt="image-20240609001429312"></p><p>命令如下</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div><p>PS：如果出现</p><p>Job for docker.service failed because the control process exited with error code.<br>See “systemctl status docker.service” and “journalctl -xeu docker.service” for details.</p><p>那说明daemon.json写错力</p><h2 id="结果">结果</h2><p>等了12分钟终于好了</p><p><img lazyload src="/images/loading.svg" data-src="Docker%E9%85%8D%E7%BD%AE%E5%92%B3%E5%92%B3/image-20240609001959554.png" alt="image-20240609001959554"></p><h2 id="补充">补充</h2><p>感觉这个很快就要不能用了</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="GitlabRunner" scheme="https://bblog.031105.xyz/tags/GitlabRunner/"/>
    
    <category term="Proxy" scheme="https://bblog.031105.xyz/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>非遗珍宝：ChrisDing早期国画作品展（一）</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9D%EF%BC%9Achrisding%E6%97%A9%E6%9C%9F%E5%9B%BD%E7%94%BB%E4%BD%9C%E5%93%81%E5%B1%95%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9D%EF%BC%9Achrisding%E6%97%A9%E6%9C%9F%E5%9B%BD%E7%94%BB%E4%BD%9C%E5%93%81%E5%B1%95%EF%BC%88%E4%B8%80%EF%BC%89.html</id>
    <published>2024-04-30T03:48:33.000Z</published>
    <updated>2024-09-30T12:51:30.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>起因如下</p><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/image-20240430115144759.png" alt="image-20240430115144759"></p><p>遂找老妈拍了点，并受到锐评</p><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/image-20240430115255797.png" alt="image-20240430115255797"></p><h2 id="展示">展示</h2><h3 id="《小跳蛙》">《小跳蛙》</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/62cc2a8ff1fecc9f09b927b087aad40.jpg" alt="62cc2a8ff1fecc9f09b927b087aad40"></p><h3 id="《科目三》">《科目三》</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/c567ef877c6fb2026f95b91fbf89dfd.jpg" alt="c567ef877c6fb2026f95b91fbf89dfd"></p><h3 id="《石榴熟了》">《石榴熟了》</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/41876e376ccdd4818247eb2b2746f71.jpg" alt="41876e376ccdd4818247eb2b2746f71"></p><h3 id="《石榴更熟了》">《石榴更熟了》</h3><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/4c599f1597405de076905853b5d270e.jpg" alt="4c599f1597405de076905853b5d270e"></p><h3 id="《画蟹》">《画蟹》</h3><blockquote><p>科普：宜兴话螃蟹叫“毛哈”</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="%E9%9D%9E%E9%81%97%E7%8F%8D%E5%AE%9Ddsy%E6%97%A9%E6%9C%9F%E4%BD%9C%E5%93%81%E5%B1%951/da4b381c0ec6755769bcefcd53b0589.jpg" alt="da4b381c0ec6755769bcefcd53b0589"></p>]]></content>
    
    
    <summary type="html">标题仅娱乐QAQ</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="国画作品" scheme="https://bblog.031105.xyz/tags/%E5%9B%BD%E7%94%BB%E4%BD%9C%E5%93%81/"/>
    
    <category term="艺术" scheme="https://bblog.031105.xyz/tags/%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>不知道花了多久但我就要说很快速的docker部署前后端项目</title>
    <link href="https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%8A%B1%E4%BA%86%E5%A4%9A%E4%B9%85%E4%BD%86%E6%88%91%E5%B0%B1%E8%A6%81%E8%AF%B4%E5%BE%88%E5%BF%AB%E9%80%9F%E7%9A%84docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%8A%B1%E4%BA%86%E5%A4%9A%E4%B9%85%E4%BD%86%E6%88%91%E5%B0%B1%E8%A6%81%E8%AF%B4%E5%BE%88%E5%BF%AB%E9%80%9F%E7%9A%84docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE.html</id>
    <published>2024-04-16T15:40:58.000Z</published>
    <updated>2024-09-30T12:51:51.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先感谢LLM4SE小组的所有成员的付出！</p></blockquote><h2 id="前端">前端</h2><h3 id="扔到github仓库">扔到github仓库</h3><p>主要是原先不在github上</p><p><img lazyload src="/images/loading.svg" data-src="%E4%B8%8D%E7%9F%A5%E9%81%93%E5%A4%9A%E4%B9%85%E4%BD%86%E6%88%91%E5%B0%B1%E8%A6%81%E8%AF%B4%E5%BE%88%E5%BF%AB%E9%80%9F%E7%9A%84docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/image-20240416234307784.png" alt="image-20240416234307784"></p><h3 id="前端该点东西you-know-what">前端该点东西you know what</h3><p>诸如api_url之类的</p><blockquote><p>Tips</p><p>其实可以用nginx反代把后端api隐藏</p><p>但这里懒得搞了，可以参考我软工3的CI/CD</p><p><a class="link" href="https://git.nju.edu.cn/2024seiii-19-ineedoffer/frontend-nju2">frontend-nju2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="邀请gpt4撰写一份前端的Dockerfile">邀请gpt4撰写一份前端的Dockerfile</h3><p>本地跑了下18能跑</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的 Node.js 18 镜像作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span> AS build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 package.json 和 package-lock.json 到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装项目依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建项目</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 nginx 镜像作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:stable-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将构建产物复制到 nginx 的网页目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /usr/src/app/dist /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对外暴露 80 端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nginx</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure></div><h3 id="（可选）自定义nginx-conf">（可选）自定义nginx.conf</h3><p>可以把自己的nginx.conf复制到容器内运行</p><h3 id="打包运行">打包运行</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t llm4se_frontend:1.0 .</span><br><span class="line">docker run -p 7001:80 -d llm4se_frontend:1.0</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="%E4%B8%8D%E7%9F%A5%E9%81%93%E5%A4%9A%E4%B9%85%E4%BD%86%E6%88%91%E5%B0%B1%E8%A6%81%E8%AF%B4%E5%BE%88%E5%BF%AB%E9%80%9F%E7%9A%84docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/image-20240417003432802.png" alt="image-20240417003432802"></p><p>打包打了117.3秒</p><h3 id="（必选）域名配置">（<s>必选</s>）域名配置</h3><p>改下服务器上的nginx配置就行（注意不是容器内部的那个）</p><p>ip+端口先测下成功没**（似乎比我本地npm run dev之后第一次访问快多了**</p><p>配域名A记录</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="实践记录" scheme="https://bblog.031105.xyz/categories/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="docker" scheme="https://bblog.031105.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>平板远程控制win本</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC.html</id>
    <published>2024-04-02T12:22:00.000Z</published>
    <updated>2024-09-30T12:51:30.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最easy的方式">最easy的方式</h2><p>直接下载软件比如ToDesk之类的</p><p>在两台设备上都安装了就能远程控制了，不过高帧和高画质啥的需要付费（指ToDesk，其他的也没试）</p><h2 id="TailScale-RDP">TailScale+RDP</h2><p>RDP，即Remote Desktop Protocol</p><p>win本自带的远程桌面连接</p><h3 id="win本启用远程桌面">win本启用远程桌面</h3><p>家庭版只能作为控制端，不能作为受控端</p><p>因此需要先升级到专业版~~（可以某宝上几块钱买一个~~</p><p><img lazyload src="/images/loading.svg" data-src="%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC/image-20240402212149127.png" alt="image-20240402212149127"></p><p>然后就能进行设置了</p><p><img lazyload src="/images/loading.svg" data-src="%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC/image-20240402204138015.png" alt="image-20240402204138015"></p><p>找到对应的地方启用下即可</p><h3 id="在其他终端设备上安装Remote-Desktop">在其他终端设备上安装Remote Desktop</h3><p><img lazyload src="/images/loading.svg" data-src="%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC/image-20240402204407039.png" alt="image-20240402204407039"></p><blockquote><p>我的平板是从谷歌商店里下载的，别的（比如ios商店）里面可能不叫这个名字，反正认准正版下载即可</p></blockquote><p>基本使用：添加电脑ip按设置连接即可使用</p><h3 id="TailScale的安装">TailScale的安装</h3><p>如果是在相同的局域网下，完成上述的步骤之后即可使用局域网ip进行连接。但是如果不在同一个局域网呢？</p><p>理论上，如果你有个固定的公网IP地址，那么上面用在局域网的办法也能用在公网上。但绝大部分人电脑上的IP地址都是局域网地址，在公网上无法使用，所以必须使用一些办法，将局域网地址转为公网地址（地址转换/端口映射），或者在两个相互独立的局域网间建设一个虚拟网络，用虚拟网络的地址互联互通（内网穿透）。Tailscale就提供了后一种解决方案。</p><p>Tailscale是一款基于WireGuard技术的虚拟组网工具，能帮助我们把安装了Tailscale服务的机器都放到同一个局域网。在安全性上，它是个去中心化、点对点连接加密的组网工具，而且开放了源代码。如果愿意甚至可以自己架设一个服务端，无须担心泄密问题。这里是下载地址<a class="link" href="https://tailscale.com/">Tailscale <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>在两台设备（受控端和控制端）上<strong>都需要</strong>安装。</p><h3 id="使用">使用</h3><p>两边都完成后（或者安装完成注册时）</p><p>应该在浏览器会自动弹出这么一个控制台，显示你账户下所有连接到这个虚拟局域网的设备</p><p>所以要记得用同一个账户</p><p><img lazyload src="/images/loading.svg" data-src="%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6win%E6%9C%AC/image-20240402204948937.png" alt="image-20240402204948937"></p><p>之后在这里看到两台设备都连接上了，有ip了就可以用了，平板上的话右上角有个vpn按钮得打开下再输入ip进行连接</p><h2 id="致谢">致谢</h2><p>感谢<a class="link" href="https://space.bilibili.com/502809046">haosN_ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的推荐和帮助</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="远程控制" scheme="https://bblog.031105.xyz/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式内容补充理解</title>
    <link href="https://bblog.031105.xyz/posts/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E8%A1%A5%E5%85%85%E7%90%86%E8%A7%A3.html"/>
    <id>https://bblog.031105.xyz/posts/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E8%A1%A5%E5%85%85%E7%90%86%E8%A7%A3.html</id>
    <published>2024-03-25T12:05:11.000Z</published>
    <updated>2024-09-30T12:51:29.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式的扩展">简单工厂模式的扩展</h2><p><strong>Q</strong></p><ol><li>简单工厂模式的简化：在有些情况下工厂类可以由抽象产品角色扮演，一个抽象产品类同时也是子类的工厂，也就是说把静态工厂方法写到抽象产品类中。</li><li>有些情况下，产品本身只提供一两个方法，此时抽象产品可以和简单工厂进行角色合并。啥意思？举个例子，没理解</li></ol><p>这两段话描述的是简单工厂模式的一种变体，也就是说在一些特定的情况下，简单工厂模式的结构可以进一步简化。具体来说，就是将工厂方法放入抽象产品类中，让抽象产品类既扮演产品角色，也扮演工厂角色。这种做法通常适用于产品类结构简单，功能相对单一的场景。下面通过一个例子来解释这个概念。</p><p><strong>A</strong></p><h3 id="示例：图形绘制">示例：图形绘制</h3><p>假设我们有一个绘图应用，需要绘制不同类型的图形，如圆形、正方形等。每种图形都有自己特定的绘制方法。这里，图形（Shape）是一个抽象概念，具体的圆形（Circle）和正方形（Square）是具体的实现。</p><h4 id="不使用简化的简单工厂模式">不使用简化的简单工厂模式</h4><p>首先看传统的简单工厂模式实现：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：圆形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：正方形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="使用简化的简单工厂模式">使用简化的简单工厂模式</h4><p>现在，按照你提到的简化，我们将工厂方法直接放入抽象产品类中：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类同时扮演工厂角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：圆形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：正方形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a square&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个简化后的模式中，<code>Shape</code> 类既定义了产品的接口（<code>draw</code> 方法），也提供了一个静态的工厂方法（<code>getShape</code> 方法）来根据类型创建具体的产品实例。这种做法简化了结构，减少了类的数量，特别适合那些产品类比较简单、数量不多的场景。这样，客户端只需要与<code>Shape</code>类交互即可获取具体的图形实例并调用其绘制方法，无需直接与具体的图形类或单独的工厂类交互，从而简化了客户端的使用复杂度。</p><p><strong>Q</strong></p><p>我有两个问题，那Square也会有getShape这个方法吗？那不是乱了吗？另外实体类可以调用静态方法吗？Shape是抽象类可以被实例化吗？</p><p><strong>A</strong></p><p>你提出的问题非常好，让我们逐一解答：</p><ol><li><strong><code>Square</code>类会有<code>getShape</code>这个方法吗？</strong></li></ol><p>在Java中（以及很多其他面向对象的编程语言中），静态方法属于类级别的方法，而不是实例级别的方法。当我们在抽象类中定义一个静态方法时，这个方法可以被类直接调用，而不是由类的实例调用。因此，虽然<code>Square</code>继承自<code>Shape</code>，它继承的是<code>Shape</code>的非静态行为和属性。静态方法<code>getShape</code>可以通过类名直接调用，如<code>Shape.getShape(&quot;CIRCLE&quot;)</code>，而不是通过一个<code>Shape</code>或<code>Square</code>的实例来调用。</p><p>所以，从概念上讲，<code>Square</code>类并不会“拥有”<code>getShape</code>方法。<code>getShape</code>是属于<code>Shape</code>类的，尽管<code>Square</code>是<code>Shape</code>的一个子类。这并不会导致混乱，因为静态方法的调用总是明确指向它们所属的类。</p><ol><li><strong>实体类可以调用静态方法吗？</strong></li></ol><p>实体类（或者说任何类）可以调用静态方法，但调用方式与实例方法不同。静态方法通过类本身来调用，而不是通过类的实例。这意味着，即使你有一个<code>Shape</code>类的实例，你也应该使用类名来调用静态方法，比如<code>Shape.getShape(&quot;CIRCLE&quot;)</code>，而不是使用实例来调用。这是因为静态方法不依赖于类的任何特定实例。</p><ol><li><strong><code>Shape</code>是抽象类可以被实例化吗？</strong></li></ol><p>抽象类不能被直接实例化。抽象类的目的是为其他类提供一个共同的、被继承的类型框架，定义一些可以在多个子类中共享的方法和属性。你不能创建一个抽象类<code>Shape</code>的实例，但你可以创建它的子类（如<code>Circle</code>和<code>Square</code>）的实例，这些子类提供了抽象方法的具体实现。静态方法<code>getShape</code>提供了一种机制，允许你根据输入的参数类型创建并返回具体子类的实例，而无需直接实例化抽象类。</p><p>简而言之，虽然<code>Shape</code>是一个抽象类且不能被实例化，但<code>Shape</code>类中的静态方法<code>getShape</code>提供了一种创建和返回<code>Shape</code>子类实例的方式，而这一切并不需要直接实例化抽象类<code>Shape</code>本身。</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="软件系统设计" scheme="https://bblog.031105.xyz/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://bblog.031105.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂模式" scheme="https://bblog.031105.xyz/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>服务器配置ssl&amp;域名解析</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.html</id>
    <published>2024-03-20T03:49:29.000Z</published>
    <updated>2024-09-30T12:51:30.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="证书下载">证书下载</h2><p><img lazyload src="/images/loading.svg" data-src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl/image-20240320115803325.png" alt="image-20240320115803325"></p><h2 id="启动一个nginx">启动一个nginx</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -p 443:443 --name my-nginx nginx:alpine</span><br></pre></td></tr></table></figure></div><p>然而我的服务器上不知道啥时候装了一个nginx，选择先停掉</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure></div><h2 id="上传pem和key">上传pem和key</h2><p>我选择放在了容器的/etc/nginx/cert/</p><p>然后配置nginx.config，注意里面的ip（我的nginx和app在两个docker里，所以通过docker网络来访问的，一开始填了个localhost能访问个鬼</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name chat2.xdingdang.eu.org;</span><br><span class="line"></span><br><span class="line">        ssl_certificate cert/chat2.xdingdang.eu.org.pem;</span><br><span class="line">        ssl_certificate_key cert/chat2.xdingdang.eu.org.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://&lt;容器IP&gt;:&lt;Port&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="原先的workers">原先的workers</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  url.<span class="property">port</span> = <span class="number">3000</span>; <span class="comment">// 你的服务端口</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">    <span class="attr">headers</span>: request.<span class="property">headers</span>,</span><br><span class="line">    <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    <span class="attr">redirect</span>: request.<span class="property">redirect</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(newRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="现在要改成转发到443">现在要改成转发到443</h2><p>就这个地方卡了半天，无语了</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  url.<span class="property">protocol</span> = <span class="string">&#x27;https:&#x27;</span>; <span class="comment">// 使用HTTPS协议</span></span><br><span class="line">  url.<span class="property">port</span> = <span class="number">443</span>; <span class="comment">// 使用443端口</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">    <span class="attr">headers</span>: request.<span class="property">headers</span>,</span><br><span class="line">    <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    <span class="attr">redirect</span>: request.<span class="property">redirect</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(newRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/03/20/image-20240320135834492.png" alt="image-20240320135834492"></p><p>现在开严格模式也能访问到了，更安全了🤣</p><h2 id="后记">后记</h2><p>似乎cf本身也会提供免费的TLS，以后可以试试</p><h2 id="正常的域名解析">正常的域名解析</h2><p>比如a.b.c解析到ip:8700</p><p>起一个nginx当然是可以的，另外还可以用cloudflare</p><p>未备案的域名正常来说没法直接解析到国内服务器</p><p><img lazyload src="/images/loading.svg" data-src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl/image-20240327220451618.png" alt="image-20240327220451618"></p><h3 id="写一个workers">写一个workers</h3><p>内容同上，但是里面不要有DirectIP</p><h3 id="配置workers路由">配置workers路由</h3><p>就是什么样的url会触发这个worker</p><h3 id="配置A解析记录">配置A解析记录</h3><p>让请求知道去哪</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="ssl" scheme="https://bblog.031105.xyz/tags/ssl/"/>
    
    <category term="cloudflare" scheme="https://bblog.031105.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="https://bblog.031105.xyz/posts/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html"/>
    <id>https://bblog.031105.xyz/posts/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</id>
    <published>2024-03-19T13:37:50.000Z</published>
    <updated>2024-09-30T12:51:29.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考">参考</h2><p><a class="link" href="https://sunweiguo.github.io/2019/02/04/java-basic/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3java%E5%8F%8D%E5%B0%84/">https://sunweiguo.github.io/2019/02/04/java-basic/彻底理解java反射/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="演示使用">演示使用</h2><p>如何能利用反射机制来实现OCP</p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/03/19/20240319214021.png" alt></p><p><img lazyload src="/images/loading.svg" data-src="https://imgss.s3.bitiful.net/2024/03/19/20240319214108.png" alt></p><blockquote><p>generated by GPT</p></blockquote><p>这里给出一个简化的例子以演示如何使用<code>config.xml</code>文件和反射来动态创建对象。假设我们有一个<code>Button</code>接口和两个实现了该接口的类：<code>RoundButton</code>和<code>SquareButton</code>。我们还有一个<code>ButtonHandler</code>接口和一个实现了该接口的类：<code>MyButtonHandler</code>。</p><p>首先，我们定义<code>Button</code>接口和<code>ButtonHandler</code>接口：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ButtonHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后，我们定义<code>RoundButton</code>、<code>SquareButton</code>和<code>MyButtonHandler</code>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ButtonHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundButton</span><span class="params">(ButtonHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        handler.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquareButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ButtonHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SquareButton</span><span class="params">(ButtonHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        handler.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyButtonHandler</span> <span class="keyword">implements</span> <span class="title class_">ButtonHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Button clicked!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接下来，我们创建<code>config.xml</code>文件：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>com.example.RoundButton<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handler</span>&gt;</span>com.example.MyButtonHandler<span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>最后，我们使用Java的反射机制来读取<code>config.xml</code>文件并创建对象：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析XML文件（这里为了简化，我们假设已经获取到了type和handler）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;com.example.RoundButton&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="string">&quot;com.example.MyButtonHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用反射创建ButtonHandler对象</span></span><br><span class="line">            Class&lt;?&gt; handlerClass = Class.forName(handler);</span><br><span class="line">            <span class="type">ButtonHandler</span> <span class="variable">buttonHandler</span> <span class="operator">=</span> (ButtonHandler) handlerClass.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用反射创建Button对象</span></span><br><span class="line">            Class&lt;?&gt; buttonClass = Class.forName(type);</span><br><span class="line">            <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) buttonClass.getDeclaredConstructor(ButtonHandler.class).newInstance(buttonHandler);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 点击按钮</span></span><br><span class="line">            button.click();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当你运行这个程序时，它会输出：“Button clicked!”。这就是我们通过读取<code>config.xml</code>文件和使用反射来动态创建<code>Button</code>和<code>ButtonHandler</code>对象的例子。</p><p>注意：这个例子非常简化，实际的XML解析和错误处理会更复杂。此外，确保你的类路径（classpath）正确设置，以便Java可以找到你的类。</p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    <category term="软件系统设计" scheme="https://bblog.031105.xyz/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计原则" scheme="https://bblog.031105.xyz/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Droplet购买记录</title>
    <link href="https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/droplet%E8%B4%AD%E4%B9%B0%E8%AE%B0%E5%BD%95.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%9D%82%E8%AE%B0/droplet%E8%B4%AD%E4%B9%B0%E8%AE%B0%E5%BD%95.html</id>
    <published>2024-03-16T13:32:05.000Z</published>
    <updated>2024-09-30T12:51:30.604Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fa9a1c9a159cbd3dad2fea8c327f6b3d20bf7e5e2cf2bd8f363229f91c496599">859c29499e97b37e25280a7293bbe187e746c5c12be59feb896b58848ba249e03d07ce5726e31b8fb2e8de3dd5b95222f09aadd9869aeadc4477380601920e318db2f2cde0477dd0a07b6de7108c9786fb92d648392efa02544036a09693a3e022628aaa1e9ddb9f6484e60aeb81d1398ea30d956b6aa113f186b7208b0eac3f98606471e5c70c6863579a8c9dcf98af13de4f3ad3a28f280dfcaf079d06e18a1ee8ba960f85d7954e721d2879fa6d17c4add25d39f1915c1a57041e06a28afaf1a9999ed9073cc82872b2da27b8a58719f0e819410b2d1a07dcc3295d4a63bb6d8245c6dfeaa4d949a844672f45a0bec30b0bacbdce1b73013f2cb44eafc259cccb9761607458115ef8ecbb6d5ade0b38fbcea43dc74a9ad964063987646537e370ece57c35e2840e71472c31867e317f4947f72a0c2e4f4eec0b34942243fe45a659b081c71680a864f9376922ab8fab96d1d3f8dbd50cfbf27ba5e48e3ef6bee152fc4b8fcccdae4c9b85dfec40ae7ad01e0dd2c5f252a08b48b1f2feacfa9c6e61cc8d5101404af1582743ac7bab45431856397e70e5fa8c264c0938ad5251ddb59bf3cb950cd72aa63c24fe3d85d96c7e099c8b3713cc6fee64db5fa6a0419a8b2cfe3660b68df666536f6e01e31064d23a4a612fafbe701c74eaa67db749c610cdfe2c3368cd8882f8447b74ee23e868f65350e1afa3c581b7db6b7a5406b3ea5bf58b61f2b20617b811f6b7b733f15c19b3d9c22c43294220f811311a84593233e184f79a8258bb2518528a92e082f9fecdbe02fb790385fae1d09ba9875f496ddfe0d15a0ad2e42e2246e9876e645976466740fa70f229f472ced3d89e357237ca0e9e9b395dcc7f5b795861cde21ac3d86512bb99a82d3c50ea7d5abe49c34b623ea704fc5acac8b761a4a92a2c14bef9115a83084eff740d0b1958c613b636e151266c6b06cc4b42bed4a2081b0d5086b2c6a0a77b31e664c39cccfca4ba4dff4bda07db32d02561079dd604db15cd9a56d2fe8364a884a0fa9b638d97ac9ef0dd2f9fc82251c2ab605f92d331f1851085940e1c2cbfd915485c0ffc6f66703899f908ea6745110406066b4f6f2210462516a44b9689e3e12b97047200a32c85a43fa1ce738b71913161fc228b387841d285a4c39c15d8476f0e8bfd04b634d70a881d9232db2e403b4711798dc5bebe071e4224e2de3edbf80de0ef64bb15b80f71fa811342d1a5aa08ad58074cae6cc36e5215fbeea5710bb141e551fecd933764942461a78b6494acfe5597674396958247c5b15f88f9b399f2bbd2facf74480d393bfbc7c0445a95dc7bd3e492cfb9eb58e903241ecdeb61363e8cb3f93f480a82c8cc85342399d14999ee5dcd325b1fa9232556a56dceb7e427f78c1ee21020200efe74e63cd5b7ccd7f384585c2bfab50d3f1a349986f6ec8d9ba6ea314c9ad270f627702aa71a36b5d6dca2d2ac4e904c6c41ba0562d871c9af0baa43bfced8aaa7d4ba1495afe5e83065b6a452a658e757fe1ec375f31373e8e9e62cacb5bf7f3f082930482cbd3fe06ba5036f73182b2c32a8a3c91838796000639e584f3d77f928b6ed53bba0a8d2cf925060aa5fc9e5d81c64cc9205d566ab15a4581b14c905972874bd9231b9cde593f2cef324ce51da8b81cbde96d170a92d6b059b07f35e57fe0045ce247ba5bd3f98e0b8487f0c573c9877c49c771a21e42a55efc43d5cb1f03862c052ab9f7e61d56b32424ab84048acd84890fb1dc5951719d1e186cadaee8bf31941a0e7bc43e123f60d42ae199a734558865174d0f525011afe15a2d938088c6b28bbb712ffdbb98607a809541aca0e576c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="杂记" scheme="https://bblog.031105.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="服务器" scheme="https://bblog.031105.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Visa卡" scheme="https://bblog.031105.xyz/tags/Visa%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>copilot个人使用记录</title>
    <link href="https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/copilot%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/copilot%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html</id>
    <published>2024-03-15T08:30:00.000Z</published>
    <updated>2024-09-30T12:51:50.961Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bc06de997b300b6917b76282b42b653659f9edb8ecdbbd825b187a56f3323110">859c29499e97b37e25280a7293bbe1870fb0069f4e3c381cf2cff805e582fe313c84aef027249cd80e8f6086822fcfc8a9c1686d684b0fa9b6f74d85f2c829b7a92ea42b9523d15f0e64c23883799babd73caaeea52345cd69341fc2b641bb18fdeff16211dab42962a43e8b2cac908bbe5837d3e8295dc5da050e0ffb7e9233cf78d28d3005778ae4c6778032d7890e285afb72145a6bf1837a65c269e1ff49a627167b24367fac4f68fb2a6f2df2836653d85fde4c99d35138d6570ed2de035584c781e014bf9b7cc8a5106648e20fd63dcda5c5bf157eb83b9f384009a726590ce4fa30e90bf7baaed28c1fe785585b24ccf83031955401b648956d316763296f5327fc343936085303a6bf9864dc459cfc5b7491e42f719ba18096f691c0727979329419d7eae213d9ae22b0eba942b6f3f0cb90fb28403b6c0320b1f68dd5715d1bb65c106a2bd3ebaf91e24b8da68bd717dc1641191bac45c6df7eac88be1e1a670dfbcc4187a9f66fcd30c891cc79a7229376a1402aa68b0e05f63cc42c9d2071c86a76f417b086c97f76e047f3aa28df63eb63762af7f27e3336740d901e263ca168efd3f4e32ca2f0b1c51cd970ce26a6ef09475487f41ca5067001bc306190a165cc88b9c68a792c44024446c665c75c84196e6d3dd3d2037acc5472dbb0309d38f5912c837caea28897c08256bc3c8f2d596196f61661b2b4a28d53b0d2c895028764de4316e09499d55176f5f7c4337891bd91c153690e43ee2bfa0d3bef000c2eff999e6a268b2e99d554d637be319a73e7b5e78caaae5f9ed7fc599f37eb5027d5118a1b4f57c0e1e74c8858fa2f32d55712f25cb41dd3de76976feadefda4ceb6aa26e120b25b9972e39c2a6ad323368f7107a9189af3d22197207ec0547536a723418c6c677a2cbb7b4d7f0a5e9b82000e2d01799b16c2d84e3600f2e53923a0a1356cb58afb5f9180298782d31ed3136f2d9e38696c9c816f649c9da95c9f307421b8bba7a0cf9e0a07fbfb585fdd4db1ff8d9f804e7e8e05ec685c409df6a6710fda7f1412f9f1d049e38f4a8a89dfa9e318ec5f4861a9caee64f0f61a6b86261d30697904f3b2668039cdf1d74a9059e4d81dcca89e71d8fcfdf5e8c4da27f44f1a4f2c8f3c99b41827ac526c9b0cc3d56287fcec21db3e2d61ecaefe90d66818aa10d34ad178e2de50106edffa1d62264d847a016ea88339e1559ce262a5359b09f536f68acec381b10021db9b3d467ceb6c8ee9b96ad726e7345b23cb4feab844595d15021bf9e03a593107f860879a4ce7abe3f5f0f04400dd30e1aa49f9204308661ab123dc5b19abcc03ad45a12d0cb99941d323340905e05362fe40b696bdd8edcfec6c8ae93f3284b14bf8c3fa1763ce0aa9f00a80aaefb75f479c863d4494d8c407150514ea8090dac86ef7ad81fc78f15f5f53f75cbde8d7093f657ca522acfc6ba8dae11d37e100f79c44c3194b2e8389956e6568bdc8acdb93c6daa7249c948e540eee6158bc3f13dd04ef0707473cf449c871514e16b117bd6c119b9ecb8fcc6d4148bba9b8edfbb1c0d51e03042b453349662cd71ae7e9b2ff8ed1db9d006c079bde050375cd54ca33ab097892f6f633c91974135093a01ac11581a6a5e60df965ddfbedac92daebfe4a261c0142ecd0af5289cc43f7fa6eb8aeb715c7a536e0bf4eca8a7515dfdbbb645810449af04c71558c942f22e18d4356dfe4be53d584eef27207cb2372b69a0fd2901ab308e899105bd09c22f021ca4449ba52e4d0e33ebe9da147c4df75651fcec26c023593154d77869d172a11eccac83f8ec28d05771b4c5001e38526f9432e557ff14f95f4420664bc06d952a599a80ef5bff0b09012b4f0a9905367fa36adb9258130f2147e35ba142aec1c2270ce247c15809c8dbf0c8154d9e01fe4fd8aac24778537a4b85e64f17ec4ca6a91dced0b3ab26a3f6c7df21b399e2fb554672ec4e92f685d29d2491dd23a7d29158ed5f513d669c530ffc65c3b0cecef1da889e904d01de4ddab900c8be28d2e165e4ee0c5b1cb1837a2ad361a9207e05cb6e265e785926eead72b92a1fed6e356b1b40b08d4a76ec21409e4fd2618144a2b2483f5c35cc137595c80aa0d64dd1c5fd06aba609b43dbd11cde6f21c636ccd4acd94782f6ec117a21b195382f1bfd9274446196e87ca46db03de30f09ed92182e2b46ae572ecb8958f2f4e804b712bc5e8abc7c5f14252515295b2cf219f1dd61c24ff92614b671c65236b92aeddc08f67ba00878</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="实践记录" scheme="https://bblog.031105.xyz/categories/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="摸鱼" scheme="https://bblog.031105.xyz/tags/%E6%91%B8%E9%B1%BC/"/>
    
    <category term="猎奇" scheme="https://bblog.031105.xyz/tags/%E7%8C%8E%E5%A5%87/"/>
    
  </entry>
  
  <entry>
    <title>3月14日心情日记</title>
    <link href="https://bblog.031105.xyz/posts/%E6%99%B4%E9%9B%A8%E5%BD%95/3%E6%9C%8814%E6%97%A5%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0.html"/>
    <id>https://bblog.031105.xyz/posts/%E6%99%B4%E9%9B%A8%E5%BD%95/3%E6%9C%8814%E6%97%A5%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0.html</id>
    <published>2024-03-13T16:19:02.000Z</published>
    <updated>2024-09-30T12:51:32.935Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="21b8ae784a7112e815050a6e1e48520a76fac4195a8659c33ff504b0eea48b96">859c29499e97b37e25280a7293bbe1870fb0069f4e3c381cf2cff805e582fe31a0b62b3f02bb86c1a82861f72eb7dc2ed89104e1cf0aa877f9416af05521b5146cddb9e14368ebcb6c11646cd28146a33e5535d13ae150f795f4801bc1811ed78166304caf101bb9482cb0f6a60d2a5574967c2138f1ac1bd0a50866b818a1b00eca28dbebd2e8b2e735ab1b3fdbf247fa437f686a4c5534f286336e284112d8f30127614db58f0f296524c82a9cfe167d4e35f79e42ccf9f16c474c97337dba32ead3386a00bb03bdb7847474878b9ffb6295241cfa7a907ce4f03229115eab6dc1fd7c15391d07c9d7ba32c0f58b781dd2c2626a05670f4be3c59f370aab3909ec975dea332ea1a46a00e1722bdfecea812f737370b0f5426a2bc262acbccf35cf2e2ce32a44f179cb10ca5f0c5f234e548990e6d3b7944cd9fb2020669408cfc62e82c8f3e1011c04b6b1ed0525ec74eb660210c66f164ee3e04cea320ff092e707e288a2f4a6d834fbc01e4ab47ca82ff1ea2c8d470610320c926f0dd8fd7a5693380a2c4ae53622a8d31f1f767f2ab127d3e15c9c8ff03bcd6af7279a0ef02f59ab7bf625a236442efa4271db170a2cf9591ceae581737158f0a7a562afb633ad9cd4782d9d2c57868db3096ae89473febcd2cb90ec32e027a5c52a88ffb47a1a4a77c762cacf9279aedb00eaef1eb704d7c91d84a86c22b177bcb4881c75863e3f10f639fd864a1325fd351e9af741a512168b8e2aae64325f4cd3bfbbd346fef74f0189fd1fa8ddf61a51c699c31c0a089d75ee01ea806cf6e37f0f8c3f36f9baa6913e2de6644639659afc70259d9321078cf5e955710bcccafffefa2379f5d4ae31939f380ad97e0fc82b976093601f57478d4b0c32f6af890a404f965fc888ee9d3541bddc674b4f6a0f76317678991106022c548c99b28f7ec689a40ad4b88524bad1252f99107b0deac217c3763de602de54704a736844daa2d53e156341965caaf1cd6987701d6a3af484ea808558b190670064943f98ea0aabfae0fc0192186be7f8d0e120ebe82b1eac484871480918eb8cee9c21258806e611b810178a050e45070308e4ac311bfed387520f89621ef9e0220e6ced5a490ae80d2af3443c7add22948428df9b87330a0457d6d5e904ede9ad06062dc128d8d4708bd1cdcaa22ff9dc56f46f313a4b4a92eb4803ab20b41e63e63fe6feb063</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="晴雨录" scheme="https://bblog.031105.xyz/categories/%E6%99%B4%E9%9B%A8%E5%BD%95/"/>
    
    
    <category term="日记" scheme="https://bblog.031105.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
    <category term="多云" scheme="https://bblog.031105.xyz/tags/%E5%A4%9A%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Commit规范学习记录</title>
    <link href="https://bblog.031105.xyz/posts/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/commit%E8%A7%84%E8%8C%83%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html"/>
    <id>https://bblog.031105.xyz/posts/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/commit%E8%A7%84%E8%8C%83%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html</id>
    <published>2024-03-13T03:14:09.000Z</published>
    <updated>2024-09-30T12:51:51.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考">参考</h2><p><a class="link" href="https://www.conventionalcommits.org/zh-hans/v1.0.0/#%e7%ba%a6%e5%ae%9a%e5%bc%8f%e6%8f%90%e4%ba%a4%e8%a7%84%e8%8c%83">https://www.conventionalcommits.org/zh-hans/v1.0.0/#约定式提交规范 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://cheatsheets.zip/conventional-commits">https://cheatsheets.zip/conventional-commits <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="自己的例子">自己的例子</h2><h3 id="docs">docs</h3><p>用于修改文档，例如修改 README 文件、API 文档等</p><p>Changes in documentation only</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docs: update setup section of README</span><br></pre></td></tr></table></figure></div><h3 id="style">style</h3><p>用于修改代码的样式，例如调整缩进、空格、空行等</p><p>Code changes that do not impact the functionality</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style(login): correct indentation <span class="keyword">in</span> login component</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">速通commit规范，省得每次都乱写，只会用feat和fix</summary>
    
    
    
    <category term="工具学习" scheme="https://bblog.031105.xyz/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="规范学习" scheme="https://bblog.031105.xyz/tags/%E8%A7%84%E8%8C%83%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
